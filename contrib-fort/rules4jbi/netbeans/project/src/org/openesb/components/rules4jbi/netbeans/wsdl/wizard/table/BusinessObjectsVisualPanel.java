/*
 * @(#)BusinessObjectsVisualPanel.java        $Revision: 1.1.1.1 $ $Date: 2008/06/30 08:53:19 $
 * 
 * Copyright (c) 2008 Milan Fort (http://www.milanfort.com/). All rights reserved.
 * 
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the "License"). You may not use this file except
 * in compliance with the License.
 * 
 * You can obtain a copy of the license at http://www.sun.com/cddl/cddl.html.
 * See the License for the specific language governing permissions and limitations
 * under the License.
 */

package org.openesb.components.rules4jbi.netbeans.wsdl.wizard.table;

import org.openesb.components.rules4jbi.netbeans.wsdl.wizard.Constants;
import java.awt.Dimension;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.netbeans.api.project.Project;
import org.openide.util.NbBundle;

/**
 *
 * @author Milan Fort (http://www.milanfort.com/)
 * @version $Revision: 1.1.1.1 $ $Date: 2008/06/30 08:53:19 $
 * 
 * @since 0.1
 */
public class BusinessObjectsVisualPanel extends javax.swing.JPanel implements ListSelectionListener {
    
    private static final long serialVersionUID = -2449366228226639442L;
    
    private BusinessObjectsTableModel dataModel;
    
    /** Creates new form BusinessObjectsVisualPanel */
    public BusinessObjectsVisualPanel(final Project project) {
        initComponents();
        
        setPreferredSize(new Dimension(
                Constants.PANEL_PREFERRED_SIZE_WIDTH, Constants.PANEL_PREFERRED_SIZE_HEIGHT));
        
        dataModel = new BusinessObjectsTableModel();

        table.setDefaultRenderer(String.class, new TypeRenderer());
        table.setDefaultEditor(String.class, new TypeEditor(project));

        table.setDefaultRenderer(Direction.class, new DirectionRenderer());
        table.setDefaultEditor(Direction.class, new DirectionEditor());
        
        table.setDefaultRenderer(Cardinality.class, new CardinalityRenderer());
        table.setDefaultEditor(Cardinality.class, new CardinalityEditor());
        
        table.setModel(dataModel);

//        table.setFillsViewportHeight(true);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        table.setRowSelectionAllowed(true);
        table.setColumnSelectionAllowed(false);

        table.getTableHeader().setReorderingAllowed(false);

        /*
         * This is set automatically to false, because previous two statements have different values;
         * setting it to false explicitely would cause the previous two properties to have value false as well.
         */
//        table.setCellSelectionEnabled(false);

        disableButtons();
        table.getSelectionModel().addListSelectionListener(this);
    }
    
    
    public void valueChanged(ListSelectionEvent event) {
        if (event.getValueIsAdjusting()) {
            return;
        }

        ListSelectionModel listSelectionModel = (ListSelectionModel) event.getSource();

        if (listSelectionModel.isSelectionEmpty()) {
            disableButtons();

        } else {
            enableButtons();

            int selectedRow = listSelectionModel.getMinSelectionIndex();

            if (selectedRow == 0) {
                upButton.setEnabled(false);
            }

            if (selectedRow == table.getRowCount() - 1) {
                downButton.setEnabled(false);
            }
        }
    }
    
    @Override
    public String getName() {
        return NbBundle.getMessage(BusinessObjectsVisualPanel.class, "BusinessObjectsPanel.name");
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        scrollPane.setViewportView(table);

        addButton.setText(org.openide.util.NbBundle.getMessage(BusinessObjectsVisualPanel.class, "BusinessObjectsVisualPanel.addButton.text")); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText(org.openide.util.NbBundle.getMessage(BusinessObjectsVisualPanel.class, "BusinessObjectsVisualPanel.removeButton.text")); // NOI18N
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        upButton.setText(org.openide.util.NbBundle.getMessage(BusinessObjectsVisualPanel.class, "BusinessObjectsVisualPanel.upButton.text")); // NOI18N
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        downButton.setText(org.openide.util.NbBundle.getMessage(BusinessObjectsVisualPanel.class, "BusinessObjectsVisualPanel.downButton.text")); // NOI18N
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addButton)
                    .addComponent(removeButton)
                    .addComponent(upButton)
                    .addComponent(downButton))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addButton, downButton, removeButton, upButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(upButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(downButton))
                    .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (!stopCellEditing()) {
            return;
        }
        
        int selectedRow = table.getSelectedRow();
        
        /* works also for selectedRow == -1 */
        dataModel.addNewRecord(selectedRow + 1);
        selectRow(selectedRow + 1);        
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        if (!stopCellEditing()) {
            return;
        }
        
        int selectedRow = table.getSelectedRow();

        if (selectedRow != -1) {
            dataModel.deleteRecord(selectedRow);

            if (table.getRowCount() > 0) {
                if (selectedRow < table.getRowCount()) {
                    selectRow(selectedRow);
                    
                } else {
                    assert selectedRow == table.getRowCount();

                    selectRow(selectedRow - 1);                
                }
            }
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        if (!stopCellEditing()) {
            return;
        }
        
        int selectedRow = table.getSelectedRow();

        if (selectedRow > 0) {
            dataModel.moveRecordUp(selectedRow);
            selectRow(selectedRow - 1);
        }
    }//GEN-LAST:event_upButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        if (!stopCellEditing()) {
            return;
        }
        
        int selectedRow = table.getSelectedRow();

        if (selectedRow < table.getRowCount() - 1) {
            dataModel.moveRecordDown(selectedRow);
            selectRow(selectedRow + 1);
        }
    }//GEN-LAST:event_downButtonActionPerformed

    public BusinessObjectsTableModel getDataModel() {
        return dataModel;
    }
    
    public void setDataModel(BusinessObjectsTableModel dataModel) {
        this.dataModel = dataModel;
        
        table.setModel(dataModel);

        TableColumnModel columnModel = table.getColumnModel();
        for (int i = 0; i < columnModel.getColumnCount(); i++) {
            TableColumn tableColumn = columnModel.getColumn(i);
            
            if (i == 0) {
                tableColumn.setPreferredWidth(400);
                
            } else {
                tableColumn.setPreferredWidth(100);
            }
        }
    }
    
    private void disableButtons() {
        removeButton.setEnabled(false);
        upButton.setEnabled(false);
        downButton.setEnabled(false);
    }

    private void enableButtons() {
        removeButton.setEnabled(true);
        upButton.setEnabled(true);
        downButton.setEnabled(true);
    }
    
    private void selectRow(int rowIndex) {
        table.getSelectionModel().setSelectionInterval(rowIndex, rowIndex);

        table.scrollRectToVisible(table.getCellRect(rowIndex, 0, true));
    }
    
    private boolean stopCellEditing() {
        TableCellEditor cellEditor = table.getCellEditor();
        
        if (cellEditor != null) {
            return cellEditor.stopCellEditing();
            
        } else {
            return true;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton downButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable table;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables
}
