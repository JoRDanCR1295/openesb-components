# JBI Component build properties 
# you can override the properties specified here such as glassfish.home and the 
# jmx connection properties by passing the file with those properties in the 
# ant command line property settings with property name "user.properties.file" 
# for example, "ant -Duser.properties.file=../build.properties install" if a 
# global build properties file is maintains for both MyEngine and MyBinding
# projects at one level above the root directory.
# --------

# --- set the glassfish home here ---
glassfish.home=C:/Sun/glassfish

# --- jmx connection properties to use in the jbi ant tasks. set these to the 
# glassfish admin host, port, username, password settings.
jbi.host=localhost
jbi.port=4848
jbi.username=admin
jbi.password=adminadmin

# --- jbi component name used in jbi ant tasks 
jbi.component.name=${artifactId}

# source properties
src.dir=src/java
conf.dir=src/conf
# This directory is removed when the project is cleaned:
build.dir=build
build.classes.dir=${build.dir}/classes
build.predist.dir=${build.dir}/predist
build.predist.lib.dir=${build.predist.dir}/lib
build.predist.jar=${build.predist.dir}/component.jar

# This directory is removed when the project is cleaned:
dist.dir=dist
dist.zip=${dist.dir}/${jbi.component.name}.zip
jbi.install.file=${dist.zip}

# test properties
test.src.dir=test/java
# This directory is removed when the project is cleaned:
build.test.dir=${build.dir}/test
build.test.classes.dir=${build.test.dir}/classes
build.test.results.dir=${build.test.dir}/results

# classpath settings

# jbi library classpath required to compile the jbi component implemenation.
libs.jbi.classpath=\
    ${glassfish.home}/jbi/lib/jbi.jar

# jbi ant tasks classpath required to run the jbi admin tasks on the component.
jbi.ant.tasks.classpath=\
    ${glassfish.home}/lib/sun-appserv-ant.jar:\
    ${glassfish.home}/jbi/lib/jbi-ant-tasks.jar

# web services client classpath required for the test clients
libs.jaxrpc16.classpath=\
    ${glassfish.home}/lib/javaee.jar:\
    ${glassfish.home}/lib/webservices-rt.jar

# set the junit runtime libraries classpath here.
# NOTE: you must supply these two jar files in the ant main classpath or 
# through -lib option of ant in addition to fixing them here.
libs.junit.classpath=\
    junit.jar:\
    ant-junit.jar

# list of extra javac options
javac.source=1.5
javac.target=1.5

# javac classpath
javac.classpath=\
    ${libs.jbi.classpath}

# javac test classpath
javac.test.classpath=\
    ${javac.classpath}:\
    ${build.classes.dir}:\
    ${libs.jaxrpc16.classpath}:\
    ${libs.junit.classpath}

# run test classpath
run.test.classpath=\
    ${javac.test.classpath}:\
    ${build.test.classes.dir}:

# unit test settings
test.unit.skip=false
# integration test settings
test.integration.skip=false;
test.sa.skip=false;
test.deploy.skip=false;
test.undeploy.skip=false;
# set to true if installing the component is not required as part of integration test
test.install.skip=false;
# set to true if uninstalling the component is not required as part of integration test
# may require to set to true when testing other components against this component.
test.uninstall.skip=false;

# dependent test SA projects dependency. set testSA.eanbled=true if 
# you have to use service assembly as part of the test.
testSA.enabled=false
# the below properties will be used for building and deploying
# test assembly when the testSA.enabled is set to "true"
# MyBinding does not need the testSA to be deployed for testing.
project.testSA=test/testSA
project.testSA.build.dir=${build.test.dir}/testSA/build
project.testSA.dist.dir=${build.test.dir}/testSA/dist
# dependent SA project's artifacts dependency
reference.testSA.zip=${project.testSA.dist.dir}/testSA.zip
# test service assembly name
testSA.name=${artifactId}_TestSA
