//IDL
module it{
module imolinfo{
module jbi4corba{
module test{
module webservice{
module generator{
module echocomplex{
module typedefany{

  typedef string mystring;  
  typedef long myint;  
  typedef boolean myboolean;
  typedef char mychar;
  typedef wchar mywchar;
  typedef wstring mywstring;
  typedef short myshort;
  typedef unsigned short myunsignedshort;
  typedef long mylong;
  typedef unsigned long myunsignedlong;
  typedef long long mylonglong ;
  typedef unsigned long long myunsignedlonglong;
  typedef float myfloat;
  typedef double mydouble;

    // Arrays and Matrix
  typedef string mystringArr[2];  
  typedef long myintArr[2];  
  typedef boolean mybooleanArr[2];
  typedef char mycharArr[2];
  typedef wchar mywcharArr[2];
  typedef wstring mywstringArr[2];
  typedef short myshortArr[2];
  typedef unsigned short myunsignedshortArr[2];
  typedef long mylongArr[2];
  typedef unsigned long myunsignedlongArr[2];
  typedef long long mylonglongArr[2];
  typedef unsigned long long myunsignedlonglongArr[2];
  typedef float myfloatArr[2];
  typedef double mydoubleArr[2];
  typedef string MatrixString[3][3];
  typedef long MatrixLong[3][3];

  // Sequences
  typedef sequence <string> mystringSeq;
  typedef sequence <long> myintSeq;  
  typedef sequence <boolean> mybooleanSeq;
  typedef sequence <char> mycharSeq;
  typedef sequence <wchar> mywcharSeq;
  typedef sequence <wstring> mywstringSeq;
  typedef sequence <short> myshortSeq;
  typedef sequence <unsigned short> myunsignedshortSeq;
  typedef sequence <unsigned long> myunsignedlongSeq;
  typedef sequence <long long> mylonglongSeq;
  typedef sequence <unsigned long long> myunsignedlonglongSeq;
  typedef sequence <float> myfloatSeq;
  typedef sequence <double> mydoubleSeq;
  
  // value type
  valuetype EchoVT {
    public  short publicShort;
    private long  privateLong;
  };

    
  // value type (boxed) - complex
  valuetype MySequence {
    public sequence<long> data;
  };

  // struct
  struct EchoStruct {
    boolean            fieldBoolean;
    char               fieldChar;
    wchar              fieldWChar;
    // http://jira.codehaus.org/browse/XFIRE-462
    octet              fieldOctet;
    string             fieldString;
    wstring            fieldWString;
    short              fieldShort;
    unsigned short     fieldUnsignedShort;
    long               fieldLong;
    unsigned long      fieldUnsignedLong;
    long long          fieldLongLong;
    unsigned long long fieldUnsignedLongLong;
    float              fieldFloat;
    double             fieldDouble;
    any				   fieldAny;
  };
    

  // StructOfStruct
  struct StructOfStruct {
    EchoStruct internalStruct;
  };

  // value type
  valuetype VTPrimi {
    public boolean            fieldBoolean;
    public char               fieldChar;
    public wchar              fieldWChar;

    // http://jira.codehaus.org/browse/XFIRE-462
    public octet              fieldOctet;

    public string             fieldString;
    public wstring            fieldWString;
    public short              fieldShort;
    public unsigned short     fieldUnsignedShort;
    public long               fieldLong;
    public unsigned long      fieldUnsignedLong;
    public long long          fieldLongLong;
    public unsigned long long fieldUnsignedLongLong;
    public float              fieldFloat;
    public double             fieldDouble;
  };

  valuetype VTPrimiSeq {
    public sequence<VTPrimi> data;
  };

  valuetype ValueTypeOfValueType {
    public VTPrimi data;
  };

  valuetype ValueTypeOfStruct {
    public EchoStruct data;
  };

  // StructOfStruct
  struct StructOfValuetype {
    VTPrimi data;
  };

  // TypeDefs
  typedef EchoVT myEchoVT;  
  typedef EchoStruct myEchoStruct;
  typedef StructOfStruct myStructOfStruct;
  typedef VTPrimi myVTPrimi;
  typedef VTPrimiSeq myVTPrimiSeq;
  typedef ValueTypeOfValueType myValueTypeOfValueType;
  typedef ValueTypeOfStruct myValueTypeOfStruct;
  typedef StructOfValuetype myStructOfValuetype;  
  
  // Sequences of complex types and VT
  typedef sequence<EchoStruct> EchoStructSeq;   
  typedef sequence<EchoVT> EchoVTSeq; 
  typedef sequence<MySequence> MySequenceSeq; 
  // Sequence of sequence 
  typedef sequence<myintSeq> myintSeqOfSeq;

  // Arrays of complex types and VT
  typedef EchoStruct EchoStructArr[2];   
  typedef EchoStruct EchoStructMatrix[2][2];   
  typedef EchoVT EchoVTArr[2];   

  typedef any MyAny;  

  //==================================================
  //                                         INTERFACE
  //==================================================
  interface EchoComplexTypeDefAny {
	any echo(in any msg);
	string echoinout(inout any msg);
  };

};
};
};
};
};
};
};
};
