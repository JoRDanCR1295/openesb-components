<?xml version="1.0" encoding="UTF-8"?>
<wsdl:definitions name="EchoComplexTypeDefAny" targetNamespace="http://it.imolinfo.jbi4corba.test.webservice.generator.echocomplex.typedefany.EchoComplexTypeDefAny" xmlns:plnk="http://docs.oasis-open.org/wsbpel/2.0/plnktype" xmlns:imolacorba="uri://schemas.imola.it/jbi/wsdl-extensions/corba/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="http://it.imolinfo.jbi4corba.test.webservice.generator.echocomplex.typedefany.EchoComplexTypeDefAny" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/">
  <wsdl:types>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://it.imolinfo.jbi4corba.test.webservice.generator.echocomplex.typedefany.EchoComplexTypeDefAny" xmlns="http://it.imolinfo.jbi4corba.test.webservice.generator.echocomplex.typedefany.EchoComplexTypeDefAny" xmlns:xs="http://www.w3.org/2001/XMLSchema">
    <xs:element name="echo">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="msg" type="xs:anyType"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="echoResponse">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="return" type="xs:anyType"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="echoinout">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="msg" type="xs:anyType"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="echoinoutResponse">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="return" type="xs:string"/>
                <xs:element name="msg" type="xs:anyType"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
</xs:schema>
  </wsdl:types>
  <wsdl:message name="echo">
    <wsdl:part name="parameters" element="tns:echo">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="echoResponse">
    <wsdl:part name="parameters" element="tns:echoResponse">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="echoinoutResponse">
    <wsdl:part name="parameters" element="tns:echoinoutResponse">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="echoinout">
    <wsdl:part name="parameters" element="tns:echoinout">
    </wsdl:part>
  </wsdl:message>
  <wsdl:portType name="EchoComplexTypeDefAny">
    <wsdl:operation name="echo">
      <wsdl:input name="echo" message="tns:echo">
    </wsdl:input>
      <wsdl:output name="echoResponse" message="tns:echoResponse">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="echoinout">
      <wsdl:input name="echoinout" message="tns:echoinout">
    </wsdl:input>
      <wsdl:output name="echoinoutResponse" message="tns:echoinoutResponse">
    </wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="EchoComplexTypeDefAnyCorbaBinding" type="tns:EchoComplexTypeDefAny">
<imolacorba:binding>
<imolacorba:idl root="true" filename="EchoTypeDefAny.idl" relativepath=".">
//IDL
module it{
module imolinfo{
module jbi4corba{
module test{
module webservice{
module generator{
module echocomplex{
module typedefany{

  typedef string mystring;
  typedef long myint;
  typedef boolean myboolean;
  typedef char mychar;
  typedef wchar mywchar;
  typedef wstring mywstring;
  typedef short myshort;
  typedef unsigned short myunsignedshort;
  typedef long mylong;
  typedef unsigned long myunsignedlong;
  typedef long long mylonglong ;
  typedef unsigned long long myunsignedlonglong;
  typedef float myfloat;
  typedef double mydouble;

    // Arrays and Matrix
  typedef string mystringArr[2];  
  typedef long myintArr[2];  
  typedef boolean mybooleanArr[2];
  typedef char mycharArr[2];
  typedef wchar mywcharArr[2];
  typedef wstring mywstringArr[2];
  typedef short myshortArr[2];
  typedef unsigned short myunsignedshortArr[2];
  typedef long mylongArr[2];
  typedef unsigned long myunsignedlongArr[2];
  typedef long long mylonglongArr[2];
  typedef unsigned long long myunsignedlonglongArr[2];
  typedef float myfloatArr[2];
  typedef double mydoubleArr[2];
  typedef string MatrixString[3][3];
  typedef long MatrixLong[3][3];

  // Sequences
  typedef sequence &lt;string&gt; mystringSeq;
  typedef sequence &lt;long&gt; myintSeq;  
  typedef sequence &lt;boolean&gt; mybooleanSeq;
  typedef sequence &lt;char&gt; mycharSeq;
  typedef sequence &lt;wchar&gt; mywcharSeq;
  typedef sequence &lt;wstring&gt; mywstringSeq;
  typedef sequence &lt;short&gt; myshortSeq;
  typedef sequence &lt;unsigned short&gt; myunsignedshortSeq;
  typedef sequence &lt;unsigned long&gt; myunsignedlongSeq;
  typedef sequence &lt;long long&gt; mylonglongSeq;
  typedef sequence &lt;unsigned long long&gt; myunsignedlonglongSeq;
  typedef sequence &lt;float&gt; myfloatSeq;
  typedef sequence &lt;double&gt; mydoubleSeq;
  
  // value type
  valuetype EchoVT {
    public  short publicShort;
    private long  privateLong;
  };

    
  // value type (boxed) - complex
  valuetype MySequence {
    public sequence&lt;long&gt; data;
  };

  // struct
  struct EchoStruct {
    boolean            fieldBoolean;
    char               fieldChar;
    wchar              fieldWChar;
    // http://jira.codehaus.org/browse/XFIRE-462
    octet              fieldOctet;
    string             fieldString;
    wstring            fieldWString;
    short              fieldShort;
    unsigned short     fieldUnsignedShort;
    long               fieldLong;
    unsigned long      fieldUnsignedLong;
    long long          fieldLongLong;
    unsigned long long fieldUnsignedLongLong;
    float              fieldFloat;
    double             fieldDouble;
    any				   fieldAny;
  };
    

  // StructOfStruct
  struct StructOfStruct {
    EchoStruct internalStruct;
  };

  // value type
  valuetype VTPrimi {
    public boolean            fieldBoolean;
    public char               fieldChar;
    public wchar              fieldWChar;

    // http://jira.codehaus.org/browse/XFIRE-462
    public octet              fieldOctet;

    public string             fieldString;
    public wstring            fieldWString;
    public short              fieldShort;
    public unsigned short     fieldUnsignedShort;
    public long               fieldLong;
    public unsigned long      fieldUnsignedLong;
    public long long          fieldLongLong;
    public unsigned long long fieldUnsignedLongLong;
    public float              fieldFloat;
    public double             fieldDouble;
  };

  valuetype VTPrimiSeq {
    public sequence&lt;VTPrimi&gt; data;
  };

  valuetype ValueTypeOfValueType {
    public VTPrimi data;
  };

  valuetype ValueTypeOfStruct {
    public EchoStruct data;
  };

  // StructOfStruct
  struct StructOfValuetype {
    VTPrimi data;
  };

  // TypeDefs
  typedef EchoVT myEchoVT;  
  typedef EchoStruct myEchoStruct;
  typedef StructOfStruct myStructOfStruct;
  typedef VTPrimi myVTPrimi;
  typedef VTPrimiSeq myVTPrimiSeq;
  typedef ValueTypeOfValueType myValueTypeOfValueType;
  typedef ValueTypeOfStruct myValueTypeOfStruct;
  typedef StructOfValuetype myStructOfValuetype;  
  
  // Sequences of complex types and VT
  typedef sequence&lt;EchoStruct&gt; EchoStructSeq;   
  typedef sequence&lt;EchoVT&gt; EchoVTSeq; 
  typedef sequence&lt;MySequence&gt; MySequenceSeq; 
  // Sequence of sequence 
  typedef sequence&lt;myintSeq&gt; myintSeqOfSeq;

  // Arrays of complex types and VT
  typedef EchoStruct EchoStructArr[2];   
  typedef EchoStruct EchoStructMatrix[2][2];   
  typedef EchoVT EchoVTArr[2];   

  typedef any MyAny;  

  //==================================================
  //                                         INTERFACE
  //==================================================
  interface EchoComplexTypeDefAny {
	any echo(in any msg);
	string echoinout(inout any msg);
  };

};
};
};
};
};
};
};
};
</imolacorba:idl>
</imolacorba:binding>
    <wsdl:operation name="echo">
      <wsdl:input name="echo">
      </wsdl:input>
      <wsdl:output name="echoResponse">
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="echoinout">
      <wsdl:input name="echoinout">
      </wsdl:input>
      <wsdl:output name="echoinoutResponse">
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="EchoComplexTypeDefAny">
    <wsdl:port name="EchoComplexTypeDefAnyCorbaPort" binding="tns:EchoComplexTypeDefAnyCorbaBinding">

   <imolacorba:address name="EchoComplexTypeDefAny" localizationType="NameService">    
    <imolacorba:orb>
            <imolacorba:property name="org.omg.CORBA.ORBClass" value="org.jacorb.orb.ORB"/>
            <imolacorba:property name="org.omg.CORBA.ORBSingletonClass" value="org.jacorb.orb.ORBSingleton"/>
            <imolacorba:property name="ORBInitRef.NameService" value="corbaloc::localhost:1050/NameService"/>
    </imolacorba:orb>
  </imolacorba:address>

    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>
