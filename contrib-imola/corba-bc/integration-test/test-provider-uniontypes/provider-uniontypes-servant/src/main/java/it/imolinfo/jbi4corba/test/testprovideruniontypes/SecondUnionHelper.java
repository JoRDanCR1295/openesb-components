package it.imolinfo.jbi4corba.test.testprovideruniontypes;


/**
* it/imolinfo/jbi4corba/test/testprovideruniontypes/SecondUnionHelper.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from F:/imolaCSV/nokia/open-jbi-components/contrib-imola/corba-bc/integration-test/test-provider-uniontypes/provider-uniontypes-jbi4corba-provider/src/main/resources/UnionTypes.idl
* lunedì 19 gennaio 2009 9.19.47 EET
*/

abstract public class SecondUnionHelper
{
  private static String  _id = "IDL:it/imolinfo/jbi4corba/test/testprovideruniontypes/SecondUnion/SecondUnion:1.0";

  public static void insert (org.omg.CORBA.Any a, it.imolinfo.jbi4corba.test.testprovideruniontypes.SecondUnion that)
  {
    org.omg.CORBA.portable.OutputStream out = a.create_output_stream ();
    a.type (type ());
    write (out, that);
    a.read_value (out.create_input_stream (), type ());
  }

  public static it.imolinfo.jbi4corba.test.testprovideruniontypes.SecondUnion extract (org.omg.CORBA.Any a)
  {
    return read (a.create_input_stream ());
  }

  private static org.omg.CORBA.TypeCode __typeCode = null;
  synchronized public static org.omg.CORBA.TypeCode type ()
  {
    if (__typeCode == null)
    {
      org.omg.CORBA.TypeCode _disTypeCode0;
      _disTypeCode0 = org.omg.CORBA.ORB.init ().get_primitive_tc (org.omg.CORBA.TCKind.tk_short);
      org.omg.CORBA.UnionMember[] _members0 = new org.omg.CORBA.UnionMember [3];
      org.omg.CORBA.TypeCode _tcOf_members0;
      org.omg.CORBA.Any _anyOf_members0;

      // Branch for numeric (case label 1)
      _anyOf_members0 = org.omg.CORBA.ORB.init ().create_any ();
      _anyOf_members0.insert_short ((short)1);
      _tcOf_members0 = org.omg.CORBA.ORB.init ().get_primitive_tc (org.omg.CORBA.TCKind.tk_long);
      _members0[0] = new org.omg.CORBA.UnionMember (
        "numeric",
        _anyOf_members0,
        _tcOf_members0,
        null);

      // Branch for alfanumeric (case label 2)
      _anyOf_members0 = org.omg.CORBA.ORB.init ().create_any ();
      _anyOf_members0.insert_short ((short)2);
      _tcOf_members0 = org.omg.CORBA.ORB.init ().create_string_tc (0);
      _members0[1] = new org.omg.CORBA.UnionMember (
        "alfanumeric",
        _anyOf_members0,
        _tcOf_members0,
        null);

      // Branch for two_format (Default case)
      _anyOf_members0 = org.omg.CORBA.ORB.init ().create_any ();
      _anyOf_members0.insert_octet ((byte)0); // default member label
      _tcOf_members0 = org.omg.CORBA.ORB.init ().get_primitive_tc (org.omg.CORBA.TCKind.tk_any);
      _members0[2] = new org.omg.CORBA.UnionMember (
        "two_format",
        _anyOf_members0,
        _tcOf_members0,
        null);
      __typeCode = org.omg.CORBA.ORB.init ().create_union_tc (it.imolinfo.jbi4corba.test.testprovideruniontypes.SecondUnionHelper.id (), "SecondUnion", _disTypeCode0, _members0);
    }
    return __typeCode;
  }

  public static String id ()
  {
    return _id;
  }

  public static it.imolinfo.jbi4corba.test.testprovideruniontypes.SecondUnion read (org.omg.CORBA.portable.InputStream istream)
  {
    it.imolinfo.jbi4corba.test.testprovideruniontypes.SecondUnion value = new it.imolinfo.jbi4corba.test.testprovideruniontypes.SecondUnion ();
    short _dis0 = (short)0;
    _dis0 = istream.read_short ();
    switch (_dis0)
    {
      case 1:
        int _numeric = (int)0;
        _numeric = istream.read_long ();
        value.numeric (_numeric);
        break;
      case 2:
        String _alfanumeric = null;
        _alfanumeric = istream.read_string ();
        value.alfanumeric (_alfanumeric);
        break;
      default:
        org.omg.CORBA.Any _two_format = null;
        _two_format = istream.read_any ();
        value.two_format (_dis0, _two_format);
        break;
    }
    return value;
  }

  public static void write (org.omg.CORBA.portable.OutputStream ostream, it.imolinfo.jbi4corba.test.testprovideruniontypes.SecondUnion value)
  {
    ostream.write_short (value.discriminator ());
    switch (value.discriminator ())
    {
      case 1:
        ostream.write_long (value.numeric ());
        break;
      case 2:
        ostream.write_string (value.alfanumeric ());
        break;
      default:
        ostream.write_any (value.two_format ());
        break;
    }
  }

}
