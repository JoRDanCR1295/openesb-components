<?xml version="1.0" encoding="UTF-8"?>
<wsdl:definitions name="ENDPOINT_NAME" targetNamespace="NAME_SPACE" xmlns:tns="NAME_SPACE" xmlns:imolacorba="uri://schemas.imola.it/jbi/wsdl-extensions/corba/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
  <wsdl:types>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="NAME_SPACE" xmlns="NAME_SPACE" xmlns:xs="http://www.w3.org/2001/XMLSchema">
<xs:element name="echo">
<xs:complexType>
<xs:sequence>
<xs:element name="msg" type="xs:anyType"/>
</xs:sequence>
</xs:complexType>
</xs:element>
<xs:element name="echoResponse">
<xs:complexType>
<xs:sequence>
<xs:element name="return" type="xs:string"/>
</xs:sequence>
</xs:complexType>
</xs:element>
</xs:schema>
  </wsdl:types>
  <wsdl:message name="echoResponse">
    <wsdl:part name="parameters" element="tns:echoResponse">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="echo">
    <wsdl:part name="parameters" element="tns:echo">
    </wsdl:part>
  </wsdl:message>
  <wsdl:portType name="ENDPOINT_NAME">
    <wsdl:operation name="echo">
      <wsdl:input name="echo" message="tns:echo">
    </wsdl:input>
      <wsdl:output name="echoResponse" message="tns:echoResponse">
    </wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="ENDPOINT_NAMECorbaBinding" type="tns:ENDPOINT_NAME">
<imolacorba:binding>
<imolacorba:idl root="true" filename="EchoComplexTypeDef.idl" relativepath=".">
//IDL
module it{
module imolinfo{
module jbi4corba{
module test{
module webservice{
module generator{
module echocomplex{

  // value type
  valuetype EchoVT {
    public  short publicShort;
    private long  privateLong;
  };

  // value type (boxed) - primitive
  valuetype MyLong {
    public long data;
  };
    
  // value type (boxed) - complex
  valuetype MySequence {
    public sequence&lt;long&gt; data;
  };

  // abstract value type
  // UNSUPPORTED : abstract valuetype AFoo {};
    

  // ===========================================================================
  // IDL Type            | Java type                  | Exceptions
  // ===========================================================================
  // boolean             | boolean                    |
  // char                | char                       | CORBA::DATA_CONVERSION
  // wchar               | char                       | CORBA::DATA_CONVERSION
  // octet               | byte                       |
  // ---------------------------------------------------------------------------
  // string              | String                     | CORBA::MARSHAL
  //                     |                            | CORBA::DATA_CONVERSION
  // ---------------------------------------------------------------------------
  // wstring             | String                     | CORBA::MARSHAL
  //                     |                            | CORBA::DATA_CONVERSION
  // ---------------------------------------------------------------------------
  // short               | short                      |
  // unsigned short      | short                      |
  // long                | int                        |
  // unsigned long       | int                        |
  // long long           | long                       |
  // unsigned long  long | long                       |
  // float               | float                      |
  // double              | double                     |
  // fixed               | java.math.BigDecimal       |CORBA::DATA_CONVERSION
  // ===========================================================================
  // long double         | not available at this time |
  // ===========================================================================

  // struct
  struct EchoStruct {
    boolean            fieldBoolean;
    char               fieldChar;
    wchar              fieldWChar;

    // http://jira.codehaus.org/browse/XFIRE-462
    octet              fieldOctet;

    string             fieldString;
    wstring            fieldWString;
    short              fieldShort;
    unsigned short     fieldUnsignedShort;
    long               fieldLong;
    unsigned long      fieldUnsignedLong;
    long long          fieldLongLong;
    unsigned long long fieldUnsignedLongLong;
    float              fieldFloat;
    double             fieldDouble;

    // UNSUPPORTED
    // The fixed IDL type is not supported by idlj
    // http://java.sun.com/j2se/1.4.2/docs/guide/rmi-iiop/toJavaPortableUG.html
    //fixed              fieldFixed;
  };
    
 				

  // enum
  // enum EchoComplexEnum {E1, E2, E3};

  // StructOfStruct
  struct StructOfStruct {
    EchoStruct internalStruct;
  };

  // value type
  valuetype VTPrimi {
    public boolean            fieldBoolean;
    public char               fieldChar;
    public wchar              fieldWChar;

    // http://jira.codehaus.org/browse/XFIRE-462
    public octet              fieldOctet;

    public string             fieldString;
    public wstring            fieldWString;
    public short              fieldShort;
    public unsigned short     fieldUnsignedShort;
    public long               fieldLong;
    public unsigned long      fieldUnsignedLong;
    public long long          fieldLongLong;
    public unsigned long long fieldUnsignedLongLong;
    public float              fieldFloat;
    public double             fieldDouble;
  };

  valuetype VTPrimiSeq {
    public sequence&lt;VTPrimi&gt; data;
  };

  valuetype ValueTypeOfValueType {
    public VTPrimi data;
  };

  valuetype ValueTypeOfStruct {
    public EchoStruct data;
  };

  // StructOfStruct
  struct StructOfValuetype {
    VTPrimi data;
  };

  // TypeDefs
  typedef EchoVT myEchoVT;
  typedef MyLong myMyLong;
  typedef EchoStruct myEchoStruct;
  typedef StructOfStruct myStructOfStruct;
  typedef VTPrimi myVTPrimi;
  typedef VTPrimiSeq myVTPrimiSeq;
  typedef ValueTypeOfValueType myValueTypeOfValueType;
  typedef ValueTypeOfStruct myValueTypeOfStruct;
  typedef StructOfValuetype myStructOfValuetype;


  //==================================================
  //                                         INTERFACE
  //==================================================
  interface EchoComplex {
    string echo(in any msg);
  };

};
};
};
};
};
};
};
</imolacorba:idl>
</imolacorba:binding>
    <wsdl:operation name="echo">
      <wsdl:input name="echo">
      </wsdl:input>
      <wsdl:output name="echoResponse">
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="ENDPOINT_NAME">
    <wsdl:port name="ENDPOINT_NAMECorbaPort" binding="tns:ENDPOINT_NAMECorbaBinding">
<imolacorba:address name="CORBA_SERVICE_NAME" localizationType="NameService">
<imolacorba:orb>
<imolacorba:property name="quo" value="2"/>
<imolacorba:property name="qua" value=""/>
<imolacorba:property name="qui" value="1"/>
</imolacorba:orb>
</imolacorba:address>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>