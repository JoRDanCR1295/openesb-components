#include <CosTransactions.idl>
#pragma prefix "it.imolinfo.cgil"

// $Id: cgil.idl,v 1.3 2007/03/19 21:37:28 mcasoni Exp $

/*
 * $Log: cgil.idl,v $
 * Revision 1.3  2007/03/19 21:37:28  mcasoni
 * alpha javaone
 *
 * Revision 1.520  2006/03/24 10:57:49  lfelici
 * inserito il campo cfComune sia per la PersonWS e sia per AddressWS
 *
 * Revision 1.519  2006/03/22 10:13:35  aravagli
 * Modficato il metodo getAllModuliWithFiltro nell'interfaccia gestoreUtenteRasi, implementato un nuovo tipo di filtro
 *
 * Revision 1.518  2006/03/08 14:02:01  cgraziani
 * Aggiunto getAllPermessiGruppiWithFiltri() in GestoreUtente,
 * getAllCronologiaModuliWithFiltri() in GestoreStatisticheRasi.
 *
 * Revision 1.517  2006/02/24 14:05:04  aravagli
 * Inserito il metodo findGruppoWithKey nell'interfaccia GestoreUtenteRasi
 *
 * Revision 1.516  2006/02/23 14:17:05  aravagli
 * Inserito il metodo chiudiServer nell'interfaccia IntegrationLayer
 *
 * Revision 1.515  2006/02/01 16:08:30  aravagli
 * Modificato il metodo di findUtentewhithKey nell'interfaccia GestoreUtente: inserito
 * il parametro idApplicativo
 *
 * Revision 1.514  2006/01/16 14:47:32  cgraziani
 * IntegrationLayer: aggiunto getVersioneServer().
 *
 * Revision 1.513  2006/01/11 11:23:16  cgraziani
 * Aggiunto idApplicativo in ASI_Gruppo.
 *
 * Revision 1.512  2006/01/11 07:52:11  aravagli
 * Inserito i metodi getAllUtenteApplicativo e  getAllCompUtenteWithFiltro
 * nell'interfaccia GestoreUtente
 *
 * Revision 1.511  2006/01/09 07:44:55  aravagli
 * Inserito il metodo getAllCompUtenteWithFiltro nell'interfaccia GestoreUtente
 *
 * Revision 1.510  2005/12/15 13:54:44  lfelici
 * Inserito il campo isModificaRsu per il batch cambia cetagoria, trasferimento lavoratori e
 * spostamento Ul
 *
 * Revision 1.509  2005/12/13 11:59:25  cgraziani
 * Aggiunto LookUpTable.getSCatCollegate().
 *
 * Revision 1.508  2005/12/05 13:05:35  aravagli
 * Interfaccia gestoreUtente metodi getAllOggetto e getAllPrivilegio aggiunto il parametro
 * ApplicationName
 *
 * Revision 1.507  2005/12/02 13:29:54  aravagli
 * Inserta la struct DatiListaOther
 * Interfaccia AppProxy inseriti i metodi findFirstXDatiListaOtherWithDescription
 * e  findFirstXDatiListaOtherWithDescriptionCode
 *
 * Revision 1.506  2005/12/02 12:42:51  fpetrungaro
 * Gestione ASI: aggiunte struct DatiAsi, Oggetto e Privilegio;
 * modificata struct Permesso;
 * corrette segnature di alcuni metodi in GestoreUtente.
 *
 * Revision 1.505  2005/12/01 14:22:21  cgraziani
 * Aggiunto isModificaRSU in CambioCategoriaGlobale.
 *
 * Revision 1.504  2005/12/01 10:31:10  fpetrungaro
 * In AppProxyImpl aggiunti metodi di ricerca di aziende somministratrici di lavoro per nome unità locale.
 *
 * Revision 1.503  2005/11/30 11:00:08  fpetrungaro
 * Gestione ASI: Modificate segnature metodi GestoreUtente con aggiunta parametro idApplicativo.
 *
 * Revision 1.502  2005/11/29 14:37:47  fpetrungaro
 * In AppProxyImpl aggiunti metodi findFirstXDatiCompanyDivisionWithNameCodeFI e
 * findFirstXDatiCompanyDivisionWithNameFI.
 * Aggiunta struct DatiCompanyDivision.
 *
 * Revision 1.501  2005/11/28 14:43:17  cgraziani
 * Modifiche per batch "Cambio Categoria Globale".
 *
 * Revision 1.500  2005/11/21 13:57:04  aravagli
 * Interfaccia GestoreUtenteRasi Eliminato dal metodo login il parametro ApplicationNameHolder
 *
 * Revision 1.499  2005/11/17 14:29:12  aravagli
 * Risolto il conflitto
 *
 * Revision 1.498  2005/11/16 16:42:19  fpetrungaro
 * Corretto tipo di ritorno metodo getAllUtenteRasiWithFiltri.
 *
 * Revision 1.497  2005/11/16 11:42:38  cgraziani
 * Rinominato un metodo di GestoreProfilo.
 * Corretto errori.
 *
 * Revision 1.496  2005/11/15 14:17:52  fpetrungaro
 * Corrette segnature metodi di cancellazione in GestoreUtente e GestoreUtenteRasi.
 *
 * Revision 1.495  2005/11/10 14:44:29  fpetrungaro
 * Modificata struct StatoIscrizionePersona con inserimento campo IN_CHIUSURA.
 *
 * Revision 1.494  2005/11/10 11:36:12  cgraziani
 * Tolto getAllUtenteNonArgoWithFiltri() da GestoreProfilo.
 *
 * Revision 1.493  2005/11/09 18:14:50  cgraziani
 * Modificato CompleteUtenteArgo.
 *
 * Revision 1.492  2005/11/08 14:21:15  cgraziani
 * Modifiche per nuova gestione utenti.
 *
 * Revision 1.491  2005/11/07 11:30:16  cgraziani
 * Modifiche per nuova gestione utenti.
 *
 * Revision 1.490  2005/11/04 12:00:22  cgraziani
 * Correzioni a gestione utente.
 *
 * Revision 1.489  2005/11/03 14:40:36  cgraziani
 * Modifiche per nuova gestione utenti.
 *
 * Revision 1.488  2005/10/25 13:45:35  aravagli
 * Inserito nella struct FiltroPerson i campi isDead e birthPlace
 *
 * Revision 1.487  2005/10/25 12:13:11  aravagli
 * Inserita nell'interfaccia AppProxy il metodo findFirstXDatiRicercaPersoneDuplicate
 *
 * Revision 1.486  2005/10/10 08:13:31  fpetrungaro
 * Stampe centralizzate: aggiunto metodi getParametriRPT, getPDFStampaCentralizzata in TBLConfigurazioneRecord.
 * Aggiunte strutture ParametroRPT e DatoRPT.
 *
 * Revision 1.485  2005/10/05 14:24:08  cgraziani
 * Verbale: aggiunto i campi dirittoImpiegatiM, dirittoImpiegatiF, dirittoOperaiM,
 * dirittoOperaiF, votantiM, votantiF.
 *
 * Revision 1.484  2005/10/03 13:25:14  cgraziani
 * Aggiunto aggiornaSettoriContrattuali(), aggiornaContratti() in CompanyDivisioneRecord.
 *
 * Revision 1.483  2005/10/03 07:58:40  cgraziani
 * Aggiunto getNumeroIncarichi() in PersonRecord.
 *
 * Revision 1.482  2005/09/27 10:04:10  cgraziani
 * Aggiunto isSocioLavoratore in CompleteWorkDoneSA, flag7 e flag8 in
 * UnionInfoAndCard.
 *
 * Revision 1.481  2005/09/26 13:11:24  cgraziani
 * Aggiunto isSocioLavoratore in Work, flag7 e flag8 in UnionInfo.
 *
 * Revision 1.480  2005/09/22 15:11:51  fpetrungaro
 * Batch cambio indirizzo UL: aggiunto estensione indirizzo in struttura CambioIndirizzoUL
 *
 * Revision 1.479  2005/09/22 11:15:44  fpetrungaro
 * Aggiunto valore DIVERSO in ValoreIntervalloEnum.
 *
 * Revision 1.478  2005/09/20 10:48:51  fpetrungaro
 * Modificate strutture dati per le funzionalità WS
 *
 * Revision 1.477  2005/09/20 07:41:03  cgraziani
 * Aggiunto eseguiAccorpaUtente() in GestoreBatch.
 *
 * Revision 1.476  2005/09/07 07:27:50  AndreaR
 * Inserito il metodo getVersamenti nell'interfaccia CompanyDivisionRecord
 *
 * Revision 1.475  2005/09/05 09:48:17  AndreaR
 * Inserite le struct Versamento, IntestazioneVersamento
 *
 * Revision 1.474  2005/09/02 13:30:53  Claudia
 * Aggiunto Verbale.iscritti.
 *
 * Revision 1.473  2005/09/01 13:34:48  Claudia
 * Aggiunto CompDivForSyndCat.dataVersamenti.
 *
 * Revision 1.472  2005/09/01 08:37:11  AndreaR
 * Inseriti i  servizi per i web services
 *
 * Revision 1.471  2005/06/14 17:35:19  Claudia
 * In TipoFiltro aggiunti i valori enumeration e int.
 *
 * Revision 1.470  2005/06/14 09:29:30  Claudia
 * Cambiato tipo a tipoOrganismoIncarico in CompleteIncaricoRSU.
 *
 * Revision 1.469  2005/06/13 08:48:35  fpetrungaro
 * Aggiunta struct CompleteIncaricoRSU.
 *
 * Revision 1.468  2005/05/25 14:51:16  AndreaR
 * Inserito il campo categoriaSindacale nella Struct DatiIncaricatiRSU
 *
 * Revision 1.467  2005/05/25 08:42:10  AndreaR
 * Inseriti nell'interfaccia GestoreRSU i metodi:
 * getElezioneRSUStoriche
 * getElezioneRSU
 * getElezioneRSUWithKey
 *
 * Revision 1.466  2005/05/19 09:38:39  AndreaR
 * Inserita nella struct IncaricoOrganismoLocale il campo categoriaSindacale
 *
 * Revision 1.465  2005/05/06 09:46:30  AndreaR
 * Inserito il metodo getElezioneRSUStoriche
 *
 * Revision 1.464  2005/05/05 07:34:31  AndreaR
 * inserita la colonna categoriaSindacale nella tabella IncaricoRSU
 *
 * Revision 1.463  2005/04/28 12:48:41  AndreaR
 * Inserito nella struct CompDivForSyndCat il campo dbKeyAddrCanaliz
 *
 * Revision 1.462  2005/04/13 07:43:16  AndreaR
 * Aggiunto il campo categoria  alla striuct DatiIncarico
 *
 * Revision 1.461  2005/04/12 12:42:42  Claudia
 * Aggiunto findCompDivForSyndCatWithCodiceUL() in AppProxy.
 *
 * Revision 1.460  2005/04/07 13:32:44  Claudia
 * Aggiunto getCodiceInstallazione() in IntegrationLayer.
 *
 * Revision 1.459  2005/04/06 11:11:08  Claudia
 * VerbaleRecord: sostituito rinnovoVerbale() con chiusuraVerbale().
 * OrganismoRSURecord: aggiunto rinnovoVerbale(), getAllActiveVerbali()
 * GestoreRSU: aggiunto il parametro tipoOrganismo ai metodi di ricerca elezione.
 *
 * Revision 1.458  2005/03/31 09:09:34  AndreaR
 * Inserito nella struct ChiusuraUL il campo dataScadenzaAbbonamento
 *
 * Revision 1.457  2005/03/25 10:28:48  AndreaR
 * Inserite nella struct CompDivForSyndCat i campi:
 * tipoVersamento
 * modalitaPagamento
 *
 * Revision 1.456  2005/03/24 09:33:28  AndreaR
 * Inserito nella struct ChiusuraUL i campi:
 * dataChiusura
 * tipoChiusura
 *
 * Revision 1.455  2005/03/23 16:24:38  AndreaR
 * Inserito il metodo eseguiChiusuraUL in GestoreBatch
 * Inserta la struct ChiusuraUL
 *
 * Revision 1.454  2005/03/23 15:10:30  AndreaR
 * Inserito nella struct DatiIncaricatiRSU il campo dbKeyIncarico
 *
 * Revision 1.453  2005/03/22 15:26:42  AndreaR
 * Inserito il metodo in verbaleRecord getAllDatiIncaricatiRSU
 *
 * Revision 1.452  2005/03/21 14:09:47  AndreaR
 * Inserito in PersonRecord il metodo getIncaricoRSUCompletowithKey
 *
 * Revision 1.451  2005/03/17 15:15:32  Claudia
 * DatiIncaricatiRSU: modificato il nome di alcune proprietà secondo quelli nella vista.
 *
 * Revision 1.450  2005/03/14 14:46:19  AndreaR
 * Inserito nella struct DATIINCARICO il campo INCARICO
 *
 * Revision 1.449  2005/03/14 11:04:30  AndreaR
 * Inserita nella struct DATIINCARICO la chiave dell'incarico
 * Inserito nell'interfaccia PersonRecord i metori:
 * getIncaricoOrganismoLocaleWithKey
 * getIncaricoRSUWithKey
 * getOrganismoDiRappresentanzaWithKey
 * getOrganismoDirigenteWithKey
 *
 * Revision 1.448  2005/03/08 14:47:55  AndreaR
 * Inserito nell'interfaccia GestoreRSU nei metodi getElezioneRSUWithUL e getElezioneRSUWithNomeInterazienda
 * il parametro categoriaSindacale
 *
 * Revision 1.447  2005/03/07 11:56:58  AndreaR
 * aggiunto alla struct NonEletto il campo voti
 *
 * Revision 1.446  2005/03/07 11:53:30  AndreaR
 * aggiunto alla struct NonEletto il campo voti
 *
 * Revision 1.445  2005/03/07 11:49:54  AndreaR
 * gestione delle RSU i campi percentuale in Verbale e datiSindacato da long long a float
 *
 * Revision 1.444  2005/03/03 16:14:48  AndreaR
 * modificate le struct per la gestione con RSU
 *
 * Revision 1.443  2005/02/28 14:41:19  AndreaR
 * Inseriti i metodi per la gestione degli incarichi RSU e degli incerichi per gli organismi locali
 * Inserito il metodo per la lista degli incarichi della persona
 * Inserito in IintegrationLayer getGestoreRSU
 *
 * Revision 1.442  2005/02/25 15:17:06  AndreaR
 * Inserite le struct e le interfaccie per la gestione delle RSU
 *
 * Revision 1.441  2005/01/07 09:22:22  fpetrungaro
 * Inserite nuove struct e interfacce per le funzionalità batch.
 *
 * Modificata interfaccia IntegrationLayer per le funzionalità batch.
 *
 * Revision 1.440  2004/12/21 17:11:42  AndreaR
 * Inseriti i campi lastChanged e lastSynchronized in storicoperiodononiscritti
 *
 * Revision 1.439  2004/11/02 15:41:49  fpetrungaro
 * Modifiche per gestione accessi dell'utente.
 *
 * Revision 1.438  2004/10/29 08:47:26  Claudia
 * Aggiunto dataCancIntegr in Pratica.
 *
 * Revision 1.437  2004/10/25 08:17:24  fpetrungaro
 * In GestoreNotifiche aggiunto creaEventoCancellazionePratica.
 *
 * Revision 1.436  2004/10/21 08:30:41  fpetrungaro
 * Aggiunto Pratica.codicePratica e PersonRecord.getAllPraticaWithCodicePratica()
 *
 * Revision 1.435  2004/10/07 11:22:27  fpetrungaro
 * In GestoreProfilo Aggiunto metodo login.
 *
 * Revision 1.434  2004/09/30 08:12:55  fpetrungaro
 * Eliminato campo codiceUL da struct CompleteWorkDone e CompleteWorkDoneSA.
 *
 * Revision 1.433  2004/09/29 12:58:51  fpetrungaro
 * Spostato campo codiceUL da struct CompanyDivision a struct CompDivForSyndCat.
 *
 * Revision 1.432  2004/09/24 13:26:39  fpetrungaro
 * Sincronizzazione: aggiunto campo lastChangedPacket a struct PERSON, COMPANY,
 * CONSULTANT, OTHER, STRADARIO.
 *
 * Revision 1.431  2004/09/20 14:33:28  fpetrungaro
 * Eliminato findFirstXUtenteWithPerson da GestoreProfilo.
 *
 * Revision 1.430  2004/09/15 10:17:25  Claudia
 * Modificato nome: da findPensionsWithPersonKeys() a findPensionsWithKeys().
 *
 * Revision 1.429  2004/09/15 08:05:31  fpetrungaro
 * Aggiunti metodi findFirstXDIPersonsFromKey, findDIPensionsBetweenDBKeyPersons,
 * findPersonsWithKeys
 * , findAddressesWithPersonKeys, findPensionsWithPersonKeys
 * per integrazione ArGO - SIInca.
 *
 * Revision 1.428  2004/09/14 13:56:17  fpetrungaro
 * Aggiunto campo pensionNumber in struct DIPension.
 *
 * Revision 1.427  2004/09/08 14:40:08  fpetrungaro
 * Modificata struct StatoIscrizionePersona.
 * Creata struct DIPerson per integrazione.
 * Creata struct DIPension per integrazione.
 * Create sequence DIPersonSeq e DIPensionSeq.
 *
 * Revision 1.426  2004/09/06 14:47:38  fpetrungaro
 * Aggiunto metodo findStatiIscrizioneWithKeys in interfaccia AppProxy.
 * Aggiunta struct StatoIscrizionePersona.
 * Aggiunta sequence DBKeySeq.
 * Aggiunta sequence StatoIscrizionePersonaSeq.
 *
 * Revision 1.425  2004/09/03 15:38:48  fpetrungaro
 * In PersonRecord aggiunto metodo getStatoIscritto.
 *
 * Revision 1.424  2004/08/23 13:56:31  fpetrungaro
 * Aggiunti campi name, surname, fiscalCode.
 * Eliminata relazione con Person.
 *
 * Revision 1.423  2004/08/13 15:07:26  AndreaR
 * Inserito in CDSRecord i metodi:
 * newAddressPlaceFromStradario
 * updateAddressPlaceFromStradario
 *
 * Revision 1.422  2004/08/12 09:31:54  AndreaR
 * Passaggio alla versione di jacorb2_2 e alla JVM 1.4
 *
 * Revision 1.421  2004/08/11 08:23:02  AndreaR
 * Ripulito dagli oggetti non più usati
 *
 * Revision 1.420  2004/07/30 13:56:46  fpetrungaro
 * Commentata interfaccia SyncProxy.
 *
 * Revision 1.419  2004/07/05 15:28:16  Claudia
 * Aggiunto isDettIscrizioni in TblPersParametri.
 *
 * Revision 1.418  2004/05/25 09:59:28  AndreaR
 * Inserito il parametro numMax nel medoto getDataToSync nell'interfaccia
 * SyncProxy nel module sync
 *
 * Revision 1.417  2004/05/25 07:32:40  Claudia
 * Aggiunto findStradaWithFrazioneNotNull() in GestoreStradario.
 *
 * Revision 1.416  2004/05/07 12:06:45  AndreaR
 * Modificato nell'interefaccia SyncProxy i metodo getDataToSync
 *
 * Revision 1.415  2004/05/07 10:21:16  Claudia
 * Aggiunto isRegionale in CollectiveContract.
 *
 * Revision 1.414  2004/05/05 09:48:30  Claudia
 * Aggiunto isServerRegionale() in IntegrationLayer.
 *
 * Revision 1.413  2004/04/16 08:44:22  AndreaL
 * modifiche per integrazione SIINCA
 *
 * Revision 1.412  2004/04/05 09:14:00  fpetrungaro
 * Modificato CompleteWorkDoneSA
 *
 * Revision 1.411  2004/04/02 10:07:25  AndreaR
 * Inserito nell'interfaccia AppProxy il metodo isUsedAbbonamentoLibereta
 *
 * Revision 1.410  2004/03/19 08:54:04  AndreaR
 * Modificato il metodo deleteDossierFisco nella interfaccia PersonRecord.
 * Si cancellava un Dossier anzichè un DossierFisco
 *
 * Revision 1.409  2004/02/19 08:03:37  AndreaR
 * Inserito nell'interfaccia CompanyDivisionRecord il metodo getAllContractSectorWithContract
 *
 * Revision 1.408  2004/02/05 09:36:34  AndreaR
 * Inserito nella struct Pratica per l'associazione con contratti  i campi:
 * dbKeyContract_loc
 * dbKeyContract_id
 * idContractSector
 *
 * Inserito nella struct WorkDone il campo per il settore contrattuale:
 * idContractSector
 *
 * Inserito nella struct CompeteWorkDoneSA il campo per il settore contrattuale:
 * idContractSector
 *
 * Revision 1.407  2004/01/19 15:15:27  AndreaR
 * Inserito il metodo findFirstXCollContrInUseWithSyndCatPaginata nella interfaccia
 * appProxy
 *
 * Revision 1.406  2004/01/13 16:21:31  AndreaR
 * Inserito il campo settoreLAvorativo nelle struct CompleteWorkDone e CompleteWorkDoneSA
 *
 * Revision 1.405  2004/01/09 10:13:07  AndreaL
 * continua modifiche al lavoro per adeguamento alla nuova normativa
 *
 * Revision 1.404  2004/01/08 14:35:38  AndreaL
 * modifiche al lavoro per adeguamento alla nuova normativa
 *
 *
 * ------------------------------------------------
 */

//this is the interface between the integration layer, CDS and the application
module il {
   /*
    struct NameValue {
        string  name;
        any     genericValue;
    };
   */
   // typedef sequence<NameValue> NameValueSeq;
    typedef sequence<octet>     OctetSeq;
    typedef sequence<string>    StringSeq;

    //raised when creating a new person/company
    exception NotEnoughData {
        string field;
    };
    exception AccessDenied {};

    exception CreateFailed {};


    //ACCESS_DENIED when insufficient privelege
    //CERTAINTY when old certainty (autorevolezza) is higher than the new one
    //INVALID_DATA when data is wrong (trying to set (foreign) keys to incorrect value)
    //FAILED when unable to complete request, record not found
    //EXIST when record, who he inserts, found
    //NOT_EXIST when record not found
    //USED
    //UNDELETEABLE
    //OLD_TIMESTAMP
    //CANNOT_CREATE quando il record non può essere creato (rif. 'company.codiceAzienda' come alternate key)
    enum TransmissionStatus { SUCCESS, ACCESS_DENIED, CERTAINTY, INVALID_DATA, FAILED, EXIST, NOT_EXIST, USED, UNDELETEABLE, OLD_TIMESTAMP, CANNOT_CREATE};

    //  TipoCassaEnte
    enum TipoCassaEnte { ENTEBILATERALE, CASSAEDILE };


    //  TipoStatoPensione
    enum TipoStatoPensione {SP_VALDEFAULT,     // valore nullo
                            SP_PENSIONE_EROGATA,
                            SP_PRATICA_IN_CORSO,
                            SP_PENSIONE_BOCCIATA
    };


    //  PrivacyGroup
    enum TipoPrivacyGroup { PG_CGIL, PG_PATRONATO, PG_SOC_IN_CONV, PG_SOC_ALTRI_SERV, PG_ASSOCIAZIONI };

    //  StatoAbbonamento
    enum StatoAbbonamento { NEUTRAL, NOT_MODIFIED, ERROR };

    //  StatoIscrizione
    enum StatoIscrizione { CF_NONPRESENTE, CF_MULTIPLO, NON_ISCRITTO, ISCRITTO, IN_CHIUSURA, EX_ISCRITTO};


    //  Codice Errore eccezione
    enum CodiceErrore { ERROREGENERICO, RECORDINUSO, INVALIDDATA, UNDELEDEABLE };

    // eccezione generica per il server IL. Viene restituita nei metodi di ricerca
    exception ILException {
      // messaggio di errore.
      string messaggio;
      // trace dell'errore dal quale è nato questa eccezione.
      string trace;
      // codice dell'errore
      CodiceErrore codiceEccezione;
    };


    //The priority of the request or event
    //Only use high if its really necessary, as this may mean that the integration
    //layer will try to connect to a remote site, and this could be costly (telephone bill!)
    enum Priority { HIGH, NORMAL, LOW };


    enum CDSTable { PERSON_TABLE, COMPANY_TABLE, COMPANYDIVISION_TABLE, ADDRESS_TABLE,
          WORK_TABLE, UNIONINFO_TABLE, PRIVACY_TABLE, COMPANYCATEGORY_TABLE,
          AUTHORIZATION_TABLE, DOSSIER_TABLE, AGRIWORK_TABLE, PENSION_TABLE,
          NOTWORKING_TABLE, STRADARIO_TABLE, CONSULTANT_TABLE, OTHER_TABLE,
          UTENTE_TABLE,
          //Not to be synchronized
          PLACE_TABLE, SYNDICATECATEGORY_TABLE, SERVICECATEGORY_TABLE, ABBONAMENTI_TABLE,

          ACCESSCONTROL_TABLE, AGGIORNAMENTODELEGAINPS_TABLE, AGRIORRRDS_TABLE,
          ASSSTRADAAZZ_TABLE, ASSSTRADACAP_TABLE, ASSSTRADADEC_TABLE, AUTH_TABLE,
          BREVIMANU_TABLE, CARD_TABLE, CARDTEMPORARY_TABLE, CLASSIFICAZIONI_TABLE,
          COLLECTIVECONTRACT_TABLE, COMPDIVANDCOLLCONTR_TABLE, COMPDIVANDCONSULTANT_TABLE,
          COMPDIVANDSYNDCAT_TABLE, COMPDIVANDTYPEOFACTIVITY_TABLE, COMPDIVFORSYNDCAT_TABLE,
          COMPDIVFSCANDCONTRSECTOR_TABLE, CONTACT_TABLE, DATAREQUEST_TABLE,
          DATAREQUESTMAP_TABLE, DATAREQUESTREPLY_TABLE, DELEGAINPS_TABLE, DELEGAIPOST_TABLE,
          DELEGATESORO_TABLE, DOSSIERSERVICETYPE_TABLE, EVENT_TABLE, FOREIGNPERSON_TABLE,
          HISTORYNUMBEROFEMPLOYEES_TABLE, NAMEVALUE_TABLE, ORGANISMIDIRAPPRESENTANZA_TABLE,
          ORGANISMODIRIGENTI_TABLE,
          PERSONFORLOCATION_TABLE, PERSONFORSYNDCAT_TABLE,
          PRATICA_TABLE, PRATICAANDWORK_TABLE, PROFPERSON_TABLE, RUOLO_TABLE, RUOLOANDOGGETTO_TABLE,
          SITUATIONINCOMPDIV_TABLE, SQLSTATEMENT_TABLE, STRADA_TABLE, STRUTTURACLASS_TABLE,
          STRUTTUREFISSE_TABLE, SUPPORTO_TABLE, TBLABBOPARAMETRI_TABLE, TBLAZIEPARAMETRI_TABLE,
          TBLCONFEENTITA_TABLE, TBLCONFESYNDCAT_TABLE, TBLCONFIGURAZIONE_TABLE, TBLESECUZIONE_TABLE,
          TBLPERSPARAMETRI_TABLE, TBLVALORIFILTRO_TABLE, TERRITORIOSTRADARIO_TABLE,
          UNIONINFOANDWPNW_TABLE, UTENTEANDCATEGORIA_TABLE, UTENTEANDRUOLO_TABLE, SEDE_TABLE,
          TBLCONFEENTITAPRINC_TABLE
          };

          //Non sono state aggiunte le seguenti tabelle in quanto non utilizzate
          //TMPESECUZIONE_TABLE, TMPSQLSEQUENZA_TABLE, TMPSQLSTATEMENT_TABLE, TMPSQLSTATESQLSEQ_TABLE
          //PAYLEVEL_TABLE // CESI #199

    enum ContactRecType { CT_CONSULTANT, CT_CONTACT, CT_LOCAL_ENT_ASSOCIATION, CT_REGIONAL_ENT_ASSOCIATION };

    enum WorkDipIndipOSommin { W_DIPENDENTE, W_INDIPENDENTE, W_SOMMINISTRATO };

    struct DBKey {
        long  loc;     //location where this record was created, foreign key to Location table
        long  id;      //unique id (for this location)
    };

    typedef sequence <DBKey>		            DBKeySeq;
    typedef sequence <long>                 LongSeq;
    typedef sequence <long long>            LongLongSeq;

    struct ChangedBy {
        long        cgdByLoc;   // location that "owns" this record, foreign key to Location table
        long        cgdByApp;   // foreign key to ApplicationName table
        long        insByApp;   // foreign key to ApplicationName table. Indica l'applicazione che ha inserito l'oggetto.
        DBKey       cgdByUser;  // foreign key to User table
        string      cgdByCat;   // Campo stringa lungo 20 sul db
    };

    struct ApplicationName {
        long            id; //key
        string          code;
        string          description;
        long            privacyGroup;
        // campi fissi
        long long       lastChanged;
        long long       lastSynchronized;
        ChangedBy       changes;
        long long       categoria;
        long            provvisorio;
        long            ordinamento;
        long            certainty;
        // dati di login
        long 		userSession;
        LongLongSeq     idCategoryList;

        // Modifica per "Ultimo aggiornamento dei dati"
        DBKey           dbKeyUser;
        long long       idCategory;
        long            idLocation;
        // flag per comunicare al server di non gestire l'evento di una determinata azione,
        // in particolare per azioni compiute da applicazioni come il porting
        long            isGeneraEvento;

    };

    struct Address {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        // These are hidden fields
        DBKey       dbKRec;  //to know which record in which table (Person, Company, CompanyDivision) this refers to
        CDSTable    tableType;    //to know which record in which table (Person, Company, CompanyDivision) this refers to

        long long   validFrom;
        long long   validUntil;   // zero means no expiry
        long long   addrType;     //foreign key to AddressType table

        long        refApplication;   // Applicazione di riferimento
        long long   refSCategory;     // Categoria sindacale di riferimento

        long long   toponimo;
        string      street;
        string      co;
        string      streetNumber;
        string      streetNumberExt;
        string      postCode;
        string      postPlace;
        string      place;
//        string      town;
        long long   comune;           // Comune ID di Comuni
        string      province;
        long        oldLocation; // old azzonamento
        long        location;    // "azzonamento"
        string      telephone;
        string      altroTelefono;        // AOMDB : 59
        string      cellulare;            // AOMDB : 59
        string      fax;
        string      descrizioneFax;       // Modifica della parte "Numeri di telefono" AOMDB59
        string      fax2;                 // AOMDB : 59
        string      descrizioneFax2;      // Modifica della parte "Numeri di telefono" AOMDB59
        string      email;
        string      notes;
        string      foreignAddress;
        DBKey       dbKeyAddress;
        long        certainty;   //"autorevolezza"
    };



    //The person is divided into 2 structures, the main one and one
    //containing additional information (Person and PersonTwo)
    struct Person {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastChangedPacket;       // Sincronizzazione: LastChanged del pacchetto person

        ChangedBy   changes;

        long long   birthDate;    //Julian date of birth
//        long long   deadDate;     //Julian date of death
        string      deathDay;      // giorno di morte 2 caratteri
        string      deathMonth;    // mese di morte 2 caratteri
        string      deathYear;     // anno di morte con 4 caratteri
        long        isDead;       // flag per il decesso. 0 vivo - 1 deceduto
        long        isFemale;     // true (1) if female, false (0) if male

//        string      privacy;

        long long   acQualification;  //Academic qualification: titolo di studio
        string      name;
        string      surname;
        string      husbandSurname;
        //string      surnameNameForSearch;
        string      nameForSearch;
        string      surnameForSearch;
        string      fiscalCode;
//        string      placeOfBirth;         //Luogo di nascita (codice IRPEF)
        long long   birthPlace;           //Luogo di Nascita (ID di Comuni)
        long long   nationality;
        long        isCEE;
        long long   idContinente;
        long long   maritalStatus;
        string      firstUnion;    // Anno di prima iscrizione a CGIL
        long        sendingComunications;  // flag per indicare l'invio di comunicazioni
                                          // 0 nessun invio - 1 invio comunicazioni

        string      notes;
        long        certainty;     //"autorevolezza"

    };

    // struttura per contenenere i dati per la ricerca delle persone
    // duplicate
    struct DatiRicercaPersona {
        long long   birthDate;    //Julian date of birth
        long        isDead;       // flag per il decesso. 0 vivo - 1 deceduto
        long        isFemale;     // true (1) if female, false (0) if male
        string      name;
        string      surname;
        long long   birthPlace;           //Luogo di Nascita (ID di Comuni)
    };

    typedef sequence <DatiRicercaPersona>          DatiRicercaPersonaSeq;

    // struttura dati per la definizione del raggruppamento della persona per
    // la ricerca delle persone duplicate. Se il campo è a true fa parte
    // del ragruppamento
    struct CampiPersonaRagruppamento {
        boolean        birthDate;
        boolean        isDead;
        boolean        isFemale;
        boolean        name;
        boolean        surname;
        boolean        birthPlace;
    };

    // Enum che definiscono i campi per ordinare la ricerca
    enum OrdinamentoFiltroPerson {ORD_PER_SURNAME, ORD_PER_NAME, ORD_PER_BIRTHDATE, ORD_PER_FISCALCODE, ORD_PER_DEADDATE};

    // campi per filtrare la ricerca della persona
    struct FiltroPerson {
        string                    surname;
        string                    name;
        long long                 birthDateFrom;
        long long                 birthDateUntil;
        long                      isFemale;
        string                    fiscalCode;
        long                      isDead;
        long long                 birthPlace;
        OrdinamentoFiltroPerson   ordinamento;
    };

    enum OrdFiltroConcisePerson {ORD_CONCPER_NAME, ORD_CONCPER_FISCALCODE};

    // campi per filtrare la ricerca della conciseperson
    struct FiltroConcisePerson {
        string                   name;
        string                   fiscalCode;
        OrdFiltroConcisePerson   ordinamento;
    };

    enum OrdFiltroConciseCompany {ORD_CONCCOMP_NAME, ORD_CONCCOMP_PARTITAIVA};

    // campi per filtrare la ricerca della conciseperson
    struct FiltroConciseCompany {
        string                    name;
        string                    partitaIVA;
        OrdFiltroConciseCompany   ordinamento;
    };

    struct PersonTwo {

        string      acQualDetail;     //Dettagli del titolo di studio

        long        paysExtraPension; // (fondo di previdenza) Maybe derived in future?

        long        isWorking;
        long        isPensioned;

        //if the company that the person works for is in crisis, a special work condition may arise
        long long   specialWorkCond;     // foreign key to SpecialWorkCondition table, condizione lavorativa particolare (mobilità, CIG). Scelta da elenco: "Tipologia condizione occupativa in ragione dello stato di crisi"
        long long   specialWorkCondDate; // data dalla quale il lavoratore di trova nella condizione lavorativa particolare

        //invalidity
        long long   invalidityCategory;       // foreign key to InvalidityCategory table
        long        invalidityDegree;         // % of invalidity
        string      invalidityDocRef;         // invalidity document reference
        long long   invalidityStartDate;

        //spouse (coniuge)
        DBKey       dbKeySpouse;  // foreign key to Person table

        //Fiscal family -- NOT a table at the moment, only a counter to have a unique location/id combination
        long        familyLocation;
        long        familyId;

        //work in progress
        long        workInProgINCA;      // work in progress INCA
        long        workInProgVERTENZE;  // work in progress VERTENZE

    };



    //Additional details for a person that has an IVA (VAT) number
    struct ProfPerson {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        string      IVANumber;
        long        isMember;
        string      sector;
        string      details;
        string      notes;
        long        certainty;         //"autorevolezza"


    };

    //Additional details for non-italians

    struct ForeignPerson {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        long long   dateOfArrival;
        long        hasPermission;
        long long   permissionEndDate;
        long        hasFamilyDossier;
        long long   famDossierEndDate;

        long long   language1;
        long long   language2;
        long long   language3;
        long long   language4;

        long        hasNaturalization;
        long long   naturStartDate;
        long long   naturEndDate;
        string      notes;

        long        certainty;         //"autorevolezza"
    };


    struct PersonForSyndCat {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        long long   sCategory;
        long        location;

        DBKey       dbKeyPersonReference;  // persona di riferimento per i ragruppamenti
        string      csie1;
        long long   idCodiceCSIE1;
        string      csie2;
        long long   idCodiceCSIE2;
        string      notes;

        long        certainty;  //"autorevolezza"
    };

    // Dati specifici della person per una singola location
    struct PersonForLocation {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        long        location;

        DBKey       dbKeyRefPersonCGIL;  // persona di riferimento per i ragruppamenti di CGIL
        DBKey       dbKeyRefPersonSPI;  // persona di riferimento per i ragruppamenti di SPI
        string      userCode;             // Codice Utente
        string      userControlCode;       // codice di controllo per il codice utente
        string      notes;

        long        certainty;  //"autorevolezza"
    };

    // Stato iscrizione per una singola persona con chiave tableKey
    struct StatoIscrizionePersona {
      DBKey tableKey;
      string stato;          			// stato iscrizione (iscritto, ex iscritto , non iscritto)
      long long   startDate;			// data inizio validità iscrizione
      long long   sCategory;                    // categoria cui afferisce l'iscrizione

    };

    // Informazioni necessarie per l'integrazione
    struct DIPerson {
      DBKey tableKey;
      string fiscalCode;

    };

    typedef sequence <StatoIscrizionePersona>              StatoIscrizionePersonaSeq;
    typedef sequence <DIPerson>              		    DIPersonSeq;

    //OrganismoDirigente
    struct OrganismoDirigente {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        long long   organismo;
        long long   incarico;
        // long long   strutturaIncarico; sostituita da
        long        locationIncarico;
        long long   categoriaIncarico;

        long long   conferimentoIncarico;
        long long   livelloGeografico;
        long        inProduzione;
        long long   dataInizioIncarico;
        long long   dataFineIncarico;
        string      notes;
        long long   motivoChiusuraIncarico;

        long        certainty;  //"autorevolezza"
    };

    //OrganismoDiRappresentanza
    struct OrganismoDiRappresentanza {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;


        long long   enteDiRappresentanza;
        long long   carica;
        // long long   strutturaSegnalatrice; sostituita da
        long        locationSegnalatrice;
        long long   categoriaSegnalatrice;
        // long long   strutturaRappresentata; sostituita da
        long        locationRappresentata;
        long long   categoriaRappresentata;
        long long   servizioRappresentato;

        long long   comune;
        long long   livelloGeografico;
        long        inProduzione;
        long        nomina;                 // 1-indicato , 0-eletto
        long long   dataElezioneIncarico;
        long long   dataFineIncarico;
        string      notes;
        long long   causale;

        long        certainty;  //"autorevolezza"
    };

    struct Company {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastChangedPacket;       // Sincronizzazione: LastChanged del pacchetto company
        ChangedBy   changes;

        string      name;
        string      nameForSearch;
        string      IVAnumber;
        string      fiscalCode;
        long long   levelOfInterest;
        long long   legalType;
        long long   companyType;
        long        isHolding;
        DBKey       dbKeyHolding;
        long        isSomministratrice; //E' un'azienda che può somminstrare lavoro
        string      companyRegistryCode;
        string      companyRegistryProv;
        string      INPScode;
        string      webSite;
        string      syndicateGroup;
        long long   companySituation;

        boolean     flagInteresse;

        string      notes;             // campo libero (lungo...)
        long        isScuola;          // 0 unità locale, 1 scuola

        string      codiceSI;          // codice strato integrazione, per canalizzazione
        string      codiceAzienda;     // codice azienda, per canalizzazione


        long        certainty;         //"autorevolezza"
    };


    struct CompanyDivision {           //unità locale
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;
        DBKey       dbKeyCompany;      // foreign key to Company table

        long long   compDivType;
        string      name;
        string      nameForSearch;
        long        numberOfEmployees;  //number of persons working for this Division
        long long   numberOfEmplDate;
        long        isAdminOffice;
        string      CCIAACode;
        string      CCIAAProv;
        long long   sectorAssociation;
//        string      localEntAssociation;
        string      regionalEntAssociation;
//        long long   nationalEntAssociation;
        string      webSite;
//        string      syndicateGroup;   // coordinamento sindacale
        long long   closingReason;
        long long   closingDate;

        long long   idEnteBilaterale;

        string      notes;              // campo libero (lungo...)
        long        isScuola;           // 0 unità locale, 1 scuola
        long long   tipoScuola;         // id della classificazione tipoScuola
        long        isEntePagatore;     // 0 non è entePagatore, 1 Ente Pagatore
        long        isEBER;             // Ente Bilaterale Emilia Romagna
                                        // 1 affiliato EBER 0 non affiliato

        long        certainty;          //"autorevolezza"
    };

    // lista dati unità locale
    // ragione sociale, il comune di appartenenza, azzonamento, flag di interesse
    struct DatiCompanyDivision {
        // campi di company division
        DBKey       cd__tableKey;
        DBKey       cd__dbKeyCompany;      // foreign key to Company table
        string      cd__name; 						  // ragione sociale

        // campi dell'indirizzo
        long a__location;									// id azzonamento
        long long a__comune;								// id comune

        // campi che non appartengono a tabelle
        boolean     flagInteresse;      // interesse
    };

    typedef sequence<DatiCompanyDivision> DatiCompanyDivisionSeq;

    //  grado scuola
    enum GradoScuola { PRIMARIA, SECONDARIA };

    struct Sede {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;
        DBKey       dbKeyScuola;      // FK a CompanyDivision che in questo caso ha isScuola=1

        long long   tipoSede;         //FK tipo Sede
        string      descrizione;
        long        isSedeAmministrativa;
        string      note;

        long        certainty;          //"autorevolezza"
    };


    struct SedeAndWork {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;
        DBKey       dbKeySede;      // FK a Sede
        DBKey       dbKeyWork;      // FK a Work

        long        certainty;          //"autorevolezza"
    };

    //A Company Division can have a "situation of crisis", etc..
    //This is recorded in this separate table so that we can keep historical data
    struct SituationInCompDiv {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        //DBKey       dbKeyCompany;      // foreign key to Company table

        long long   compDivSituation;
        long long   typeOfActivity;
        string      description;
        long long   startDate;
        long long   endDate;
        long long   reasonForEndingSit;
        long        numOfInvWorker;   //number of workers involved
        long        numOfCGILMember;
        long long   sCategory;        //f.key to syndicate category table
        string      notes;

        long        certainty;  //"autorevolezza"

    };


    //Contact persons, offices, etc... for CGIL for a given CompanyDivision
    struct Contact {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        string      contatto;
        string      subject;
        string      consRole;
        string      address;
        string      telephone;
        string      fax;
        string      email;
        string      notes1;
        string      notes2;
        string      notes3;
        string      confidentialNotes;
        long long   sCategory;        //f.key to SyndicateCategory

        //long        recType;          //type (ex: Contact person)
        ContactRecType   recType;  //type (ex: Contact person)
        long        certainty;  //"autorevolezza"
    };

    enum TipoAbbonato { TIPOABB_PERSON, TIPOABB_COMPANYDIVISION, TIPOABB_CONSULTANT, TIPOABB_STRUCTURE, TIPOABB_OTHER , TIPOABB_DEFAULT};

    struct Abbonamento {
        DBKey 		tableKey;
        long long	lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   	lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy 	changes;

        string 		codiceAbbonamento;
        long long 	idRivista;
        TipoAbbonato 	tipoIntestatario;
        DBKey		dbKeyIntestatario;		// associazione con l'intestatario che potrebbe essere una persona, una unita locale, un consulente , una struttura, o altro.
        long long 	sCategory;
        long 		location;			// location dalla quale si può ricavare l'azzonamento
        DBKey 		dbKeyAddress;			// foreignKey alla tabella Address. Indirizzo del destinatario dell'abbonamento.
        long 		numeroCopie;			// numero delle copie da stampare
        TipoAbbonato	tipoPagatore;			// foreignKey alla tabella TipoAbbonato. Indica a quale tabella ci si riferisce.
        DBKey 		dbKeyPagatore;			// associazione con l'intestatario che potrebbe essere una persona, una unita locale, un consulente , una struttura, o altro.
        DBKey 		dbKeyIndirizzoPagatore;		// foreignKey alla tabella Address. Indirizzo del pagatore dell'abbonamento.
        long long	primaSottoscrizione;		// data di prima sottoscrizione
        long long	rinnovo;			// data di rinnovo dell'abbonamento
        long long	scadenza;			// data di scadenza
        long long	tipoAbbonamento;		// foreignKey alla tabella TipoAbbonamento
        long long	periodicita;			// foreignKey alla tabella Periodicità
        string		codiceEsterno;			// E' un codice per riferirsi a un altro sistema informativo (gestione liberetà)
        string		note;
        long		certainty;

    };

    struct CompleteAbbonamento {
        DBKey 		tableKey;
        long long	lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   	lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy 	changes;

        string 		codiceAbbonamento;
        long long 	idRivista;
        string		descRivista;
        TipoAbbonato 	tipoIntestatario;
        DBKey		dbKeyIntestatario;		// associazione con l'intestatario che potrebbe essere una persona, una unita locale, un consulente , una struttura, o altro.
        string		descIntestatario;
        long long 	sCategory;
        string		descSCategory;
        long 		location;			// location dalla quale si può ricavare l'azzonamento
//	string          azzonamentoAbb;
        DBKey 		dbKeyAddress;			// foreignKey alla tabella Address. Indirizzo del destinatario dell'abbonamento.
        long 		numeroCopie;			// numero delle copie da stampare
        TipoAbbonato	tipoPagatore;			// foreignKey alla tabella TipoAbbonato. Indica a quale tabella ci si riferisce.
        DBKey 		dbKeyPagatore;			// associazione con l'intestatario che potrebbe essere una persona, una unita locale, un consulente , una struttura, o altro.
        DBKey 		dbKeyIndirizzoPagatore;
        string		descPagatore;
        long long	primaSottoscrizione;		// data di prima sottoscrizione
        long long	rinnovo;			// data di rinnovo dell'abbonamento
        long long	scadenza;			// data di scadenza
        long long	periodicita;			// foreignKey alla tabella Periodicità
        string		descPeriodicita;
        long long	tipoAbbonamento;		// foreignKey alla tabella TipoAbbonamento
        string		descTipoAbbonamento;
        string		codiceEsterno;			// E' un codice per riferirsi a un altro sistema informativo (gestione liberetà)
        string		note;
        long		certainty;

    };


    enum OrdinamentoFiltroAbbonamento {ORDF_RIVISTA, ORDF_LOCATION, ORDF_INTESTATARIO};


    struct FiltroAbbonamento {
        long long 	idRivista;
        string 		codiceAbbonamento;
        TipoAbbonato 	tipoIntestatario;
        DBKey		dbKeyIntestatario;			// associazione con l'intestatario che potrebbe essere una persona, una unita locale, un consulente , una struttura, o altro.
        long long 	sCategory;
        long 		location;			// location dalla quale si può ricavare l'azzonamento
        TipoAbbonato	tipoPagatore;			// foreignKey alla tabella TipoAbbonato. Indica a quale tabella ci si riferisce.
        DBKey 		dbKeyPagatore;			// associazione con l'intestatario che potrebbe essere una persona, una unita locale, un consulente , una struttura, o altro.
        long long	scadenzaDa;			// data di scadenza che partono da
        long long	scadenzaA;			// data di scadenza che sono comprese in questa data.
        long long	tipoAbbonamento;		// foreignKey alla tabella TipoAbbonamento
        long long	periodicita;			// foreignKey alla tabella Periodicità

        OrdinamentoFiltroAbbonamento  ordinamento;

    };

    struct Consultant {
        DBKey		tableKey;
        long long   	lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   	lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   	lastChangedPacket;       // Sincronizzazione: LastChanged del pacchetto consultant

        ChangedBy	changes;

        long long       idGruppoConsulente;
        string      	subject;
        string      	note;



        long        	certainty;  	//"autorevolezza"
    };

    struct CompDivAndConsultant {

        DBKey		tableKey;
        long long   	lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   	lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        DBKey           dbKeyConsultant;
        ChangedBy	changes;

        string      	contatto;
        string      	consRole;
        string      	note;

        long        	certainty;  	//"autorevolezza"

    };


    // AOMDB Segnalazione 5
    struct HistoryNumberOfEmployees {

        DBKey		tableKey;
        long long   	lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   	lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy	changes;

        DBKey           dbKeyCompDivForSyndCat;

        long       	numberOfEmployees;
        long long       referenceDate;

        long        	certainty;  	//"autorevolezza"

    };


    struct Other {
        DBKey		tableKey;
        long long   	lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   	lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   	lastChangedPacket;       // Sincronizzazione: LastChanged del pacchetto other

        ChangedBy	changes;
        string		description;
        long long       tipologiaAltro;      // tipologia altro soggetto

        long 		certainty;
    };

    // dati specifici per la lista Other
    struct DatiListaOther {
       DBKey		ot__tableKey;
        long long   	ot__lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   	ot__lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   	ot__lastChangedPacket;       // Sincronizzazione: LastChanged del pacchetto other

        ChangedBy	ot__changes;
        string		ot__description;
        long long       ot__tipologiaAltro;      // tipologia altro soggetto

        long 		ot__certainty;

        // Dati dell'indirizzo
        long long       addr__comune;           // Comune ID di Comuni
        long            addr__location;
    };
    //Syndicate Category specific data for CompanyDivision
    struct CompDivForSyndCat {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        string      codiceUL;  // codice unità locale
        long long   sCategory; //The syndicate category
        long        location;

        long long   sCategoryRiferimento; // Strut. del Rif. //The syndicate category
        long        locationRiferimento;  // Strut. del Rif.

        string      syndicateGroup;
        //string      localClassification;
        long long   idLocalClassification;
        string      oldCode;
        long        numberOfEmployees;
        long long   numberOfEmpDate;
        long        cgilMember;
        long        cislMember;
        long        uilMember;
        long        unitaryMember;
        long long   memberDate;

        long long   idCassaEdile;

        string      annoTesseramento;  // anno tesseramento da effettuare
        string      csie1;
        long long   idCodiceCSIE1;
        string      csie2;
        long long   idCodiceCSIE2;
        long long   official;              //funzionario sindacale di riferimento
        long long   nationalEntAssociation;
        string      localEntAssociation;
        string      notes;

        long        certainty;  //"autorevolezza"

        // dati per canalizzazione
        DBKey       dbKeyCompDivVers;       // unita' locale che effettua il versamento
        long        isStampaBollettini;     // flag stampa bollettini
        long        isChanneled;            // flag canalizzata
        string      noteCanalizzazione;     // note canalizzazione
        long long   recapitoBollettino;     // scelta recapito bollettino
        DBKey       dbKeyAddressConsulente; // indirizzo recapito bollettino presso consulente
        long long   tipoVersamento;         // id della class territoriale tipoVersamento
        long long   modalitaPagamento;      // id della class territoriale modalitaPagamento
        DBKey       dbKeyAddrCanaliz;       // chiave dell'indirizzo a cui inviare il bollettino.
                                            // Campo in sola lettura per i client valorizzato
                                            // in automatico dal server a seconda del valore di recapitoBollettino
        long long   dataVersamenti;
    };

/**
 * Work is a relationship between a Person and a CompanyDivision
 */

    struct Work {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        DBKey       dbKeyPerson;
        DBKey       dbKeyCompanyDiv;
        DBKey       dbKeyCassaEdile;
        DBKey       dbKeyContract;
        long long   idContractSector;
        DBKey       dbKeyWork;  //reference to "parent" if isTemporary

        long        dipIndipOSommin; //dipendente, indipendente o somminstrato
        long        isSomministratore; //E' un rapporto di lavoro dipendente con azienda somministratrice
        string      settoreLavorativo; //per il lavoro indipendente

        long        flagStartDate; /* AOMDB 75 vale 1 se la data StartDate e' certa
                                      ovvero inserita dall'utente. Vale 0 se la Data
                                      automaticamente dal sistema */
        long        flagEndDate; /* AOMDB 75 * come flagStartDate relativo
                                    al campo endDate */

        long long   startDate;
        long long   endDate;

        long long   wType;              //Foreign key to WorkTypes table -- tipologia dei rapporti di lavoro
        long        flagCollocamentoObb;
        long        isSocioLavoratore;

        long long   reasonForEndingWPNW;//Foreign key to ReasonForEndingWPNW table -- motivi di rottura
        long long   sCategoryTitolare;  // Strut. del Tit.          //foreign key to SyndicateCategory table
        long        locationTitolare;  // Strut. del Tit.          //foreign key to SyndicateCategory table

        string      payLevel;
        long long   professionalArea;
        long        isAssociatoCassaEdile;
        string      qualification;  // non viene più usato
        long long   idQualifica;    // FK verso la classificazione Qualifica
        string      qualDetail;
        string      department;
        long long   workStatus;
        long long   workStatusDate;
        string      notes;

        long        certainty;  //"autorevolezza"
    };


    struct UnionInfo {
        DBKey       tableKey;
        long long   lastChanged;          // readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;     // readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        long long   structure;            // struttura che ha creato questo record
        long long   sCategoryAttivazione;   // Strut. di Att. // Segnalazione AOMDB 113 - sostituzione campo structure
        long        locationAttivazione;    // Strut. di Att. // Segnalazione AOMDB 113 - sostutuzione campo structure
        long long   servCategoryAttivazione;// Strut. di Att

        long long   application;          // application that created this record

        //Operator - foreign key to a Person record
        DBKey       dbKeyUser;            // reference to the user that inserted the record

        long long   startDate;            // Inizio validita' iscrizione

        string      occasion;             // event/office/reason for joining (eg. feste dell'unita'); attivita' che ha dato luogo all'iscrizione

        long long   servActivity;         // attività di servizio che ha generato l'iscrizione
        long long   refStructure;         // struttura titolare della rappresentanza (al momento il campo è inutilizzato) // foreign key to Structure table
        long        locationTitolare;     // Strit. del Tit.  // location che indica la titolarità della rappresentanza
        long long   sCategoryTitolare;    // Strut. del Tit.  // categoria sindacale che indica la titolarità della rappresentanza
        long long   confederation;        // confederazione scelta (per le categorie unitarie)
        long long   oldConfederation;

        long        locationRiferimento;     // Strut. del Rif.
        long long   sCategoryRiferimento;    // Strut. del Rif.

        long long   subscriptionDate;     // Data sottoscrizione (data della richiesta di iscrizione)
        long long   endDate;              // Termine validita' iscrizione
        long long   cancellationDate;     // Termine trattenuta sindacale (data di disdetta)
        long long   reasonForEndingUnion; // motivo di cessazione dell'appartenenza al Sindacato

        long long   delegationType;
        long long   delegationStartDate;

        //payment information
        long long   payMethod;            // Metodo di pagamento ("delega", "brevi manu", "ds"); // foreign key to PaymentMethod table
        long long   firstPayDate;         // Inizio trattenuta sindacale; only if paysAutomatically (decorrenza);
        long long   confCorporation;      // ente che conferma l'iscrizione //f.key to ConfirmCorporation table
        long        createCard;

        string      notes;                // campo libero (lungo...)

        long        flag1;                // I° iscrizione al sindacato
        long        flag2;                // Cambio scelta (Unitari) (SOLO LAVORO DIP e SOMM)
        long        flag3;                // I° iscrizione alla categoria
        long        flag4;                // Nuova delega UL (SOLO LAVORO DIP e SOMM)
        long        flag5;                // Reiscrizione categoria anni precedenti
        long        flag6;                // Trasferimento UL (SOLO LAVORO DIP e SOMM)
        long        flag7;                // Reiscrizione categoria anno in corso
        long        flag8;                // Cambio azzonamento

        long        certainty;            // "autorevolezza"
    };


    //a UnionInfo can have zero or one membership card
    struct Card {
        DBKey       tableKey;
        long long   lastChanged;          // readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;     //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        DBKey       dbKeyUI;
        long long   cardType;
        long        lastCardYear;
        long        previousCardYear;
        long long   lastCardSCategory;    //F.key to SyndicateCategory
        long long   lastCardConfed;
        long        toPrint;  //boolean
        long long   reasonNotToPrint;       // Riferimento alla classificazione ReasonNotToPrint
        long        lastPrintedCardYear;
        long long   printingDate;
        long long   cardDelType;
        string      notes;

        long        certainty;            // "autorevolezza"
    };


    // Per definire il tipo di Pratica
    enum PraticaType { DISOCCUPAZIONE, MOBILITA };

    //a UnionInfo can have zero or one membership card
    struct Pratica {

        DBKey       tableKey;
        long long   lastChanged;          // readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;     //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        string      codicePratica;
        long long   dataInizio;
        long long   dataFine;
        long long   sCategory;
        long        location;
        PraticaType tipoPratica;          // Tipo di pratica: DISOCCUPAZIONE o MOBILITA
        long long   causaleFineMobilita;
        DBKey       dbKeyContract;
        long long   idContractSector;
        long long   dataCancIntegr;       // Valorizzato dall'integratore quando la pratica è cancellata

        long        certainty;            // "autorevolezza"
    };

    struct PraticaAndWork {

        DBKey       tableKey;
        long long   lastChanged;          // readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;     //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        DBKey       dbKeyPratica;
        DBKey       dbKeyWork;

        long        certainty;            // "autorevolezza"

    };

    typedef sequence<Pratica> PraticaSeq;
    typedef sequence<PraticaAndWork> PraticaAndWorkSeq;

    struct MateriaInsegnamento {
        long long       id; //key
        string      description;
        // campi fissi
        long long       lastChanged;
        long long       lastSynchronized;
        ChangedBy       changes;
        long long       categoria;
        long            provvisorio;
        long            ordinamento;
        long            certainty;
    };

    struct WorkForMateriaIns {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        DBKey       dbKeyWork;      // foreign key to Work
        long long   materia;        // foreign key to MateriaInsegnamento table
        long        isInsegna;      // flag, indica se la materia è insegnata
        long        isPuoInsegnare; // flag, indica se può insegnare la materia
        long        certainty;      // "autorevolezza"
    };

    typedef sequence<WorkForMateriaIns> WorkForMateriaInsSeq;

    enum TipoCampo { T_INTEGER, T_LONG, T_FLOAT, T_CHAR, T_STRING, T_BOOLEAN, T_TIMESTAMP, T_DOUBLE };

    // campo che contiene i valori del campo.
    // Se tipo è uguale a :
    // INTEGER valore nella property valInteger.
    // LONG valore nella property valLong.
    // FLOAT valore nella property valFloat.
    // CHAR valore nella property valString.
    // STRING valore nella property valString.
    // BOOLEAN valore nella property valBoolean.
    // TIMESTAMP valore nella property valTimestamp.
    // DOUBLE valore nella property valDouble.
    struct ValoreCampo {
            long		          valInteger;
            long long       	valFloat;
            long long	        valLong;
            string		        valString;
            boolean		        valBoolean;
            long long	        valTimestamp; // valore in secondi
            float              valDouble;

    };

    typedef sequence<ValoreCampo> ValoreCampoSeq;

    // viene usato solo per la ricerca, non viene salvato nel DB.
    // indica se in corrispondenza di questo campo si deve aprire o chiudere
    // una parentesi oppure nessuna parentesi.
    enum Parentesi { PAR_NESSUNA, PAR_APERTA, PAR_CHIUSA};

    struct Campo {
            // campi per la sincronizzazione
            DBKey		tableKey;
            long long	        lastChanged;
            long long	        lastSynchronized;
            ChangedBy   	changes;

            string		nome;
            TipoCampo		tipo;
            long		lunghezza;
            ValoreCampoSeq	        valoriCampo;
            boolean		isPrimaryKey;
            boolean		isForeignKey;
            string		nomeTabellaFK;
            string		nomePerClient;  // nome specifico per il client
            boolean             inAnd;  // campo specifico per fare il filtro nelle ricerche
                                        // indica se il campo specifico deve essere in AND o in OR
                                        // Se il valore è true allora il campo è in AnND antrimenti in OR
            Parentesi           parentesiFiltro;  // campo usato solo per il filtro nelle ricerche.
                                            // Permette di inserire le parentesi nelle operazioni logiche
    };

    // definisce il nome della tabella di classificazione e se è una classificazione locale o regionale
    struct IDClassificazione {
            // campi per la sincronizzazione
            DBKey		tableKey;
            long long	        lastChanged;
            long long	        lastSynchronized;
            ChangedBy   	changes;

            string		nome;
            boolean		isRegionale;
            long		territorio;	// valorizzato solo se isRegionale è a false. Contiene il codice del territorio di appartenenza.
            string		nomePerClient;  // nome specifico per il client
            Campo		ordinamentoSecondario;  // indica il nome del campo secondario per ordinare i valori.
            boolean             isClassificazione;       // indica se la tabella è una classificazione o una tabella generica
            boolean             daVisualizzare;          // flag che indica se la classificazione è da visualizzare
                                                          // 0 o null non è da visualizzare cioè una classificazione
                                                          // di sistema. 1 da visualizzare quindi una classificazione
                                                          // non di sistema.
    };

    typedef sequence<Campo> CampoSeq;
    typedef sequence<IDClassificazione> IDClassificazioneSeq;

    // definisce in generale la Classificazione
    struct Classificazione {
            IDClassificazione	        id;  // identifica la tabella della Classificazione
            CampoSeq			campi;
    };


    // ERR_NONUMPENSION		indica che non è stato trovato la pensione con il numero specificato dalla delega.
    // ERR_NOCODFISCPERSONA	indica che non è stata trovata o non corrisponde la persona con il codiceFiscale specificato dalla delega.
    // ERR_NOSINGOLAPERSONA     indica che sono state trovate piu persone a fronte di un fiscal code
    // ERR_PERSONADECEDUTA      indica che la persona è deceduta                rif. : MA16072002_01
    // ERR_NODOMICILIO		indica che la persona non ha nessun indirizzo di tipo domicilio.
    // ERR_NODOMICILIOATTIVO	indica che la persona non ha nessun indirizzo di tipo domicilio attivo.
    // ERR_NOAZZONAMENTO	indica che l'indirizzo di tipo domicilio non ha il campo azzonamento valorizzato.
    // ERR_DISSOCIATOMANUALMENTE indica che la delega è stata dissociata dall'utente.
    enum TipoErroreDeleghe {
           ERR_NONUMPENSION,
           ERR_NOCODFISCPERSONA,
           ERR_NOSINGOLAPERSONA,
           ERR_PERSONADECEDUTA,               // rif. : MA16072002_01
           ERR_NOSINGOLAPENSION,
           ERR_NOPENSIONPROVIDER,
           ERR_NOCOHERENTPENSIONPROVIDER,
           ERR_NOMATCHBETWEENPENSIONANDPERSON,
           ERR_NODOMICILIO,
           ERR_NODOMICILIOATTIVO,
           ERR_NOAZZONAMENTO,
           ERR_DISSOCIATOMANUALMENTE
    };

    struct AssociazioniErrate {
        TipoErroreDeleghe codErrore;
        long numeroErrati;
    };

    typedef sequence<AssociazioniErrate> Errati;

    struct Report {
        long 	numeroAssociati;
        long 	numeroNonAssociati;
        Errati	nonAssociati;
    };


    //----- Enum Gestione RSU -----
    enum LivelloOrganismoRSU {LIVELLO_NULLO, LIVELLO_AZIENDALE, LIVELLO_INTERAZIENDALE};
    enum TipoOrganismoRSU {TIPO_NULLO, TIPO_RSU, TIPO_RSA, TIPO_RLS};
    // enumeration che definisce con un numerico a quale incarico si riferisce
    // la struct DATIINCARICO
    enum TipoIncaricoPersona {INCARICO_RSU, INCARICO_LOCALE, INCARICO_RAPPRESENTANZA, INCARICO_DIRIGENTE};
    //----- Strutture Gestione RSU -----
    // * = parametro obbligatorio

    struct OrganismoRSU {
      DBKey                    tableKey;
      long long                lastChanged;            //readonly -- seconds since 1/1/1970 00:00 GMT
      long long                lastSynchronized;       //readonly -- seconds since 1/1/1970 00:00 GMT
      ChangedBy                changes;
      long long	               categoriaSindacale;     // * categoria sindacale
      LivelloOrganismoRSU      livello;                // * aziendale o interaziendale
      long                     codiceProgressivo;      // * codice progressivo locale al territorio per organismo RSU
      DBKey                    dbKeyUL;                // valorizzato se livello AZIENDALE
      string                   nomeInterazienda;       // valorizzato se livello INTERAZIENDALE
      string                   indirizzoInterazienda;  // valorizzato se livello INTERAZIENDALE contiene toponimo, nome strada e numero civico
      long long                comuneInterazienda;     // valorizzato se livello INTERAZIENDALE
      string                   provinciaInterazienda;  // valorizzato se livello INTERAZIENDALE sigla 2 caratteri
      DBKey                    dbKeyContrInterazienda; // valorizzato sia per AZIENDALE sia per INTERAZIENDALE
      long long                settContrInterazienda;  // valorizzato sia per AZIENDALE sia per INTERAZIENDALE
      long                     certainty;
    };

    struct Verbale {
      DBKey                    tableKey;
      long long                lastChanged;             //readonly -- seconds since 1/1/1970 00:00 GMT
      long long                lastSynchronized;        //readonly -- seconds since 1/1/1970 00:00 GMT
      ChangedBy                changes;
      DBKey                    dbKeyOrganismoRSU;
      TipoOrganismoRSU         tipoOrganismo;           // enumeration RSU, RSA, RLS
      long                     iscritti;                // iscritti attivi nel momento in cui viene registrato il verbale
      long                     dirittoLavoratoriTotale; // Totale degli aventi diritto al voto tra operai e impiegati
      long                     dirittoImpiegati;        // Numero degli impiegati aventi diritto al voto
      long                     dirittoImpiegatiM;       // Impiegati maschi
      long                     dirittoImpiegatiF;       // Impiegati femmine
      long                     dirittoOperai;           // Numero degli operai aventi diritto al voto
      long                     dirittoOperaiM;          // Operai maschi
      long                     dirittoOperaiF;          // Operai femmine
      long                     dirittoTotale;           // Totale degli aventi diritto al voto tra maschi e femmine
      long                     dirittoFemmine;          // Numero delle femmine aventi diritto al voto
      long                     dirittoMaschi;           // Numero dei Maschi aventi diritto al voto
      float                    dirittoPercentuale;      // Percentuale aventi diritto al voto
      long long                dataChiusura;            // Data fine validità verbale
      long long                dataElezione;            // Data inizio validità verbale
      long                     validi;                  // Numero voti validi
      long                     schedeBianche;           // Numero schede bianche
      long                     schedeNulle;             // Numero schede nulle
      long                     votanti;                 // Numero votanti
      long                     votantiM;                // Votanti maschi
      long                     votantiF;                // Votanti femmine
      string                   note;
      long                     certainty;
    };

    struct DatiSindacato {
      DBKey                    tableKey;
      long long                lastChanged;             //readonly -- seconds since 1/1/1970 00:00 GMT
      long long                lastSynchronized;        //readonly -- seconds since 1/1/1970 00:00 GMT
      ChangedBy                changes;
      DBKey                    dbKeyVerbale;           // * chiave esterna del verbale
      long long                idSindacato;            // * id del sindacato rappresentato
      long                     numeroVoti;             // per sindacato
      float                    percentualeVoti;        // per sindacato
      long                     numeroDelegati;         // per sindacato
      float                    percentualeDelegati;    // per sindacato
      long                     certainty;
    };

    struct NonEletto {
      DBKey                    tableKey;
      long long                lastChanged;             //readonly -- seconds since 1/1/1970 00:00 GMT
      long long                lastSynchronized;        //readonly -- seconds since 1/1/1970 00:00 GMT
      ChangedBy                changes;
      DBKey                    dbKeyVerbale;           // * chiave esterna del verbale
      string                   cognome;                // cognome del non eletto può contenere anche il codice fiscale concatenato
      string                   nome;                   // nome del non eletto
      long                     voti;                   // numero voti non eletto
      long                     certainty;
    };

    struct IncaricoRSU {
      DBKey                    tableKey;
      long long                lastChanged;             //readonly -- seconds since 1/1/1970 00:00 GMT
      long long                lastSynchronized;        //readonly -- seconds since 1/1/1970 00:00 GMT
      ChangedBy                changes;
      DBKey                    dbKeyVerbale;           // * chiave esterna del verbale
      DBKey                    dbKeyPerson;           // * chiave esterna della persona
      long                     voti;                   // numero voti ottenuti
      long long                tipoOrganismo;          // classificazione tipoOrganismo
      long                     exDelegato;             // intero con significato di booleano. 1 valore true 0 o null valore false
      long                     riconfermato;           // intero con significato di booleano. 1 valore true 0 o null valore false
      long                     neoEletto;              // intero con significato di booleano. 1 valore true 0 o null valore false
      long long                dataCessazione;         // data fine incarico
      long long                dataElezione;           // data inizio incarico
      LivelloOrganismoRSU      livello;                // * aziendale o interaziendale
      long long                categoriaSindacale;     // categoria sindacale deve essere allineato all'organismoRSU associato
      long                     certainty;
    };

    // struttura per ottimizzare le chiamate remote del client
    // per effettuare un dettaglio dell'incarico RSU servono i
    // i dati del verbale e dell'OrganismoRSU
    struct IncaricoRSUCompleto {
      IncaricoRSU              incarico;
      Verbale                  verbaleIncarico;
      OrganismoRSU             organismoRSUVerbale;
    };

    // struttura dati per passare i filtri per la ricerca del verbale
    struct FiltroVerbale {
      long long          dataChiusura;
      long long          dataElezione;
      TipoOrganismoRSU   tipoOrganismo;
    };

    // struttura dati per passare i filtri per la ricerca di organismoRSU,
    // DatiIncarichiRSU, OrganismoRSUVerbale, Verbale
    struct FiltroOrganismoRSU {
      LivelloOrganismoRSU  livello;                 // solo organismo RSU
      DBKey                dbKeyUL;                 // organismoRSU, DatiIncarichiRSU
      string               ragioneSocialeAzienda;   // solo organismo RSU
      string               ragioneSocialeUL;        // solo organismo RSU
      string               nomeInterazienda;        // solo organismo RSU
      long                 codiceProgressivo;       // solo organismo RSU
      long long            categoriaSindacale;      // solo organismo RSU
      DBKey                dbKeyCompany;            // organismoRSU, DatiIncarichiRSU
      long long            dataInizioIntervallo;    // DatiIncaricatiRSU, Verbale
      long long            dataFineIntervallo;      // DatiIncaricatiRSU, Verbale
      TipoOrganismoRSU     tipoOrganismo;           // per OrganismoRSUVerbale
    };

    // dati da visualizzare nella lista degli incaricati dell'azienda
    struct DatiIncaricatiRSU {
      DBKey            dbKeyIncarico;
      DBKey            dbKeyPerson;
      string           cognome;
      string           nome;
      long long        dataCessazioneIncarico;
      long long        dataElezioneIncarico;
      DBKey            dbKeyUL;
      string           ragioneSociale;
      DBKey            dbKeyVerbale;
      TipoOrganismoRSU tipoOrganismo;
      DBKey            dbKeyOrganismoRSU;
      long long        categoriaSindacale;
    };

    // struttura dati che contiene i dati da visualizzare nella lista degli incarichi della persona.
    struct DatiIncarico {
      string                tipo;       // per RSU: RSU in lista CGIL,
                                        // per OODD: campo organismo
                                        // per OORR: campo enteDiRappresentanza
                                        // per altri la descrizione Incarichi vari.
      long long             livello;    // per RSU: ENUM LivelloOrganismoRSU
                                        // per OODD: campo livello geografico
                                        // per OORR: campo livello di riferimento
                                        // per altri costante 'TERRITORIALE'.
      long long             categoria;  // categoria della struttura dell'incarico
      long long             dataInizio;
      long long             dataFine;
      DBKey                 dbKeyIncarico;
      TipoIncaricoPersona   incarico;   // si riferisce all'enumeration

    };

    // struttura dati per filtrare la ricerca degli incarichi
    struct FiltroDatiIncarico {
      long long             dataInizio;
      long long             dataFine;

    };
    // struttura dati che contiene i dati dell'incarico OrganismoLocale.
    struct IncaricoOrganismoLocale {
      DBKey                    tableKey;
      long long                lastChanged;             //readonly -- seconds since 1/1/1970 00:00 GMT
      long long                lastSynchronized;        //readonly -- seconds since 1/1/1970 00:00 GMT
      ChangedBy                changes;
      DBKey                    dbKeyPerson;           // * chiave esterna della persona
      long long                organismoLocale;        // classificazione OrganismoLocale
      long long                dataCessazione;         // data fine incarico
      long long                dataElezione;           // data inizio incarico
      long long                categoriaSindacale;     // categoria dell'incarico. Può essere anche CGIL o vuota
      long                     certainty;

    };

    // struttura dati utilizzata per i report incarico RSU area persona
    struct CompleteIncaricoRSU {

      // dati unità locale
      DBKey               dbKeyUL; // chiave unità locale
      string              nomeUL;  // nome unità locale
      // dati azienda
      DBKey               dbKeyCompany; // chiave azienda
      string              ragioneSociale; // ragione sociale azienda
      // dati organismo RSU
      DBKey               dbKeyOrganismoRSU; // chiave organismo RSU
      long long           categoriaSindacaleOrganismo;  // categoria sindacale organismo(classificazione)
      LivelloOrganismoRSU livello; // livello organismo RSU (enumeration)
      // dati verbale
      DBKey               dbKeyVerbale; // chiave del verbale cui l'incarico è associato
      TipoOrganismoRSU    tipoOrganismoVerbale; // tipo organismo verbale (enumeration)
      long long           dataElezioneVerbale;
      long long           dataChiusuraVerbale;
      // dati incarico
      DBKey               dbKeyIncarico; // chiave dell'incarico RSU
      long long           lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
      long                changes_cgdByLoc;  //readonly -- seconds since 1/1/1970 00:00 GMT

      long long           dataElezioneIncarico;
      long long           dataCessazioneIncarico;
      long long           categoriaSindacaleIncarico;  // categoria sindacale incarico(classificazione)
      long long           tipoOrganismoIncarico;// tipo organismo dell'incarico (enumeration)
      long                votiOttenuti;
      long                neoEletto; //flag
      long                riconfermato; //flag
      long                exDelegato; //flag
      // dati persona
      DBKey               dbKeyPerson; // chiave persona incaricata
      string              cognome; // cognome dell'incaricato
      string              nome; // nome dell' incaricato

    };


    //-----Sequence Gestione RSU------
    typedef sequence<OrganismoRSU>              OrganismoRSUSeq;
    typedef sequence<Verbale>                   VerbaleSeq;
    typedef sequence<DatiSindacato>             DatiSindacatoSeq;
    typedef sequence<NonEletto>                 NonElettoSeq;
    typedef sequence<IncaricoRSU>               IncaricoRSUSeq;
    typedef sequence<DatiIncaricatiRSU>         DatiIncaricatiRSUSeq;
    typedef sequence<DatiIncarico>              DatiIncaricoSeq;
    typedef sequence<IncaricoOrganismoLocale>   IncaricoOrganismoLocaleSeq;


    // fine sequence Gestione RSU

    // struttura che permette di portare più dati con una sola ricerca
    struct VerbaleCompleto {
      Verbale             verbaleRSU;
      DatiSindacatoSeq    datiSindacati;
      NonElettoSeq        nonEletti;
    };
    // struttura che permette di portare più dati con una sola ricerca
    struct ElezioneRSU{
      OrganismoRSU        organismo;
      VerbaleCompleto     verbale;
    };

    typedef sequence<ElezioneRSU>   ElezioneRSUSeq;

    // struttura dati che contiene i dati da visualizzare nella lista
    // degli incaricati dall'azienda.


    // fine strutture Gestione RSU


    // interfaccia  che definisce i metodi per la gestione delle deleghe
    interface GestoreDeleghe {
        // Inserisce un record nella classificazione delegaXXX
      //TransmissionStatus newDelega(in long accessLevel, in Classificazione delega, out Classificazione delegaHolder);
      // MOdifica un record nella classificazione delegaXXX
      TransmissionStatus updateDelega(in long accessLevel, in Classificazione delega, out Classificazione delegaHolder);
      // Cancella un record nella classificazione delegaXXX
      //TransmissionStatus deleteDelega(in long accessLevel, in Classificazione delega);
      // Ricerca un record nella classificazione delegaXXX
      Classificazione	   getAllDelega(in string idOggetto, in CampoSeq campiFiltro, in long numMax) raises(ILException);

      // Legge dal dataBase messo a disposizione dall'INPS le deleghe e le inserisce nel DB di IL
      void importDelegheINPS(in long accessLevel) raises(ILException);
      // Legge dal dataBase messo a disposizione dal Tesoro le deleghe e le inserisce nel DB di IL
      void importDelegheTesoro(in long accessLevel) raises(ILException);
      // Legge dal dataBase messo a disposizione dall'IPOST le deleghe e le inserisce nel DB di IL
      void importDelegheIPOST(in long accessLevel) raises(ILException);
      // Legge dal dataBase messo a disposizione dall'INPS gli aggiornamenti delle deleghe e li inserisce nel DB di IL
      void importAggiornamentiDelegheINPS(in long accessLevel) raises(ILException);

      // interrompe l'esecuzione dell'import
      void annullaImportDelegheINPS(in long accessLevel) raises(ILException);
      // interrompe l'esecuzione dell'import
      void annullaImportDelegheTesoro(in long accessLevel) raises(ILException);
      // interrompe l'esecuzione dell'import
      void annullaImportDelegheIPOST(in long accessLevel) raises(ILException);
      // interrompe l'esecuzione dell'import
      void annullaImportAggiornamentiDelegheINPS(in long accessLevel) raises(ILException);


      // Restituisce il numero di record importati da DelegaINPS nel DB IL
      long getNumImportatiDelegaINPS( in long accessLevel) raises(ILException);
            // Restituisce il numero di record importati da DelegaTesoro nel DB IL
      long getNumImportatiDelegaTesoro( in long accessLevel) raises(ILException);
      // Restituisce il numero di record importati da DelegaIPOST nel DB IL
      long getNumImportatiDelegaIPOST( in long accessLevel) raises(ILException);
      // Restituisce il numero di record importati da AggiornamentoDelegaINPS nel DB IL
      long getNumImportatiAgiornamentoDelegaINPS( in long accessLevel) raises(ILException);

      // Dai dati letti dal DBF si cerca di intuire il territorio di appartenenza
      // e la persona associata alla delega.
      void associaDelegaINPS(in long accessLevel) raises(ILException);
            // Dai dati letti dal DBF si cerca di intuire il territorio di appartenenza
      // e la persona associata alla delega.
      void associaDelegaTesoro(in long accessLevel) raises(ILException);
        // Dai dati letti dal DBF si cerca di intuire il territorio di appartenenza
      // e la persona associata alla delega.
      void associaDelegaIPOST(in long accessLevel) raises(ILException);
            // Dai dati letti dal DBF si cerca di intuire il territorio di appartenenza
      // e la persona associata all'aggiornamento della delega.
      void associaAggiornamentoDelegaINPS(in long accessLevel) raises(ILException);


      // Interrompe l'esecuzione dell'Associazione
      void annullaAssociazioneDelegheINPS(in long accessLevel) raises(ILException);

      // Interrompe l'esecuzione dell'Associazione
      void annullaAssociazioneDelegheTesoro(in long accessLevel) raises(ILException);

      // Interrompe l'esecuzione dell'Associazione
      void annullaAssociazioneDelegheIPOST(in long accessLevel) raises(ILException);

      // Interrompe l'esecuzione dell'Associazione
      void annullaAssociazioneAggiornamentoDelegheINPS(in long accessLevel) raises(ILException);

      // Restituisce un report sulle associazioni delle deleghe INPS
      Report getReportAssociazioneDelegaINPS( in long accessLevel) raises(ILException);
      // Restituisce un report sulle associazioni delle deleghe Tesoro
      Report getReportAssociazioneDelegaTesoro( in long accessLevel) raises(ILException);
      // Restituisce un report sulle associazioni delle deleghe IPOST
      Report getReportAssociazioneDelegaIPOST( in long accessLevel) raises(ILException);
      // Restituisce un report sulle associazioni delle deleghe AggiornamentoINPS
      Report getReportAssociazioneAggiornamentoDelegaINPS( in long accessLevel) raises(ILException);

      // dissocia la delega passata nella classificazione
      Classificazione dissociaDelega(in long accessLevel, in Classificazione boClass, in long tipoErroreDeleghe) raises(ILException);

      // Ricerca paginata delle deleghe errate
      Classificazione getDelegheErrate(in string idOggetto, in CampoSeq campiFiltro, in long inizio, in long offset, in long numMax) raises(ILException);

      // metodo per liberare tutte le risorse.
      void disconnect() raises (ILException);
    };




    //A UnionInfo can be paid in cash (BreviManu), if so keep extra payment info.

    struct BreviManu {
        DBKey       tableKey;
        long long   lastChanged;          // readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;     // readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        //long        amount;
        //double        amount;
        float        amount;
        long long   payDate;
        long long   startDate;
        long long   endDate;

        long        certainty;            // "autorevolezza"
    };

    //Another UnionInfo payment method

    struct AgriOrRRDS {
        DBKey       tableKey;
        long long   lastChanged;          // readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;     //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        string      referringPeriod;
        long        daysWorked;
        string      yearOfUnion;

        long        certainty;           // "autorevolezza"
    };

   //Used to link UnionInfo to Work/Pension/NotWorking.
   //not used directly by client at the moment
   struct UnionInfoAndWPNW {
        DBKey         tableKey;
        long long     lastChanged;        // readonly -- seconds since 1/1/1970 00:00 GMT
        long long     lastSynchronized;   //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy     changes;

        DBKey         dbKeyUnionInfo;
        DBKey         dbKeyWPNW;
        long          tableTypeWPNW;      // 0 = Work, 1 = Pension, 2 = NotWorking, 3 = Pratica

        long          certainty;
   };

/* LUCA
Definizione di pratica
- Persona;
- Servizio ("Inca", "Uff. vertenze", ecc...,);
- Territorio (citta'+sede+lega, ecc ....;
- Operatore (persona CGIL, dato non obbligatorio);
- Data apertura pratica;
- Data chiusura pratica;
- Stato della pratica, esito (scelta da elenco);
- Tipo di pratica (scelta da elenco);
Queste informazioni saranno sincronizzate tra i territori;
*/

    struct Dossier {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        long        application;       // application that created this record // foreign key to ApplicationName table
        long        ownerLocation;     // location owning the dossier // foreign key to Location table
        DBKey       dbKeyUser;         // reference to the user that inserted the record

        long long   state;             // stato della pratica //f.key to DossierState table
        long long   kind;              // tipo di pratica (disoccupazione, pensionamento, ecc...) // foreign key to DossierKind table
        long long   serviceActivity;   // the kind of the service that created the dossier ("Inca", "Uff. vertenze", ecc...); // foreign key to ServiceActivity table

        long long   openingDate;       // data di apertura della pratica
        long long   closingDate;       // data di chiusura della pratica

        string      notes;             // campo libero (lungo...)
        // campi aggiunti per l'aggiornamento con INCA
        string      codicePratica;
        string      codiceUfficioINCA;
        string      codiceSedePermanenza;
        string      tipologiaPratica;
        string      descrizioneProdotto;
        string      esitoPratica;

        long long   dataCancINCA;      //data cancellazione della pratica sull'INCA

        long        certainty;
    };

    struct DossierFisco {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        long        application;       // application that created this record // foreign key to ApplicationName table
        long        ownerLocation;     // location owning the dossier // foreign key to Location table
        DBKey       dbKeyUser;         // reference to the user that inserted the record

        long long   serviceCategory;   // the kind of the service that created the dossier ("Inca", "Uff. vertenze", ecc...); // foreign key to ServiceCategory table
        long long   serviceActivity;   // servizio

        string      anno;
        string      territorio;
        string      installazione;
        string      codicePratica;
        string      statoPratica;
        long long   dataVerifica;
        string      sostitutoImposta;
        string      sedeSostitutoImposta;

        long        certainty;
    };

    struct EsistenzaPratiche {
        long numeroPraticheINCA;
        long numeroPraticheFisco;
    };

    // struct Concomitante dati aggiuntivi per la Pratica pensione.
    struct Concomitante {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        DBKey       dbKeyDossier;       // riferimento al Dossier.
        string      agenzia;
        string      categoriaIscrizione;
        string      azzonamento;
        string      numeroPensionePratica;
        long long   dataDecorrenzaPratica;
        long long   dataDecorrenzaPensione;
        string      numeroPensione;
        string      categoriaPensione;
        long        isIntegrazioneMinimo;
        string      istituto;
        long        certainty;
    };

    /* For a company to be inCrisis, it must have an authorization
       The authorizations are stored in the Authorization table, with
       the company id and location as a foreign key
       (not part of the Authorization struct)
    */

    struct Authorization {
        DBKey       tableKey;
        long long   lastChanged;      //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        long long   reason;	//Reason for being in crisis // foreign key to AuthorizationReason table
        long long   kind;	//Type of authorization (CIGS, EBER, Solidarita,..) // foreign key to AuthorizationKind table

        long long   startDate;          //start of authorization period
        long long   endDate;	//end of authorization period
        long long   revokedDate;        //Date revoked (revocata)

        string      notesReference;
        string      notesProtocol;      //date, etc..
        long        certainty;          //"autorevolezza"

    };

    struct CompDivAndSyndCat { // The company syndicate category
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        long long   sCategory;  // foreign key to SyndicateCategory table
        long        certainty;  //"autorevolezza"
    };


    struct CompDivAndTypeOfActivity {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        long long   typeOfActivity;    // foreign key to TypeOfActivity table
        long        certainty;         //"autorevolezza"
    };

    struct CompDivFSCAndCollContr {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        DBKey       dbKeyCompDivFSC;   // foreign key to CompDivForFSC table
        DBKey       dbKeyCollContr;    // foreign key to CollContr table
        long        certainty;         //"autorevolezza"
    };

    struct CompDivFSCAndContractSector {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        long long   contractSector;    // foreign key to ContractSector table
        long        certainty;         //"autorevolezza"
    };


   //not used directly by client at the moment
    struct CompDivAndCollContr {
        DBKey       tableKey;
        long long   lastChanged;          // readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;     //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        DBKey       dbKeyCompDiv;
        DBKey       dbKeyCollContr;

        long        certainty;
   };

    struct CollectiveContract { // The collective agreement(s) applied to a company
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;
        long long   sCategory;         // foreign key to SyndicateCategory table
        string      code;
        string      oldCode;
        long long   contractType;      // foreign key to ContractType table
        long long   contractKind;

        string      name;
        long long   startDate;
        long long   endDate;
        long long   dataScadenzaEconomica;
        long long   signatureDate;
        long        hasAutoRenewal;
        DBKey       dbKeyCollContr;    //parent, if we are a "second level" contract
        string      employeesEntAss;
        long        isRegionale;
        long        certainty;         //"autorevolezza"
    };

    struct LocalEntAssForCollContr {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT
        ChangedBy   changes;
        string      description;
//        long long   sCategory;        //f.key to syndicate category table
        long        certainty;        //"autorevolezza"

    };

    typedef sequence<LocalEntAssForCollContr> LocalEntAssForCollContrSeq;

    struct CollContrAndContrSector {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        long long   contrSector;    // foreign key to ContractSector table
        long        certainty;      //"autorevolezza"
    };

    struct CollContrAndSectorAss {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        long long   sectorAss;    // foreign key to SectorAssociation table
        long        certainty;    //"autorevolezza"
    };

    struct CollContrAndNationalEntAss {
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        long long   nationalEntAss;   // foreign key to NationalEntAssociation table
        long        certainty;        //"autorevolezza"
    };

    struct AgriWork { //Agricultural work (for Person)
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        long        agriWorkYear; //4 digit year
        long        hoursWorked;
        long        certainty;    //"autorevolezza"
    };


    struct Pension { // For Person
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        DBKey       dbKeyPerson;
        DBKey       dbKeyConcomitante;
        TipoStatoPensione        statoPensione;

        long long   sCategoryTitolare;  // Strut. del Tit.          Il valore è sempre quello corrispondente a SPI
        long        locationTitolare;  // Strut. del Tit.          //foreign key to SyndicateCategory table

        string      pensionNumber;
        long        maggiorazioneSociale;
        long long   pensionProvider;
        long long   sap;
        long long   pensionCategory;     //Type of pension // foreign key to PensionCategory table
        long long   firstPaymentDate;    //Julian date of first payment
        long long   pensionLevel;

        long long   pensionOffice;
        long long   suspensionDate;
        long long   endDate;
        string      notes;

        long        certainty;           //"autorevolezza"
    };

    // utilizzata per integrazione della pensione
    struct DIPension {
      DBKey       tableKey;
      DBKey       dbKeyPerson;
      string      pensionNumber;
      string 	  fiscalCode;		// codice fiscale della persona che ha la pensione associata
    };

    typedef sequence <DIPension>              		    DIPensionSeq;

    struct NotWorking { // For Person
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

        ChangedBy   changes;

        DBKey       dbKeyPerson;
        long long   sCategoryTitolare; // Srut. del Tit. //The syndicate category
        long        locationTitolare;  // Strut. del Tit.

        long long   startDate;
        long long   endDate;
        string      lastCompany;	//The name of the last company
        string      lastCompDivision;
        long long   notWorkingReason; //F.key to NotWorkingReason lookup table
        long long   reasonForEndingWPNW; //F.key to ReasonForEndingWPNW lookup table
        string      notes;

        long        certainty;           //"autorevolezza"

  };

    struct ConcisePerson {
      DBKey tableKey;
      long long lastChanged;
      long long lastSynchronized;
      string fiscalCode;
      string name;
      string interestTerritory;
    };

    struct ConciseCompany {
      DBKey tableKey;
      long long lastChanged;
      long long lastSynchronized;
      string partitaIVA;
      string name;
      string interestTerritory;
    };

    struct ConciseConsultant {
      DBKey tableKey;
      long long lastChanged;
      long long lastSynchronized;
      string subject;
      string interestTerritory;
    };

    struct ConciseOther {
      DBKey tableKey;
      long long lastChanged;
      long long lastSynchronized;
      string description;
      string interestTerritory;
    };

    typedef sequence <ConcisePerson>         ConcisePersonSeq;
    typedef sequence <ConciseCompany>         ConciseCompanySeq;

    // contains fields (HF = hidden fields) that are on the database but shouldn't be shown to the client application
    struct DBKeyHF {
        DBKey    dbKRec;
    };

    // contains fields (HF = hidden fields) that are on the database but shouldn't be shown to the client application
    struct DelHF {
        long     isDel; // isDeleted??
    };

    // contains fields (HF = hidden fields) that are on the database but shouldn't be shown to the client application
    struct DBKeyDelHF {
        DBKey    dbKRec;
        long     isDel; // isDeleted??
    };

    // contains fields (HF = hidden fields) that are on the database but shouldn't be shown to the client application
    struct DBKeyTableHF {
        DBKey    dbKRec;
        CDSTable tableType;
    };

    // contains fields (HF = hidden fields) that are on the database but shouldn't be shown to the client application
    struct DBKeyTableDelHF {
        DBKey    dbKRec;
        CDSTable tableType;
        long     isDel; // isDeleted??
    };


    struct CompleteLocation {
        long          id;
        long long     lGroup_id;
        long long     lGroup_locLeague;
        string        lGroup_code;
        long long     lGroup_place;
        string        lGroup_description;
        long long     lLeague_id;
        long long     lLeague_locZone;
        string        lLeague_code;
        long long     lLeague_place;
        string        lLeague_description;
        long long     lZone_id;
        long          lZone_locTerritory;
        string        lZone_code;
        long long     lZone_place;
        string        lZone_description;
        long          lTerritory_id;
        string        lTerritory_code;
        long long     lTerritory_place;
        string        lTerritory_description;
    };

    //---- end lookup (non synchronized) tables ---


    typedef sequence <Person>               PersonSeq;
    typedef sequence <Company>              CompanySeq;
    typedef sequence <CompanyDivision>      CompanyDivisionSeq;
    typedef sequence <Address>              AddressSeq;
    typedef sequence <Work>                 WorkSeq;
    typedef sequence <UnionInfo>            UnionInfoSeq;
    typedef sequence <Authorization>        AuthorizationSeq;
//    typedef sequence <Privacy>              PrivacySeq;
    typedef sequence <CompDivAndSyndCat>    CompDivAndSyndCatSeq;
    typedef sequence <Dossier>              DossierSeq;
    typedef sequence <DossierFisco>         DossierFiscoSeq;
    typedef sequence <Concomitante>         ConcomitanteSeq;
    typedef sequence <CollectiveContract>   CollectiveContractSeq;
    typedef sequence <AgriWork>             AgriWorkSeq;
    typedef sequence <Pension>              PensionSeq;
    typedef sequence <NotWorking>           NotWorkingSeq;
    typedef sequence <Card>                 CardSeq;
    typedef sequence <BreviManu>            BreviManuSeq;
    typedef sequence <AgriOrRRDS>           AgriOrRRDSSeq;
    //typedef sequence <PayLevel>             PayLevelSeq; // CESI #199
    typedef sequence <SituationInCompDiv>   SituationInCompDivSeq;
    typedef sequence <Contact>              ContactSeq;
    typedef sequence <CompDivForSyndCat>    CompDivForSyndCatSeq;
    typedef sequence <PersonForSyndCat>     PersonForSyndCatSeq;
    typedef sequence <PersonForLocation>    PersonForLocationSeq;
    typedef sequence <Consultant> ConsultantSeq;
    typedef sequence <CompDivAndConsultant> CompDivAndConsultantSeq;
    typedef sequence <Other> OtherSeq;
    typedef sequence <DatiListaOther> DatiListaOtherSeq;
    typedef sequence <Sede> SedeSeq;

    typedef sequence <OrganismoDirigente> OrganismoDirigenteSeq;
    typedef sequence <OrganismoDiRappresentanza> OrganismoDiRappresentanzaSeq;

    typedef sequence <HistoryNumberOfEmployees> HistoryNumberOfEmployeesSeq;


    interface TransactionResource : ::CosTransactions::Resource, ::CosTransactions::TransactionalObject {
        //empty at the moment
    };


    typedef sequence <Abbonamento>  AbbonamentoSeq;
    typedef sequence <CompleteAbbonamento>  CompleteAbbonamentoSeq;

    typedef sequence <boolean>  BooleanVector;
    typedef sequence <BooleanVector>  BooleanMatrix;

    typedef sequence <long> IntegerSeq;

    struct SPrivacyData {
      IntegerSeq vApplication;
      IntegerSeq vTerritory;
      BooleanMatrix mMatrix;
    };

    interface AbbonatoRecord {

        TransmissionStatus newAbbonamento   (in ApplicationName appName, in long accessLevel, in  Abbonamento abbonamento, out Abbonamento abbonamentoHolder);
        TransmissionStatus updateAbbonamento(in ApplicationName appName, in long accessLevel, in  Abbonamento abbonamento, out Abbonamento abbonamentoHolder);
        TransmissionStatus deleteAbbonamento(in ApplicationName appName, in long accessLevel, in  Abbonamento abbonamento);
        AbbonamentoSeq     getAllAbbonamenti(in ApplicationName appName, in long numMax)  raises (ILException);
        AbbonamentoSeq     getAbbonamenti   (in ApplicationName appName, in FiltroAbbonamento filtroAbbonamento, in long numMax)  raises (ILException);
        CompleteAbbonamentoSeq     getAllCompleteAbbonamenti(in ApplicationName appName, in long numMax)  raises (ILException);
        CompleteAbbonamentoSeq     getCompleteAbbonamenti   (in ApplicationName appName, in FiltroAbbonamento filtroAbbonamento, in long numMax)  raises (ILException);

    };



    //Note: this is an abstract base class we use either PersonRecord or CompanyRecord or CompanyDivisionRecord
    interface CDSRecord {

        void                    getDatabaseKey(in ApplicationName appName, out DBKey tableKey);

        TransmissionStatus      deleteRecord(in ApplicationName appName, in long accessLevel); //Delete record from database

        //The Address
        AddressSeq              getAddress(in ApplicationName appName, in long long atype) raises (ILException);
        AddressSeq              getAddressBetween(in ApplicationName appName, in long long startDate, in long long endDate) raises (ILException);
        AddressSeq              getAllAddresses(in ApplicationName appName) raises (ILException);
        AddressSeq              getAllRelatedAddressBetween(in ApplicationName appName, in long long startDate, in long long endDate) raises (ILException);
        TransmissionStatus      updateAddress(in ApplicationName appName, in long accessLevel, in Address newData, out Address theNewAddress);
        TransmissionStatus      updateAddressPlaceFromStradario(in ApplicationName appName, in long accessLevel, in Address newData, out Address theNewAddress);
        TransmissionStatus      newAddress(in ApplicationName appName, in long accessLevel, in Address newData, out Address theNewAddress);
        TransmissionStatus      newAddressPlaceFromStradario(in ApplicationName appName, in long accessLevel, in Address newData, out Address theNewAddress);
        TransmissionStatus      deleteAddress(in ApplicationName appName, in long accessLevel, in Address newData);
    };




    // enumeration per definire i valori di ricerca per l'azzonamento
    // ad esempio il valore TERRITORY indica che si vogliono tutte le
    // location che hanno quel TERRITORY, ZONE indica che si vogliono tutte le location
    // che hanno Un certo TERRITORY e una certa ZONE e così via...
    enum LocationTypeEnum { TERRITORY, ZONE, LEAGUE, GROUP };


  //An abstract interface implemented by PersonRecord
  interface IUnionInfo {
//UnionInfo

        //Methods to get UnionInfo for a Person, regardless of Work, Pension, NotWorking
        UnionInfoSeq            getAllUnionInfo(in ApplicationName appName) raises (ILException);
//        UnionInfoSeq            getUnionInfo(in long structure); non viene utilizzato
        UnionInfoSeq            getAllUnionInfoForSCategoryAndLocationAndLocationType(in ApplicationName appName, in long long sCategory, in long location, in LocationTypeEnum locType) raises (ILException);
        UnionInfoSeq            getUnionInfoBetween(in ApplicationName appName, in long long startDate, in long long endDate) raises (ILException);
        TransmissionStatus      getLastUnionInfo(in ApplicationName appName, out UnionInfo uInfo);
        TransmissionStatus      getLastUnionInfoWithDate(in ApplicationName appName, in long long dataRif, out UnionInfo uInfo);
        TransmissionStatus      getFirstUnionInfo(in ApplicationName appName, out UnionInfo uInfo);

        WorkSeq                 getAllWorkForUnionInfo(in ApplicationName appName, in UnionInfo uInfo) raises (ILException);
        PensionSeq              getAllPensionForUnionInfo(in ApplicationName appName, in UnionInfo uInfo) raises (ILException);
        NotWorkingSeq           getAllNotWorkingForUnionInfo(in ApplicationName appName, in UnionInfo uInfo) raises (ILException);
        PraticaSeq              getAllPraticaForUnionInfo(in ApplicationName appName, in UnionInfo uInfo) raises (ILException);

        //Work, Pension, NotWorking specific UnionInfo methods
        UnionInfoSeq            getAllUnionInfoForWork(in ApplicationName appName, in Work theWork) raises (ILException);
        UnionInfoSeq            getAllUnionInfoForPension(in ApplicationName appName, in Pension thePension) raises (ILException);
        UnionInfoSeq            getAllUnionInfoForNotWorking(in ApplicationName appName, in NotWorking nw) raises (ILException);
        UnionInfoSeq            getAllUnionInfoForPratica(in ApplicationName appName, in Pratica pra) raises (ILException);

        //Methods to insert and update UnionInfo
        TransmissionStatus      deleteUnionInfo(in ApplicationName appName, in long accesslevel, in UnionInfo deleteThisUnionInfo);
        TransmissionStatus      updateUnionInfo(in ApplicationName appName, in long accessLevel, in UnionInfo newUnionInfo, out UnionInfo theNewUnionInfo);
        TransmissionStatus      newUnionInfoForWork(in ApplicationName appName, in long accessLevel, in UnionInfo newUnionInfo, in Work theWork, out UnionInfo theNewUnionInfo);
        TransmissionStatus      newUnionInfoForPension(in ApplicationName appName, in long accessLevel, in UnionInfo newUnionInfo, in Pension thePension, out UnionInfo theNewUnionInfo);
        TransmissionStatus      newUnionInfoForNotWorking(in ApplicationName appName, in long accessLevel, in UnionInfo newUnionInfo, in NotWorking theNotWorking, out UnionInfo theNewUnionInfo);
        TransmissionStatus      newUnionInfoForPratica(in ApplicationName appName, in long accessLevel, in UnionInfo newUnionInfo, in Pratica thePratica, out UnionInfo theNewUnionInfo);

        //link a UnionInfo to a Work
        TransmissionStatus      linkUnionInfoForWork(in ApplicationName appName, in long accessLevel, in UnionInfo newUnionInfo, in Work theWork);
        TransmissionStatus      unlinkUnionInfoForWork(in ApplicationName appName, in long accessLevel, in UnionInfo newUnionInfo, in Work theWork);


         //Card is for UnionInfo
        CardSeq                 getAllCards(in ApplicationName appName)  raises (ILException);
//        CardSeq                 getCard(in long structure); non viene utilizzato
        CardSeq                 getAllCardForSCategoryAndLocationAndLocationType(in ApplicationName appName, in long long sCategory, in long location, in LocationTypeEnum locType) raises (ILException);
        CardSeq                 getAllCardsForYear(in ApplicationName appName, in long year) raises (ILException);
        Card                    getCardForUnionInfo(in ApplicationName appName, in UnionInfo uInfo) raises (ILException);
        TransmissionStatus      updateCard(in ApplicationName appName, in long accessLevel, in Card newCard, out Card theNewCard);
        TransmissionStatus      newCard(in ApplicationName appName, in long accessLevel, in Card newCard, in UnionInfo uInfo, out Card theNewCard);
        TransmissionStatus      deleteCard(in ApplicationName appName, in long accessLevel, in Card card, in UnionInfo uInfo);

        //BreviManu is related to UnionInfo
        BreviManuSeq            getAllBreviManuForUnionInfo(in ApplicationName appName, in UnionInfo uInfo) raises (ILException);
        TransmissionStatus      updateBreviManu(in ApplicationName appName, in long accessLevel, in BreviManu newBreviManu, out BreviManu theNewBreviManu);
        TransmissionStatus      newBreviManu(in ApplicationName appName, in long accessLevel, in BreviManu newBreviManu, in UnionInfo uInfo, out BreviManu theNewBreviManu);
        TransmissionStatus      deleteBreviManu(in ApplicationName appName, in long accessLevel, in BreviManu newBreviManu, in UnionInfo uInfo);

        //AgriOrRRDS is related to UnionInfo
        AgriOrRRDSSeq           getAllAgriOrRRDSForUnionInfo(in ApplicationName appName, in UnionInfo uInfo) raises (ILException);
        TransmissionStatus      updateAgriOrRRDS(in ApplicationName appName, in long accessLevel, in AgriOrRRDS newAgriOrRRDS, out AgriOrRRDS theNewAgriOrRRDS);
        TransmissionStatus      newAgriOrRRDS(in ApplicationName appName, in long accessLevel, in AgriOrRRDS newAgriOrRRDS, in UnionInfo uInfo, out AgriOrRRDS theNewAgriOrRRDS);
        TransmissionStatus      deleteAgriOrRRDS(in ApplicationName appName, in long accessLevel, in AgriOrRRDS newAgriOrRRDS, in UnionInfo uInfo);

  };

    interface SedeRecord : CDSRecord {
        Sede                    getSedeData();
        TransmissionStatus      updateSedeData(in ApplicationName appName, in long accessLevel, in Sede newData, out Sede theNewData);
        TransmissionStatus      deleteSede(in ApplicationName appName, in long accessLevel, in Sede newData);

        WorkSeq                 getAllWork(in ApplicationName appName) raises (ILException);
        TransmissionStatus      linkWork(in ApplicationName appName, in long accessLevel, in Work work);
        TransmissionStatus      unlinkWork(in ApplicationName appName, in long accessLevel, in Work work);

    };

    // interfaccia che definisce le azioni per il Consulente
    interface ConsultantRecord : CDSRecord, AbbonatoRecord {

        TransmissionStatus updateConsultantData(in ApplicationName appName, in long accessLevel, in Consultant consultant, out Consultant consultantHolder);
        Consultant getConsultantData(in ApplicationName appName) raises (ILException);

    };

    // interfaccia che definisce le azioni per l'Other. Oggetto generico che comprende tutti quei soggetti
    // che non ricadono nelle altre categorie.
    interface OtherRecord : CDSRecord, AbbonatoRecord {

        TransmissionStatus updateOtherData(in ApplicationName appName, in long accessLevel, in Other other, out Other otherHolder);
        Other getOtherData(in ApplicationName appName) raises (ILException);
    };

    interface PersonRecord : CDSRecord, IUnionInfo, AbbonatoRecord {
        //Person data
        Person                  getPersonData();
        PersonTwo               getPersonTwoData();
        TransmissionStatus      updatePersonData(in ApplicationName appName, in long accessLevel, in Person newData, out Person theNewPerson);
        TransmissionStatus      updatePersonTwoData(in ApplicationName appName, in long accessLevel, in PersonTwo newData, out PersonTwo theNewPerson);

        //ProfPerson
        //returns true if we have a ProfPerson, false = we have returned a SafeProfPerson
        boolean                 getProfPerson(in ApplicationName appName, out ProfPerson p) raises (ILException);
        TransmissionStatus      updateProfPerson(in ApplicationName appName, in long accessLevel, in ProfPerson newData, out ProfPerson theNewProfPerson);
        TransmissionStatus      newProfPerson(in ApplicationName appName, in long accessLevel, in ProfPerson newData, out ProfPerson theNewProfPerson);
        TransmissionStatus      deleteProfPerson(in ApplicationName appName, in long accessLevel, in ProfPerson newData);

        //ForeignPerson
        //returns true if we have a ForeignPerson, false = we have returned a SafeForeignPerson
        boolean                 getForeignPerson(in ApplicationName appName, out ForeignPerson p) raises (ILException);
        TransmissionStatus      updateForeignPerson(in ApplicationName appName, in long accessLevel, in ForeignPerson newData, out ForeignPerson theNewFPerson);
        TransmissionStatus      newForeignPerson(in ApplicationName appName, in long accessLevel, in ForeignPerson newData, out ForeignPerson theNewFPerson);
        TransmissionStatus      deleteForeignPerson(in ApplicationName appName, in long accessLevel, in ForeignPerson newData);


        //The Work
        WorkSeq                 getAllWork(in ApplicationName appName) raises (ILException);
        WorkSeq                 getAllActiveWork(in ApplicationName appName) raises (ILException); //active work is work that have an endDate > now
        WorkSeq                 getWorkForCompanyDivision(in ApplicationName appName, in DBKey tableKey) raises (ILException);
        WorkSeq                 getWorkBetween(in ApplicationName appName, in long long startDate, in long long endDate) raises (ILException);
        WorkSeq                 getAllWorkForWork(in ApplicationName appName, in Work parent) raises (ILException);   // ricerca tutti i figli di questo lavoro padre
        WorkSeq                 getAllWorkForPratica(in ApplicationName appName, in Pratica thePratica) raises (ILException);   // ricerca tutti i figli di questo lavoro padre

        //New/updated work
        TransmissionStatus      updateWork(in ApplicationName appName, in long accessLevel, in Work updatedWork, out Work theNewWork);
        TransmissionStatus      newWork(in ApplicationName appName, in long accessLevel, in Work newWork, out Work theNewWork);
        TransmissionStatus      deleteWork(in ApplicationName appName, in long accessLevel, in Work newWork);

        // Privacy
        TransmissionStatus      setPrivacyMatrix(in ApplicationName appName, in SPrivacyData privacyData, out Person personHolder);
        TransmissionStatus      getPrivacyMatrix(in ApplicationName appName, out SPrivacyData privacyData);

        //Dossier
        DossierSeq              getAllDossiers(in ApplicationName appName) raises (ILException);
        DossierSeq              getAllDossiersWithCodicePratica(in ApplicationName appName, in string codicePratica, in long numMax) raises (ILException);
        DossierSeq              getDossiersForApplication(in ApplicationName application, in boolean openOnly) raises (ILException);
        TransmissionStatus      updateDossier(in ApplicationName appName, in long accessLevel, in Dossier newDossier, out Dossier theNewDossier);
        TransmissionStatus      newDossier(in ApplicationName appName, in long accessLevel, in Dossier newDossier, out Dossier theNewDossier);
        TransmissionStatus      deleteDossier(in ApplicationName appName, in long accessLevel, in Dossier newDossier);

        //Concomitante
        Concomitante            getConcomitanteForDossier(in ApplicationName application, in Dossier dossier) raises (ILException);
        TransmissionStatus      updateConcomitante(in ApplicationName appName, in long accessLevel, in Concomitante newConcomitante, out Concomitante theNewConcomitante);
        TransmissionStatus      newConcomitante(in ApplicationName appName, in long accessLevel, in Concomitante newConcomitante, out Concomitante theNewConcomitante);
        TransmissionStatus      deleteConcomitante(in ApplicationName appName, in long accessLevel, in Concomitante newConcomitante);

        //DossierFisco
        DossierFiscoSeq         getAllDossierFisco(in ApplicationName appName) raises (ILException);
        TransmissionStatus      updateDossierFisco(in ApplicationName appName, in long accessLevel, in DossierFisco newDossierFisco, out DossierFisco theNewDossierFisco);
        TransmissionStatus      newDossierFisco(in ApplicationName appName, in long accessLevel, in DossierFisco newDossierFisco, out DossierFisco theNewDossierFisco);
        TransmissionStatus      deleteDossierFisco(in ApplicationName appName, in long accessLevel, in DossierFisco newDossierFisco);

        EsistenzaPratiche       getEsistenzaPratiche(in ApplicationName appName) raises (ILException);

        //AgriWork
        AgriWorkSeq             getAllAgriWork(in ApplicationName appName) raises (ILException);
        AgriWorkSeq             getAgriWorkForYear(in ApplicationName appName, in long year) raises (ILException);
        TransmissionStatus      updateAgriWork(in ApplicationName appName, in long accessLevel, in AgriWork newAgriWork, out AgriWork theNewAgriWork);
        TransmissionStatus      newAgriWork(in ApplicationName appName, in long accessLevel, in AgriWork newAgriWork, out AgriWork theNewAgriWork);

        //Pension
        PensionSeq              getAllPensions(in ApplicationName appName) raises (ILException);
        PensionSeq              getAllActivePensions(in ApplicationName appName) raises (ILException); //active Pension is pension that have an endDate > now
        TransmissionStatus      updatePension(in ApplicationName appName, in long accessLevel, in Pension newPension, out Pension theNewPension);
        TransmissionStatus      newPension(in ApplicationName appName, in long accessLevel, in Pension newPension, out Pension theNewPension);
        TransmissionStatus      deletePension(in ApplicationName appName, in long accessLevel, in Pension newPension);

        //Not working
        NotWorkingSeq           getAllNotWorking(in ApplicationName appName) raises (ILException);
        NotWorkingSeq           getAllActiveNotWorking(in ApplicationName appName) raises (ILException);
        TransmissionStatus      updateNotWorking(in ApplicationName appName, in long accessLevel, in NotWorking newNotWorking, out NotWorking theNewNotWorking);
        TransmissionStatus      newNotWorking(in ApplicationName appName, in long accessLevel, in NotWorking newNotWorking, out NotWorking theNewNotWorking);
        TransmissionStatus      deleteNotWorking(in ApplicationName appName, in long accessLevel, in NotWorking newNotWorking);

        //PersonForSyndCat is Syndicate Category specific data for the Person
        PersonForSyndCatSeq     getAllPersonForSyndCat(in ApplicationName appName) raises (ILException);
        PersonForSyndCatSeq     getPersonForSyndCat(in ApplicationName appName, in long long sCategory) raises (ILException);
        PersonForSyndCatSeq     getPersonForSyndCatAndLoc(in ApplicationName appName, in long long sCategory, in long location) raises (ILException);
        TransmissionStatus      updatePersonForSyndCat(in ApplicationName appName, in long accessLevel, in PersonForSyndCat newPersonForSyndCat, out PersonForSyndCat theNewPersonForSyndCat);
        TransmissionStatus      newPersonForSyndCat(in ApplicationName appName, in long accessLevel, in PersonForSyndCat newPersonForSyndCat, out PersonForSyndCat theNewPersonForSyndCat);
        TransmissionStatus      deletePersonForSyndCat(in ApplicationName appName, in long accessLevel, in PersonForSyndCat deleteThisPersonForSyndCat);

        //PersonForLocation is Location specific data for the Person
        PersonForLocationSeq    getAllPersonForLocation(in ApplicationName appName, in long numMax) raises (ILException);
        PersonForLocationSeq    getPersonForLocation(in ApplicationName appName, in long location, in long numMax) raises (ILException);
        TransmissionStatus      updatePersonForLocation(in ApplicationName appName, in long accessLevel, in PersonForLocation newPersonForLocation, out PersonForLocation theNewPersonForLocation);
        TransmissionStatus      newPersonForLocation(in ApplicationName appName, in long accessLevel, in PersonForLocation newPersonForLocation, out PersonForLocation theNewPersonForLocation);
        TransmissionStatus      deletePersonForLocation(in ApplicationName appName, in long accessLevel, in PersonForLocation deleteThisPersonForLocation);

        //Pension, Work, NotWorking related information
        PensionSeq              getPensionWithConcomitante(in ApplicationName appName, in DBKey dbKeyConcomitante) raises (ILException);
        TransmissionStatus      getWorkRelatedInformation(in ApplicationName appName, in Work theWork, out string theCompanyName, out CompleteLocation completeLocation);
        TransmissionStatus      getPensionRelatedInformation(in ApplicationName appName, in Pension thePension, out string theCompanyName, out CompleteLocation completeLocation);
        TransmissionStatus      getNotWorkingRelatedInformation(in ApplicationName appName, in NotWorking theNW, out CompleteLocation completeLocation);


        //OrganismoDirigente
        OrganismoDirigenteSeq   getAllOrganismoDirigente (in ApplicationName appName) raises (ILException);
        OrganismoDirigente      getOrganismoDirigenteWithKey (in ApplicationName appName, in DBKey key) raises (ILException);
        TransmissionStatus      updateOrganismoDirigente (in ApplicationName appName, in long accessLevel, in OrganismoDirigente newOrganismoDirigente, out OrganismoDirigente theNewOrganismoDirigente);
        TransmissionStatus      newOrganismoDirigente    (in ApplicationName appName, in long accessLevel, in OrganismoDirigente newOrganismoDirigente, out OrganismoDirigente theNewOrganismoDirigente);
        TransmissionStatus      deleteOrganismoDirigente (in ApplicationName appName, in long accessLevel, in OrganismoDirigente deleteOrganismoDirigente);

        //OrganismoDiRappresentanza
        OrganismoDiRappresentanzaSeq  getAllOrganismoDiRappresentanza (in ApplicationName appName) raises (ILException);
        OrganismoDiRappresentanza     getOrganismoDiRappresentanzaWithKey (in ApplicationName appName,  in DBKey key) raises (ILException);
        TransmissionStatus            updateOrganismoDiRappresentanza (in ApplicationName appName, in long accessLevel, in OrganismoDiRappresentanza newOrganismoDiRappresentanza, out OrganismoDiRappresentanza theNewOrganismoDiRappresentanza);
        TransmissionStatus            newOrganismoDiRappresentanza    (in ApplicationName appName, in long accessLevel, in OrganismoDiRappresentanza newOrganismoDiRappresentanza, out OrganismoDiRappresentanza theNewOrganismoDiRappresentanza);
        TransmissionStatus            deleteOrganismoDiRappresentanza (in ApplicationName appName, in long accessLevel, in OrganismoDiRappresentanza deleteOrganismoDiRappresentanza);

        // incarichi RSU
        IncaricoRSUSeq                getAllIncaricoRSU(in ApplicationName appName) raises (ILException);
        IncaricoRSU                   getIncaricoRSUWithKey (in ApplicationName appName,  in DBKey key) raises (ILException);
        IncaricoRSUCompleto           getIncaricoRSUCompletoWithKey (in ApplicationName appName,  in DBKey key) raises (ILException);
        TransmissionStatus            updateIncaricoRSU (in ApplicationName appName, in long accessLevel, in IncaricoRSU newIncaricoRSU, out IncaricoRSU theNewIncaricoRSU);
        TransmissionStatus            newIncaricoRSU    (in ApplicationName appName, in long accessLevel, in IncaricoRSU newIncaricoRSU, out IncaricoRSU theNewIncaricoRSU);
        TransmissionStatus            deleteIncaricoRSU (in ApplicationName appName, in long accessLevel, in IncaricoRSU deleteIncaricoRSU);

        // incarichi locali
        IncaricoOrganismoLocaleSeq    getAllIncaricoOrganismoLocale(in ApplicationName appName) raises (ILException);
        IncaricoOrganismoLocale       getIncaricoOrganismoLocaleWithKey (in ApplicationName appName,  in DBKey key) raises (ILException);
        TransmissionStatus            updateIncaricoOrganismoLocale (in ApplicationName appName, in long accessLevel, in IncaricoOrganismoLocale newIncaricoOrganismoLocale, out IncaricoOrganismoLocale theNewIncaricoOrganismoLocale);
        TransmissionStatus            newIncaricoOrganismoLocale    (in ApplicationName appName, in long accessLevel, in IncaricoOrganismoLocale newIncaricoOrganismoLocale, out IncaricoOrganismoLocale theNewIncaricoOrganismoLocale);
        TransmissionStatus            deleteIncaricoOrganismoLocale (in ApplicationName appName, in long accessLevel, in IncaricoOrganismoLocale deleteIncaricoOrganismoLocale);

        long getNumeroIncarichi(in ApplicationName appName) raises (ILException);

        // metodo per ricavare la lista di tutti gli incarichi della persona
        // viene restituito un oggetto con i soli dati da visualizzare nella lista
        DatiIncaricoSeq               getAllDatiIncarico(in ApplicationName appName, in FiltroDatiIncarico filtro, in long maxResults) raises (ILException);

        //Deleghe
        Classificazione	getAllDelegaINPS(in ApplicationName appName, in long numMax, in DBKey pensione) raises(ILException);
        Classificazione getAllDelegaTesoro(in ApplicationName appName, in long numMax, in DBKey pensione) raises(ILException);
        Classificazione getAllDelegaIPOST(in ApplicationName appName, in long numMax, in DBKey pensione) raises(ILException);
        Classificazione getAllAggiornamentoDelegaINPS(in ApplicationName appName, in long numMax, in DBKey pensione) raises(ILException);

        //Deleghe - Ricerca del territorio data una persona
        long getLocTerritory(in ApplicationName appName) raises(ILException);
        boolean isNotInTerritory(in ApplicationName appName, in long territory) raises(ILException);

        // Pratich DS / mob

        // Gestione Pratica
        TransmissionStatus newPratica   (in ApplicationName appName, in long accessLevel, in Pratica newPratica, out Pratica theNewPratica);
        TransmissionStatus updatePratica(in ApplicationName appName, in long accessLevel, in Pratica newPratica, out Pratica theNewPratica);
        TransmissionStatus deletePratica(in ApplicationName appName, in long accessLevel, in Pratica newPratica);

        PraticaSeq getAllPratica(in ApplicationName appName, in long numMax) raises(ILException);
        PraticaSeq getAllPraticaWithCodicePratica(in ApplicationName appName, in string codicePratica, in long numMax) raises (ILException);
        PraticaSeq getAllPraticaForWork(in ApplicationName appName, in Work theWork) raises(ILException);

        //link a Pratica to a Work
        TransmissionStatus      linkPraticaForWork(in ApplicationName appName, in long accessLevel, in Pratica thePratica, in Work theWork);
        TransmissionStatus      unlinkPraticaForWork(in ApplicationName appName, in long accessLevel, in Pratica thePratica, in Work theWork);


        //Gestione materie di insegnamento per il lavoro
        TransmissionStatus      newWorkForMateriaIns   (in ApplicationName appName, in long accessLevel, in WorkForMateriaIns newWDForMateriaIns, out WorkForMateriaIns theNewWDForMateriaIns);
        TransmissionStatus      updateWorkForMateriaIns(in ApplicationName appName, in long accessLevel, in WorkForMateriaIns newWDForMateriaIns, out WorkForMateriaIns theNewWDForMateriaIns);
        TransmissionStatus      deleteWorkForMateriaIns(in ApplicationName appName, in long accessLevel, in WorkForMateriaIns newWDForMateriaIns);
        WorkForMateriaInsSeq getAllMateriaForWork(in ApplicationName appName, in Work theWork) raises(ILException);

        // Stato iscrizione
        string getStatoIscritto(in ApplicationName appName, in long long dataRif) raises(ILException);

    };

    // Struttura per contenere i totali dei membri dei sindacati CGIL,UIL,CISL,UNITARY
    // associati a una certa CompanyDivision
    struct MemberOfSyndacate {
        long      totCGILMember;
        long      totUILMember;
        long      totCISLMember;
        long      totUNITARYMember;

    };

    // Struttura per l'implementazione del punto AO.mdb 158
    // La struttura è una composizione di alcuni campi
    // delle struct Person, WorkDone, CompanyDivision e UnionInfo
    // rappresenta i dati di un lavoratore
    struct Worker {
      DBKey           dbKeyCompanyDivision;           // Chiave Unità locale
      string          nameCompanyDivision;            // nome Unità Locale
      DBKey           dbKeyCompany;                   // Chiave Company
      DBKey           dbKeyPerson;                    // Chiave del lavoratore
      string          namePerson;                     // nome del lavoratore
      string          surnamePerson;                  // cognome del lavoratore
      string          fiscalCodePerson;               // codice fiscale della persona
      DBKey           dbKeyWorkDone;                  // Chiave del rapporto di lavoro
      long            dipIndipOSommin;               // tipo di lavoro (tradizionale, Temporaneo, Atipico)
      long long       workStatus;                     // stato del rapporto di lavoro
      long long       workStatusDate;                 // data di riferimento per lo stato del rapporto di lavoro
      long long       startDateWork;                  // data di inizio del rapporto di lavoro
      long long       endDateWork;                    // data di fine del rapporto di lavoro
      long            isSomministratore;                // flag per indicare se il rapporto di lavoro è somministratore
      long long       sCategoryWork;                  // sCategoryTitolare del rapporto di lavoro
      long            location;                       // azzonamento dell'Unità Locale
      DBKey           dbKeyUnionInfo;                 // chiave dell'Iscrizione
      long long       uiStartDate;                    // data di inizio iscrizione
      long long       uiEndDate;                      // data di fine iscrizione
      long long       payMethod;                      // payment Method (brevi manu o delega ..)
      DBKey           dbKeyCard;                      // chiave della tessera
      long            lastCardYear;                   // ultimo anno di tesseramento
    };


    struct StoricoPeriodoNonIscritti {
      DBKey           tableKey;
      long long       lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
      long long       lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT
      DBKey           dbKeyCompanyDivision;
      long long       sCategory;
      long long       startDatePeriod;
      long long       endDatePeriod;
    };

    struct FiltroWorker {
      long long       workStatus;                     // stato del rapporto di lavoro
      long long       workStatusDate;                 // data di riferimento per lo stato del rapporto di lavoro
      long long       startDateWork;                  // data di inizio del rapporto di lavoro
      long long       endDateWork;                    // data di fine del rapporto di lavoro
      long long       sCategoryWork;                  // sCategoryTitolare del rapporto di lavoro
      long            location;                       // azzonamento dell'Unità Locale
      DBKey           dbKeyUnionInfo;                 // chiave dell'Iscrizione
      long long       uiStartDate;                    // data di inizio iscrizione
      long long       uiEndDate;                      // data di fine iscrizione
      long            lastCardYear;
    };

    typedef sequence <Worker> WorkerSeq;

    struct ReportAbbonamenti {

        long        idReport;   // Chiave singola
//        long long   lastChanged;       // non li metterei readonly -- seconds since 1/1/1970 00:00 GMT
//        long long   lastSynchronized;  // non li metterei readonly -- seconds since 1/1/1970 00:00 GMT

//        ChangedBy   changes;
        // al limite metterei solo l'informazione di chi ha fatto il report
        string    newCod_D;
        string    contro_D;
        string    regione;
        string    comprens;
        string    zona;
        string    nome;
        string    ind1;
        string    ind2;
        string    CAP;
        string    comune;
        string    provincia;
        string    tipoAbb;
        string    period;
        string    scadenza;
        long      copie;
        string    cancellato;
        long      codAbb;
        string    golin;
        long long dataMovim;   // dataMovim
        string    codMovim;
        string    legaCod;
        string    legaNome;
        long      statoAbbonamento;
    };

    struct ReportAbbonamentiRoma {

        long        idReport;
//        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
//        long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

//        ChangedBy   changes;
        string    newCod_D;
        string    contro_D;
        string    regione;
        string    comprens;
        string    zona;
        string    nome;
        string    ind1;
        string    ind2;
        string    CAP;
        string    comune;
        string    provincia;
        string    tipoAbb;
        string    period;
        string    scadenza;
        long      copie;
        string    cancellato;
        long      codAbb;
        string    golin;
        long long dataMovim;
        string    codMovim;
        string    oldNew;
        string    errori;
        string    legaCod;
        string    legaNome;
    };

    struct IntestazioneVersamenti {
      string      codiceInstallazione;
      string      codiceAzienda;
      string      codiceULCat;
      string      annoContabile;
      string      tipoVersamento;

    };

    struct Versamento {
      long       mese;
      string     valuta;
      float      importo;
      long long  dataVersamento;
      string     versatoCon;
      long       versanti;
      long       dipendenti;
      string     modalitaPagamento;
      string     estrattoConto;
      string     numeroEstrattoConto;
      boolean    contabilizzata;
    };

    typedef sequence <Versamento>          VersamentoSeq;

    struct Versamenti {
      IntestazioneVersamenti   intestazione;
      VersamentoSeq            listaVersamento;
    };


    typedef sequence <ReportAbbonamenti>          ReportAbbonamentiSeq;
    typedef sequence <ReportAbbonamentiRoma>      ReportAbbonamentiRomaSeq;

    interface CollectiveContractRecord {
        CollectiveContract      getCollectiveContractData();
        TransmissionStatus      updateCollectiveContractData(in ApplicationName appName, in long accessLevel, in CollectiveContract newData, out CollectiveContract theNewData);
        TransmissionStatus      deleteRecord(in ApplicationName appName, in long accessLevel); //Delete record from database

        //LocalEntAssForCollContr
        LocalEntAssForCollContrSeq getAllLocalEntAssForCollContr(in ApplicationName appName) raises (ILException);
        TransmissionStatus      updateLocalEntAssForCollContr(in ApplicationName appName, in long accesslevel, in LocalEntAssForCollContr newLocalEntAssForCollContr, out LocalEntAssForCollContr theNewLocalEntAssForCollContr);
        TransmissionStatus      newLocalEntAssForCollContr(in ApplicationName appName, in long accesslevel, in LocalEntAssForCollContr newLocalEntAssForCollContr, out LocalEntAssForCollContr theNewLocalEntAssForCollContr);
        TransmissionStatus      deleteLocalEntAssForCollContr(in ApplicationName appName, in long accesslevel, in LocalEntAssForCollContr theLocalEntAssForCollContr);

        // Association with ContractSector
        TransmissionStatus linkContractSector(in ApplicationName appName, in long accesslevel, in long long contractSectorKey);
        TransmissionStatus unlinkContractSector(in ApplicationName appName, in long accesslevel, in long long contractSectorKey);
        TransmissionStatus linkAllContractSector(in ApplicationName appName, in long accesslevel, in LongLongSeq contractSectorKey);
        TransmissionStatus unlinkAllContractSector(in ApplicationName appName, in long accesslevel, in LongLongSeq contractSectorKey);
        LongLongSeq getAllContractSector(in ApplicationName appName, in long numMax) raises(ILException);

        // Association with SectorAssociation
        TransmissionStatus linkSectorAssociation(in ApplicationName appName, in long accesslevel, in long long sectorAssociationKey);
        TransmissionStatus unlinkSectorAssociation(in ApplicationName appName, in long accesslevel, in long long sectorAssociationKey);
        TransmissionStatus linkAllSectorAssociation(in ApplicationName appName, in long accesslevel, in LongLongSeq sectorAssociationKey);
        TransmissionStatus unlinkAllSectorAssociation(in ApplicationName appName, in long accesslevel, in LongLongSeq sectorAssociationKey);
        LongLongSeq getAllSectorAssociation(in ApplicationName appName, in long numMax) raises(ILException);

        // Association with NationalEntAssociation
        TransmissionStatus linkNationalEntAssociation(in ApplicationName appName, in long accesslevel, in long long nationalEntAssociationKey);
        TransmissionStatus unlinkNationalEntAssociation(in ApplicationName appName, in long accesslevel, in long long nationalEntAssociationKey);
        TransmissionStatus linkAllNationalEntAssociation(in ApplicationName appName, in long accesslevel, in LongLongSeq nationalEntAssociationKey);
        TransmissionStatus unlinkAllNationalEntAssociation(in ApplicationName appName, in long accesslevel, in LongLongSeq nationalEntAssociationKey);
        LongLongSeq getAllNationalEntAssociation(in ApplicationName appName, in long numMax) raises(ILException);

    };


    interface CompanyDivisionRecord : CDSRecord, AbbonatoRecord {
        CompanyDivision         getCompanyDivisionData();
        TransmissionStatus      updateCompanyDivisionData(in ApplicationName appName, in long accessLevel, in CompanyDivision newData, out CompanyDivision theNewData);

        long                    calculateNumberOfEmployees(in ApplicationName appName, in long long aDate) raises (ILException);
        long                    calculateNumberOfMembers(in ApplicationName appName, in long long aDate) raises (ILException);
        long                    calculateCGILMembers(in ApplicationName appName) raises (ILException);
        long                    calculateUILMembers(in ApplicationName appName) raises (ILException);
        long                    calculateCISLMembers(in ApplicationName appName) raises (ILException);
        long                    calculateUNITARYMembers(in ApplicationName appName) raises (ILException);
        MemberOfSyndacate       calculateMembersOfSyndacate(in ApplicationName appName) raises (ILException);
        long                    calculateNumberOfMembersForSyndicateCategory(in ApplicationName appName, in long long aDate, in long long sCategory) raises (ILException);

        PersonSeq               getMembersForSyndicateCategory(in ApplicationName appName, in long long aDate, in long long sCategory) raises (ILException);

        boolean                 inCrisis(in ApplicationName appName) raises (ILException);

        //The company category
        LongLongSeq             getAllSyndicateCategories(in ApplicationName appName) raises (ILException);
        TransmissionStatus      linkSyndicateCategory(in ApplicationName appName, in long accesslevel, in long long sCategory);
        TransmissionStatus      unlinkSyndicateCategory(in ApplicationName appName, in long accesslevel, in long long sCategory);


        //The type of activity
        LongLongSeq             getAllTypeOfActivity(in ApplicationName appName) raises (ILException);
        TransmissionStatus      linkTypeOfActivity(in ApplicationName appName, in long accesslevel, in long long typeOfActivity);
        TransmissionStatus      unlinkTypeOfActivity(in ApplicationName appName, in long accesslevel, in long long TypeOfActivity);

        //The collective contract
        CollectiveContractSeq   getAllCollectiveContractsForSyndicateCategories(in ApplicationName appName, in LongLongSeq sCategory) raises (ILException);

        //link creates a new record in CompDivAndCollContr, unlink deletes it
        TransmissionStatus      linkCollectiveContract(in ApplicationName appName, in long accesslevel, in CollectiveContract theCollectiveContract, in CompDivForSyndCat theCompDivForSyndCat);
        TransmissionStatus      unlinkCollectiveContract(in ApplicationName appName, in long accesslevel, in CollectiveContract theCollectiveContract, in CompDivForSyndCat theCompDivForSyndCat);


        //SituationInCompDiv
        SituationInCompDivSeq   getAllSituationInCompDiv(in ApplicationName appName) raises (ILException);
        SituationInCompDivSeq   getSituationInCompDivBetween(in ApplicationName appName, in long long startDate, in long long endDate) raises (ILException);
        TransmissionStatus      updateSituationInCompDiv(in ApplicationName appName, in long accesslevel, in SituationInCompDiv newSituationInCompDiv, out SituationInCompDiv theNewSituationInCompDiv);
        TransmissionStatus      newSituationInCompDiv(in ApplicationName appName, in long accesslevel, in SituationInCompDiv newSituationInCompDiv, out SituationInCompDiv theNewSituationInCompDiv);
        TransmissionStatus      deleteSituationInCompDiv(in ApplicationName appName, in long accesslevel, in SituationInCompDiv newSituationInCompDiv);

        //Contact
        ContactSeq              getAllContacts(in ApplicationName appName) raises (ILException);
        ContactSeq              getAllContactsForRecType(in ApplicationName appName, in ContactRecType recType) raises (ILException);
        ContactSeq              getAllContactsForRecTypeForSyndCat(in ApplicationName appName, in ContactRecType recType, in long long sCategory) raises (ILException);
        TransmissionStatus      updateContact(in ApplicationName appName, in long accesslevel, in Contact newConsultant, out Contact theNewContact);
        TransmissionStatus      newContact(in ApplicationName appName, in long accesslevel, in Contact newConsultant, out Contact theNewContact);
        TransmissionStatus      deleteContact(in ApplicationName appName, in long accesslevel, in Contact deleteThisContact);

        //Consultant
        TransmissionStatus newCompDivAndConsultant(in ApplicationName appName, in long accessLevel, in CompDivAndConsultant compDivAndConsultant, out CompDivAndConsultant compDivAndConsultantHolder);
        TransmissionStatus updateCompDivAndConsultant(in ApplicationName appName, in long accessLevel, in CompDivAndConsultant compDivAndConsultant, out CompDivAndConsultant compDivAndConsultantHolder);
        TransmissionStatus deleteCompDivAndConsultant(in ApplicationName appName, in long accessLevel, in CompDivAndConsultant compDivAndConsultant);
        CompDivAndConsultantSeq getAllCompDivAndConsultant(in ApplicationName appName, in long numMax) raises (ILException);
        CompDivAndConsultantSeq getCompDivAndConsultantWithConsultant(in ApplicationName appName, in Consultant consultant, in long numMax) raises (ILException);


        //CompDivForSyndCat is Syndicate Category specific data for the CompanyDivision
        CompDivForSyndCatSeq    getAllCompDivForSyndCat(in ApplicationName appName) raises (ILException);
        boolean                 getCompDivForSyndCat(in ApplicationName appName, in long long sCategory, out CompDivForSyndCat cHolder) raises (ILException);
        TransmissionStatus      updateCompDivForSyndCat(in ApplicationName appName, in long accesslevel, in CompDivForSyndCat newCompDivForSyndCat, out CompDivForSyndCat theNewCompDivForSyndCat);
        TransmissionStatus      newCompDivForSyndCat(in ApplicationName appName, in long accesslevel, in CompDivForSyndCat newCompDivForSyndCat, out CompDivForSyndCat theNewCompDivForSyndCat);
        TransmissionStatus      deleteCompDivForSyndCat(in ApplicationName appName, in long accesslevel, in CompDivForSyndCat deleteThisCompDivForSyndCat);
        LongLongSeq             getAllContractSector(in ApplicationName appName, in CompDivForSyndCat c) raises (ILException);
        LongLongSeq             getAllContractSectorWithContract(in ApplicationName appName, in CompDivForSyndCat c, in DBKey dbKeyContract) raises (ILException);
        TransmissionStatus      linkContractSector(in ApplicationName appName, in long accessLevel, in CompDivForSyndCat c, in long long contractSector);
        TransmissionStatus      unlinkContractSector(in ApplicationName appName, in long accessLevel, in CompDivForSyndCat c, in long long longcontractSector);
        TransmissionStatus      aggiornaSettoriContrattuali(in ApplicationName appName, in long accessLevel, in CompDivForSyndCat compDivForSyndCat, in LongLongSeq sectorToLink, in LongLongSeq sectorToUnlink);
        TransmissionStatus      aggiornaContratti(in ApplicationName appName, in long accessLevel, in CompDivForSyndCat compDivForSyndCat, in CollectiveContractSeq contractToLink, in CollectiveContractSeq contractToUnlink);
        AddressSeq              getAddressForCompDivForSyndCat(in ApplicationName appName, in DBKey dbKeyCompDivForSyndCat) raises (ILException);
        TransmissionStatus      insertAddressForCompDivForSyndCat(in ApplicationName appName, in long accesslevel, in Address newAddress, out Address theNewAddress);
        TransmissionStatus      updateAddressForCompDivForSyndCat(in ApplicationName appName, in long accesslevel, in Address newAddress, out Address theNewAddress);
        TransmissionStatus      deleteAddressForCompDivForSyndCat(in ApplicationName appName, in long accesslevel, in Address newAddress);


        // * INIZIO * AO.mdb 158
        WorkerSeq       getAllWorker(in ApplicationName appName, in FiltroWorker filtroworker, in long start, in long numMax) raises (ILException);
        WorkerSeq       getAllRegisteredWorker(in ApplicationName appName, in FiltroWorker filtroworker, in long start, in long numMax) raises (ILException);

        // * FINE *   AO.mdb 158

        // * INIZIO * AO.mdb 5
        TransmissionStatus          newHistoryNumberOfEmployees(in ApplicationName appName, in long accesslevel, in HistoryNumberOfEmployees newHistoryNumberOfEmployees, out HistoryNumberOfEmployees theNewHistoryNumberOfEmployees);
        TransmissionStatus          updateHistoryNumberOfEmployees(in ApplicationName appName, in long accesslevel, in HistoryNumberOfEmployees newHistoryNumberOfEmployees, out HistoryNumberOfEmployees theNewHistoryNumberOfEmployees);
        TransmissionStatus          deleteHistoryNumberOfEmployees(in ApplicationName appName, in long accesslevel, in HistoryNumberOfEmployees deleteHistoryNumberOfEmployees);
        HistoryNumberOfEmployeesSeq findFirstXHistoryNumberOfEmployeeWithinDate(in ApplicationName appName, in DBKey dbKeyCompDivForSyndCat, in long long startDate, in long long endDate) raises (ILException);
        // * FINE * AO.mdb 5

        TransmissionStatus      createSede(in ApplicationName appName, in long accessLevel, in Sede sede, out SedeRecord sedeHolder);
        SedeSeq                 getAllSede(in ApplicationName appName, in string description, in long numMax) raises (ILException);

        // visualizzazione dei versamenti
        Versamenti              getVersamenti(in ApplicationName appName, in long long categoria, in string anno) raises (ILException);
    };

    interface CompanyRecord : CDSRecord {
        Company                 getCompanyData();
        TransmissionStatus      updateCompanyData(in ApplicationName appName, in long accessLevel, in Company newData, out Company theNewData);

        boolean                 inCrisis(in ApplicationName appName) raises (ILException); //True if one of the CompanyDivisions have a current SituationInCompDiv
        boolean                 isClosed(in ApplicationName appName) raises (ILException); //true if all CompanyDivisions have closingDate < now

        //The company divisions

        TransmissionStatus      findCompanyDivisionKey(in ApplicationName appName, in DBKey tableKey, out CompanyDivisionRecord result);

        CompanyDivisionSeq      getAllCompanyDivisions(in ApplicationName appName) raises (ILException);

        TransmissionStatus      createCompanyDivision(in ApplicationName appName, in long accessLevel, in CompanyDivision compD, out CompanyDivisionRecord p, out DBKey tableKey);
        //CompanyDivisionRecord   createCompanyDivision(in ApplicationName appName, in long accessLevel, in CompanyDivision compD) raises (NotEnoughData, AccessDenied, CreateFailed);

        //The authorizations for inCrisis
        AuthorizationSeq        getAllAuthorizations(in ApplicationName appName) raises (ILException);
        TransmissionStatus      updateAuthorization(in ApplicationName appName, in long accesslevel, in Authorization newAuthorization, out Authorization theNewAuthorization);
        TransmissionStatus      newAuthorization(in ApplicationName appName, in long accesslevel, in Authorization newAuthorization, out Authorization theNewAuthorization);

        // * INIZIO * AO.mdb 158
        WorkerSeq       getAllWorker(in ApplicationName appName, in FiltroWorker filtroworker, in long start, in long numMax) raises (ILException);
        WorkerSeq       getAllRegisteredWorker(in ApplicationName appName, in FiltroWorker filtroworker, in long start, in long numMax) raises (ILException);

        // * FINE * AO.mdb 158

        // restituisce tutti i department (DISTINCT) delle Unita' Locali dell'Azienda
        StringSeq getAllDepartments(in ApplicationName appName) raises (ILException);

        CollectiveContractSeq getAllCollectiveContract(in ApplicationName appName) raises (ILException);

    };


    struct EventNotification {
        DBKey         tableKey;
        long long     lastChanged;
        long long     lastSynchronized;
        ChangedBy     changes;
        long long     ownerSCategory;  //categoria del titolare dell'evento
        long long     receiverSCategory; //categoria del destinatario
        long          applicationName;   //campo non utilizzato
        Priority      requestPriority;
        long long     eventType;
        long long     whenHappened;     //When did the event happen -- seconds since 1/1/1970 00:00 GMT
        DBKey         dbKeyRecord;
        CDSTable      tableType;
        string        description;  //campo utilizzado dal client
        DBKey         dbKeyEntity;
        CDSTable      entityTableType;
        long long     classificationID;
        string        classificationName;
        long          certainty;
    };

    struct EventTypeForSyndCat {
        DBKey         tableKey;
        long long     lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long     lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT
        ChangedBy     changes;
        //long          applicationName;
        long long     sCategory;
        long long     eventType;
        long	      certainty;
    };

    struct EventInterest {
        string		eventType;
    };

    typedef sequence<EventInterest> EventInterestSeq;
    typedef sequence<PersonRecord>  PersonRecordSeq;
    typedef sequence<CompanyRecord> CompanyRecordSeq;

        //callback interface that must be implemented by the application
        //Data requests, replies to data requests(asynchronous)
        //and events are sent back to the application using this callback


    interface Application {

        //the name of the application
        readonly attribute ApplicationName name;
        //may get called from Integration layer
        //if integration layer is shutting down, etc...
        //Application should wait a bit and try to re-register
        void disconnect();

        // may get called occationally from the Integration Layer to check that the application is still there
        void ping();
    };

    // interfacce e struct specifici per l'applicazione Archivi Organizzativi


    // enumeration per definire lo stato della tessera temporanea
    enum PrintedOrToPrintOrMult { PRINTED, TOPRINT, MULTIPLE };
    // enumeration per definire lo stato della tessera temporanea
    enum StatoCardTemporary { DA_STAMPARE, GIA_STAMPATA_ALTRA_CAT, GIA_STAMPATA_STESSA_CAT,
                            STAMPA_PREVISTA_ALTRA_CAT, STAMPA_PREVISTA_STESSA_CAT };


    // struttura che definisce il concetto di Tessera Temporanea
    // Questo concetto è utilizzato per la stampa delle tessere.
    // Vengono create delle tessere temporanee per fotografare la situazione
    // e poi stampare in un secondo momento.
    struct CardTemporary {
        long                      id;
        long long                 sCategory;              // Foreing Key per la Syndacate category
        long                      location;               // Foreing key per la location, potrebbere anche essere solo un territorio
        LocationTypeEnum          locationType;           // Si intende una location esatta oppure un territorio e tutte le sue location sottostanti?
        long                      yearOfUnion;
        long                      cardOrder;
        DBKey                     dbKeyCard;              // Chiave della tessera corrispondente
        StatoCardTemporary        printedOrToPrintOrMult;                  // Enum che indica se questa tessera temporanea è già stampata stessa cat o altra cat, è da stampare  o
                                                          // la stampa è prevista per la stessa categoria o altra categoria.
        long                      toPrint;                 // flag per indicare l'effettiva volontà di stampare la tessera
        long                      isContabilizzata;          // flag che indicata la stampa e aggirnameto delle tessere
        DBKey                     dbKeyPerson;            // Chiave che identifica la persona associata alla tessera
        DBKey                     dbKeyConfigurazione;
        string                    name;
        string                    surname;
        string                    fiscalCode;
        long long                 birthDate;
    };

    // definizione di una lista di CardTemporary
    typedef sequence <CardTemporary>  CardTemporarySeq;

    //REPORT

    enum Area { A_PERSONA, A_ABBONAMENTO, A_AZIENDA };
    /**
    * Enumeration che indica il tipo del filtro
    * F_CLASSIFICAZIONE : il filtro è una classificazione
    * F_DATA : il filtro è un campo data
    * F_FLAG : il filtro è un flag che può avere valore il valore 0 (false) o 1 (true)
    * F_STRINGA : il filtro è una stringa generica.
    * F_COMPOSTO : il filtro è una procedura del server.
    * F_AZZONAMENTO: il filtro è la classificazione azzonamento (vista CompleteLocation)
    * F_ENUMERATION : il filtro è un enumeration
    * F_INT : il filtro è un intero
    */
    enum TipoFiltro { F_CLASSIFICAZIONE, F_DATA, F_FLAG, F_STRINGA, F_COMPOSTO, F_AZZONAMENTO, F_ENUMERATION, F_INT };

    /**
    * Enumeration che indica come interpretare il valore del filtro
    * I_INTERNO : il valore del filtro dovrebbe essere di tipo intervallo e
    * vengono presi i valori all'interno dell'intervallo.
    * I_ESTERNO : il valore del filtro dovrebbe essere di tipo intervallo e
    * vengono presi i valori all'esterno dell'intervallo
    * I_INFALLIMITE : il valore del filtro non dovrebbe essere di tipo intervallo e
    * vengono presi i valori inferiori al valore
    * I_SUPALLIMITE : il valore del filtro non dovrebbe essere di tipo intervallo e
    * vengono presi i valori superiori al valore
    * I_UGUALE : il valore del filtro non dovrebbe essere di tipo intervallo e
    * vengono presi i valori uguali al valore
    * I_DIVERSO : il valore del filtro non dovrebbe essere di tipo intervallo e
    * vengono presi i valori diverso dal valore
    */
    enum ValoreIntervalloEnum { I_INTERNO, I_ESTERNO, I_INFALLIMITE, I_SUPALLIMITE, I_UGUALE, I_DIVERSO };

    struct TBLConfigurazione {
      DBKey         tableKey;
      ChangedBy     changes;
      long long     lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMTeventno
      long long     lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT
      string        nome;
      string        descrizione;
      long          applicativo;
      DBKey         operatore;
      long long     dataCreazione;
      long long     pDataDiElaborazione;
      string        pAzzonamentoDa;
      string        pAzzonamentoA;
      Area          pArea;
      long long     pEntitaPrincipale;
      string        templateDiStampa;        // nome del template per la stampa dei dati scaturiti dalla configurazione.
      string        nomeFileStampaDefault;   // nome del file per la stampa di default.
      long          certainty;

    };

    struct TBLEsecuzione {
      long          idEsecuzione;
      DBKey         dbKeyConfig;
      long          applicativo;
      DBKey         operatore;
      long long     dataEsecuzione;
      string        nomeTabellone;
      long          tempoElaborazione;
      long          numeroRighe;
      string        nomeFileStampa;        // nome con percorso relativo del file da stampare ( file .dbf)
    };

    struct TBLConfESyndCat {
      DBKey         tableKey;
      DBKey         dbKeyConfig;
      ChangedBy     changes;
      long long     lastChanged;
      long long     lastSynchronized;
      long long     pSCategory;
      long          certainty;

    };

    struct TBLConfEEntita {
      DBKey         tableKey;
      long long     idEntita;
      DBKey         dbKeyConfig;
      ChangedBy     changes;
      long long     lastChanged;
      long long     lastSynchronized;
      long          certainty;

    };

    struct TBLConfEEntitaPrinc {
      DBKey         tableKey;
      long long     pEntitaPrincipale;
      DBKey         dbKeyConfig;
      ChangedBy     changes;
      long long     lastChanged;
      long long     lastSynchronized;
      long          certainty;

    };

    struct TBLValoriFiltro {
      DBKey             tableKey;
      long long         idFiltro;
      DBKey             dbKeyConfig;
      ChangedBy         changes;
      long long         lastChanged;
      long long         lastSynchronized;
      string            valoreStringaDa;
      string            valoreStringaA;
      string            valoreClassDa;
      string            valoreClassA;
      long long         valoreDataDa;
      long long         valoreDataA;
      long              valoreFlag;
      long              isIntervallo;
      ValoreIntervalloEnum  valoreIntervallo;
      string            campoFiltro;
      long              certainty;

    };


    struct TBLAzieParametri {
      DBKey         tableKey;
      DBKey         dbKeyConfig;
      ChangedBy     changes;
      long long     lastChanged;
      long long     lastSynchronized;
      string        pRagioneSocialeDa;
      string        pRagioneSocialeA;
      string        pCodAziendaDa;
      string        pCodAziendaA;
      long          pSoloAziende;
      string        pAzzPersonaDa;
      string        pAzzPersonaA;
      string        pAzzAziendaDa;
      string        pAzzAziendaA;
      long          pAziendeConLavoratori;
      long          pAziendeSenzaLavoratori;
      long          certainty;
    };

    struct TBLAbboParametri {
      DBKey         tableKey;
      DBKey         dbKeyConfig;
      ChangedBy     changes;
      long long     lastChanged;
      long long     lastSynchronized;
      TipoAbbonato  pTipoIntestatario;
      TipoAbbonato  pTipoPagatore;
      string        pAzzIntestatarioDa;
      string        pAzzIntestatarioA;
      string        pAzzPagatoreDa;
      string        pAzzPagatoreA;
      long          certainty;
    };

    struct TBLPersParametri {
      DBKey         tableKey;
      DBKey         dbKeyConfig;
      ChangedBy     changes;
      long long     lastChanged;
      long long     lastSynchronized;
      string        pCognomeDa;
      string        pCognomeA;
      long          pStatoRapportiAttivi;
      long          pStatoRapportiNonAttivi;
      long          pTipoRapportiLavoro;
      long          pTipoRapportiNonOccup;
      long          pTipoRapportiPensione;
      long          pCondizioneIscritti;
      long          pCondizioneNonIscritti;
      long long     pPeriodoDiElaborazioneDa;
      long long     pPeriodoDiElaborazioneA;
      long          pConsideraRevoche;
      long          pRevocheEffettive;
      long          pRevocheTutte;
      long          pEliminaDoppi;
      long          pIgnoraCambioCategoria;
      long          pControlloEquivalenze;
      long          pSoloCapofamiglia;
      long          certainty;
      long          isTesseramento;
      long          isDettIscrizioni; // Per generare, se scelto SPI, DETISCR.DBF
      long          pAnnoTesseramento;
      string        pAzzPersonaDa;
      string        pAzzPersonaA;
      string        pAzzAziendaDa;
      string        pAzzAziendaA;
      string        pAzzIscrizioneDa;
      string        pAzzIscrizioneA;

    };

    // interfaccia che definisce i metodi specifici per Archivi Organizzativi
    interface IAAOO {

        // metodi specifici per la stampa delle tessere
        TransmissionStatus   createCardTemporary(in ApplicationName appName, in long accessLevel,in long long sCategory, in string azzonamentoDa, in string azzonamentoA, in long year);
        TransmissionStatus   createDummyCardTemporary(in ApplicationName appName, in long accessLevel,in long long sCategory, in string azzonamentoDa, in string azzonamentoA, in long year, out LongSeq numCardTemporary);
        TransmissionStatus   findCardTemporary(in ApplicationName appName, in long long sCategory, in string azzonamentoDa, in string azzonamentoA, in long year, out boolean find);
        TransmissionStatus   findCardTemporaryReport(in ApplicationName appName, in TBLConfigurazione configurazione, out boolean find);
        TransmissionStatus   deleteCardTemporary(in ApplicationName appName, in long accessLevel,in long long sCategory, in string azzonamentoDa, in string azzonamentoA, in long year);
        TransmissionStatus   deleteCardTemporaryReport(in ApplicationName appName, in long accessLevel, in TBLConfigurazione configurazione, in TBLEsecuzione esecuzione);
        TransmissionStatus   updateCardTemporary(in ApplicationName appName, in long accessLevel, in CardTemporary cardTemporary, out CardTemporary cardTemporaryHolder);

        TransmissionStatus   accountingCard(in ApplicationName appName, in long accessLevel,in long long sCategory, in string azzonamentoDa, in string azzonamentoA, in long year, out long numeroAggHolder);
        TransmissionStatus   accountingCardReport(in ApplicationName appName, in long accessLevel, in TBLConfigurazione configurazione, in long year, out long numeroAggHolder);

        CardTemporarySeq     findAllCardTemporaryWithToPrint(in ApplicationName appName, in long long sCategory, in string azzonamentoDa, in string azzonamentoA, in long year) raises (ILException);
        CardTemporarySeq     findAllCardTemporaryWithPrinted(in ApplicationName appName, in long long sCategory, in string azzonamentoDa, in string azzonamentoA, in long year) raises (ILException);
        CardTemporarySeq     findAllCardTemporaryWithMultiple(in ApplicationName appName, in long long sCategory, in string azzonamentoDa, in string azzonamentoA, in long year) raises (ILException);

        CardTemporarySeq     findAllCardTemporaryWithStato(in ApplicationName appName, in long long sCategory, in string azzonamentoDa, in string azzonamentoA, in long year, in StatoCardTemporary stato) raises (ILException);
        CardTemporarySeq     findAllCardTemporaryWithStatoReport(in ApplicationName appName, in TBLConfigurazione configurazione, in StatoCardTemporary stato) raises (ILException);

        long     calculateNumberOfCardTemporaryWithToPrint(in ApplicationName appName, in long long sCategory, in string azzonamentoDa, in string azzonamentoA, in long year) raises (ILException);
        long     calculateNumberOfCardTemporaryWithPrinted(in ApplicationName appName, in long long sCategory, in string azzonamentoDa, in string azzonamentoA, in long year) raises (ILException);
        long     calculateNumberOfCardTemporaryWithMultiple(in ApplicationName appName, in long long sCategory, in string azzonamentoDa, in string azzonamentoA, in long year) raises (ILException);

        long     calculateNumberOfCardTemporaryWithStato(in ApplicationName appName, in long long sCategory, in string azzonamentoDa, in string azzonamentoA, in long year, in StatoCardTemporary stato  ) raises (ILException);
        long     calculateNumberOfCardTemporaryWithStatoReport(in ApplicationName appName, in TBLConfigurazione configurazione, in StatoCardTemporary stato  ) raises (ILException);
    };

    // fine della parte specifica per Archivi Organizzativi

    // Inizio Stradario

    // identifica i dati dello stradario
    struct Stradario {
        DBKey		tableKey;		// la chiave
        long long	lastChanged;		// campo di sola lettura
        long long	lastSynchronized;	// campo di sola lettura
        long long   	lastChangedPacket;       // Sincronizzazione: LastChanged del pacchetto stradario
        ChangedBy	changes;			// campo di sola lettura che mantiene informazioni sugli aggiornamenti del dato

        long long	comune;		// associazione con il comune.

        long		certainty;

    };

    struct StradarioComuni {
        DBKey		  chiaveStradario;
        long long         id;
        string            nome;
        string            pr;
//        string            newpr;
        string            cap;
        string            istat;
        string            cm;
        string            azzonamento;
        long long         idNazionalita;
        // campi fissi
        long long       lastChanged;
        long long       lastSynchronized;
        ChangedBy       changes;
        long long       categoria;
        long            provvisorio;
        long            ordinamento;
        long            certainty;
    };

    // identifica i dati della strada
    struct Strada {
        DBKey		tableKey;		// la chiave
        long long	lastChanged;		// campo di sola lettura
        long long	lastSynchronized;	// campo di sola lettura
        ChangedBy	changes;		// campo di sola lettura che mantiene informazioni sugli aggiornamenti del dato

        long long	toponimo;		// associazione con il Toponimo.
        string		nome;
        long long	frazione;		// associazione con la Frazione.
        long		certainty;

    };

    // E' una struttura che non ha una tabella corrispondente. Essa definisce i campi filtro per la ricerca.
    // Se il campo è valorizzato con il valore di default non viene utilizzato per la ricerca.
    struct AssStrada {
        DBKey           dbKeyStrada; // relazione con la strada
        long		abbinamento;
        long		dal;
        string		dalExt;
        long		al;
        string		alExt;

    };

    // identifica l'associazione della parte di Strada con il CAP
    struct AssStradaCAP {
        DBKey		tableKey;		// la chiave
        long long	lastChanged;		// campo di sola lettura
        long long	lastSynchronized;	// campo di sola lettura
        ChangedBy	changes;		// campo di sola lettura che mantiene informazioni sugli aggiornamenti del dato
        DBKey           dbKeyStrada;
        long		abbinamento;
        long		dal;
        string		dalExt;
        long		al;
        string		alExt;
        string		cap;
        long		certainty;

    };

    // identifica l'associazione della parte di Strada con l'Azzonamento
    struct AssStradaAzz {
        DBKey		tableKey;		// la chiave
        long long	lastChanged;		// campo di sola lettura
        long long	lastSynchronized;	// campo di sola lettura
        ChangedBy	changes;		// campo di sola lettura che mantiene informazioni sugli aggiornamenti del dato
        DBKey           dbKeyStrada;
        long		abbinamento;
        long		dal;
        string		dalExt;
        long		al;
        string		alExt;
        long    	location;
        long		certainty;

    };

    // identifica l'associazione della parte di Strada con il Decentramento Amministrativo
    struct AssStradaDec {
        DBKey		tableKey;		// la chiave
        long long	lastChanged;		// campo di sola lettura
        long long	lastSynchronized;	// campo di sola lettura
        ChangedBy	changes;		// campo di sola lettura che mantiene informazioni sugli aggiornamenti del dato
        DBKey           dbKeyStrada;
        long		abbinamento;
        long		dal;
        string		dalExt;
        long		al;
        string		alExt;
        long long	decentramento;
        long		certainty;

    };

    // identifica l'associazione fra il territorio e lo stradario
    struct TerritorioStradario {
        DBKey		tableKey;		// la chiave
        long long	lastChanged;		// campo di sola lettura
        long long	lastSynchronized;	// campo di sola lettura
        ChangedBy	changes;		// campo di sola lettura che mantiene informazioni sugli aggiornamenti del dato
        long    	territorio;
        long		certainty;

    };

    typedef sequence <Strada>          		StradaSeq;
    typedef sequence <AssStradaCAP>    		AssStradaCAPSeq;
    typedef sequence <AssStradaAzz>    		AssStradaAzzSeq;
    typedef sequence <AssStradaDec>    		AssStradaDecSeq;
    typedef sequence <TerritorioStradario>	TerritorioStradarioSeq;


    typedef sequence <Stradario>                StradarioSeq;
    typedef sequence <StradarioComuni>          StradarioComuniSeq;



    // interfccia che definisce i metodi per la gestione dello stradario.
    interface GestoreAbbonamenti {
        TransmissionStatus generateReport(in ApplicationName appName, in long accessLevel);
        TransmissionStatus interpretaReportRoma(in ApplicationName appName, in long accessLevel);
        TransmissionStatus newAllReportAbbonamentiRoma(in ApplicationName appName, in long accessLevel, in ReportAbbonamentiRomaSeq arrayReport, out ReportAbbonamentiRomaSeq arrayReportHolde);
        ReportAbbonamentiSeq getAllReportAbbonamenti(in ApplicationName appName) raises (ILException);
        ReportAbbonamentiSeq getAllReportAbbonamentiErrati(in ApplicationName appName) raises (ILException);
        void disconnect();
    };

    // interfccia che definisce i metodi per la gestione dello stradario.
    interface GestoreStradario {

        // metodi per l'inserimento, l'aggiornamento, la cancellazione e la ricerca della Strada dello stradario.
        TransmissionStatus newStrada(in ApplicationName appName, in long accessLevel, in Strada strada, out Strada stradaHolder);
        TransmissionStatus updateStrada(in ApplicationName appName, in long accessLevel, in Strada strada, out Strada stradaHolder);
        TransmissionStatus deleteStrada(in ApplicationName appName, in long accessLevel, in Strada strada);
        StradaSeq findStradaWithFrazioneAndNomeAndToponimo(in ApplicationName appName, in long long frazione, in string nome, in long long toponimo, in long numeroMax) raises (ILException);
        StradaSeq findStradaWithFrazioneNotNull(in ApplicationName appName, in long numeroMax) raises (ILException);

        // metodi per l'inserimento, l'aggiornamento, la cancellazione e la ricerca della AssStradaCAP dello stradario.
        TransmissionStatus newAssStradaCAP(in ApplicationName appName, in long accessLevel, in AssStradaCAP assStradaCAP, out AssStradaCAP assStradaCAPHolder);
        TransmissionStatus updateAssStradaCAP(in ApplicationName appName, in long accessLevel, in AssStradaCAP assStradaCAP, out AssStradaCAP assStradaCAPHolder);
        TransmissionStatus deleteAssStradaCAP(in ApplicationName appName, in long accessLevel, in AssStradaCAP assStradaCAP);
        AssStradaCAPSeq findAssStradaCAP(in ApplicationName appName, in AssStrada assStrada) raises (ILException);

        // metodi per l'inserimento, l'aggiornamento, la cancellazione e la ricerca della AssStradaAzz dello stradario.
        TransmissionStatus newAssStradaAzz(in ApplicationName appName, in long accessLevel, in AssStradaAzz assStradaAzz, out AssStradaAzz assStradaAzzHolder);
        TransmissionStatus updateAssStradaAzz(in ApplicationName appName, in long accessLevel, in AssStradaAzz assStradaAzz, out AssStradaAzz assStradaAzzHolder);
        TransmissionStatus deleteAssStradaAzz(in ApplicationName appName, in long accessLevel, in AssStradaAzz assStradaAzz);
        AssStradaAzzSeq findAssStradaAzz(in ApplicationName appName, in AssStrada assStrada) raises (ILException);

        // metodi per l'inserimento, l'aggiornamento, la cancellazione e la ricerca della AssStradaDec dello stradario.
        TransmissionStatus newAssStradaDec(in ApplicationName appName, in long accessLevel, in AssStradaDec assStradaDec, out AssStradaDec assStradaDecHolder);
        TransmissionStatus updateAssStradaDec(in ApplicationName appName, in long accessLevel, in AssStradaDec assStradaDec, out AssStradaDec assStradaDecHolder);
        TransmissionStatus deleteAssStradaDec(in ApplicationName appName, in long accessLevel, in AssStradaDec assStradaDec);
        AssStradaDecSeq findAssStradaDec(in ApplicationName appName, in AssStrada assStrada) raises (ILException);

        // metodi per l'inserimento, l'aggiornamento, la cancellazione e la ricerca della associazione territorio Stradario
        TransmissionStatus newTerritorioStradario(in ApplicationName appName, in long accessLevel, in TerritorioStradario territorioStradario, out TerritorioStradario territorioStradarioHolder);
        TransmissionStatus updateTerritorioStradario(in ApplicationName appName, in long accessLevel, in TerritorioStradario territorioStradario, out TerritorioStradario territorioStradarioHolder);
        TransmissionStatus deleteTerritorioStradario(in ApplicationName appName, in long accessLevel, in TerritorioStradario territorioStradario);
        TerritorioStradarioSeq findTerritorio(in ApplicationName appName) raises (ILException);

        // cancella lo stradario corrente dal DB.
        TransmissionStatus deleteStradario(in ApplicationName appName, in long accessLevel);

        TransmissionStatus  findAssStradaAzzConflict(in ApplicationName appName, in AssStradaAzz assStradaAzz, out boolean find);
        TransmissionStatus  findAssStradaCAPConflict(in ApplicationName appName, in AssStradaCAP assStradaCAP, out boolean find);
        TransmissionStatus  findAssStradaDecConflict(in ApplicationName appName, in AssStradaDec assStradaDec, out boolean find);

        // restituisce lo Stradario
        Stradario getStradarioData();
    };

    // strutture dati definite per le funzionalità richieste dal client Rasi e client WS

    struct PersonaWS {
      string codiceFiscale;
      string cfComune;
      string cognome;
      string nome;
      long long dataDiNascita;
      string sesso;
      string comuneDiNascita;
      boolean flagDeceduto;
      string dataDiDecesso;
    };

    struct IndirizzoWS {
      string comune;
      string cfComune;
      string provincia;
      string localitaPostale;
      string toponimo;
      string nomeVia;
      string civico;
      string estensioneCivico;
      string frazione;
      string cap;
      string telefono1;
      string telefono2;
      string fax1;
      string fax2;
      string cellulare;
      string email;
      long long dataInizioValidita;
      long long dataFineValidita;
      string applicazioneCreatrice;
    };

    struct DettaglioPersonaWS {
       PersonaWS datiPersona;
       string statoCivile;
       string titoloDiStudio;
       string cognomeAcquisito;
       string nazionalita;
       IndirizzoWS indirizzoDomicilio;
    };

    struct PraticaDSoMobilitaWS {
      long long dataInizioPratica;
      long long dataFinePratica;
      string codicePratica;
      string categoriaSindacale;
      string azzonamento;
      string contrattoApplicato;
      string settoreContrattuale;
      string causaleFineMobilita;
      long tipoPratica;
    };

    struct PraticaSIIncaWS {
      string codicePratica;
      string ufficioInca;            // codice sede + descrizione sede
      string sedePermanenzaInca;     // codice sede + codice permanenza + decrizione permanenza
      string tipologiaPratica;
      string descrizioneProdotto;    // codice + descrizione
      long long dataApertura;
      long long dataChiusura;
      string tipoDiPratica;             // se ha concomitante
      // dati concomitante
      string agenzia;
      string categoriaIscrizione;
      string numeroPensione;
      long long dataDecorrenzaPensione;
      long long dataDecorrenzaPratica;
      string categoriaDiPensione;
      boolean integrazioneAlMinimo;
    };

    struct IscrizioneSindacaleWS {
      string categoriaSindacale;
      long long dataInizioIscrizione;
      long long dataFineIscrizione;
      string tipoPagamento;
    };

    // definsco gli array degli oggetti precedentemente definiti
    typedef sequence <PersonaWS>              PersonaWSSeq;
    typedef sequence <IscrizioneSindacaleWS>  IscrizioneSindacaleWSSeq;
    typedef sequence <PraticaDSoMobilitaWS>   PraticaDSoMobilitaWSSeq;
    typedef sequence <PraticaSIIncaWS>        PraticaSIIncaWSSeq;


    //returned by IntegrationLayer::registerApplication
    interface AppProxy : IAAOO {

        readonly attribute Application app; //The Application that this AppProxy is for
        readonly attribute ApplicationName appName; //The ApplicationName that this AppProxy is for -- the same as app.name (cached!)


        // Find records
        //-------------

        TransmissionStatus  findPersonKey (in ApplicationName appName, in DBKey tableKey, out PersonRecord  result);
        TransmissionStatus  findCompanyKey(in ApplicationName appName, in DBKey tableKey, out CompanyRecord result);
        TransmissionStatus  findCompanyDivisionKey(in ApplicationName appName, in DBKey tableKey, out CompanyDivisionRecord result);

        //Maximum number of  matches returned is MIN(config. parameter, maxResults)
        CompanySeq          findFirstXCompaniesWithFiscalCode(in ApplicationName appName, in string fiscalCode, in long maxResults) raises (ILException);
        // (Metodo per la paginazione)
        CompanySeq          findFirstXCompaniesWithFiscalCodePaginata(in ApplicationName appName, in string fiscalCode, in long start, in LongLongSeq lSCategory, in long location, in long maxResults) raises (ILException);
        CompanySeq          findFirstXCompaniesWithName(in ApplicationName appName, in string name, in long maxResults) raises (ILException);
        // (Metodo per la paginazione)
        CompanySeq          findFirstXCompaniesWithNamePaginata(in ApplicationName appName, in string name, in long start, in LongLongSeq lSCategory, in long location, in long maxResults) raises (ILException);
        // ricerca sul campo codificato (nameForSearch)
        CompanySeq          findFirstXCompaniesWithNameCode(in ApplicationName appName, in string name, in long maxResults) raises (ILException);
        // (Metodo per la paginazione)
        CompanySeq          findFirstXCompaniesWithNameCodePaginata(in ApplicationName appName, in string name, in long start, in LongLongSeq lSCategory, in long location, in long maxResults) raises (ILException);

        CompanySeq          findFirstXCompaniesWithNameAndInterinale(in ApplicationName appName, in string name, in long maxResults) raises (ILException);
        CompanySeq          findFirstXCompaniesWithNameAndInterinaleCode(in ApplicationName appName, in string name, in long maxResults) raises (ILException);

        CompanySeq          findFirstXCompaniesWithIVANumber(in ApplicationName appName, in string IVANumber, in long maxResults) raises (ILException);
        // (Metodo per la paginazione)
        CompanySeq          findFirstXCompaniesWithIVANumberPaginata(in ApplicationName appName, in string IVANumber, in long start, in LongLongSeq lSCategory, in long location, in long maxResults) raises (ILException);
        CompanySeq          findFirstXCompaniesWithNameAndIVANumber(in ApplicationName appName, in string name, in string IVANumber, in long maxResults) raises (ILException);
        // (Metodo per la paginazione)
        CompanySeq          findFirstXCompaniesWithNameAndIVANumberPaginata(in ApplicationName appName, in string name, in string IVANumber, in long start, in LongLongSeq lSCategory, in long location, in long maxResults) raises (ILException);
        // ricerca per il nome sul campo codificato (nameForSearch)
        CompanySeq          findFirstXCompaniesWithNameAndIVANumberCode(in ApplicationName appName, in string name, in string IVANumber, in long maxResults) raises (ILException);
        // (Metodo per la paginazione)

        // metodi che gestiscono anche l'attributo flagInteresse della classe Company
        CompanySeq          findFirstXCompaniesWithFiscalCodeFI		  (in ApplicationName appName, in string fiscalCode, in long location, in long maxResults, in LongLongSeq lSCategory) raises (ILException);
        CompanySeq          findFirstXCompaniesWithIVANumberFI		  (in ApplicationName appName, in string IVANumber, in long location, in long maxResults, in LongLongSeq lSCategory) raises (ILException);
        CompanySeq          findFirstXCompaniesWithNameFI		  (in ApplicationName appName, in string name, in long location, in long maxResults, in LongLongSeq lSCategory) raises (ILException);
        CompanySeq          findFirstXCompaniesWithNameAndInterinaleFI	  (in ApplicationName appName, in string name, in long location, in long maxResults, in LongLongSeq lSCategory) raises (ILException);
        CompanySeq          findFirstXCompaniesWithNameAndInterinaleCodeFI(in ApplicationName appName, in string name, in long location, in long maxResults, in LongLongSeq lSCategory) raises (ILException);
        CompanySeq          findFirstXCompaniesWithNameAndIVANumberFI	  (in ApplicationName appName, in string name, in string IVANumber, in long location, in long maxResults, in LongLongSeq lSCategory) raises (ILException);
        CompanySeq          findFirstXCompaniesWithNameAndIVANumberCodeFI (in ApplicationName appName, in string name, in string IVANumber, in long location, in long maxResults, in LongLongSeq lSCategory) raises (ILException);
        CompanySeq          findFirstXCompaniesWithNameCodeFI             (in ApplicationName appName, in string name, in long location, in long maxResults, in LongLongSeq lSCategory) raises (ILException);

        // Ricerca l'azienda dato il codice
        Company             findCompanyWithCodiceAzienda          (in ApplicationName appName, in string codiceSI, in string codiceAzienda) raises (ILException);
        // Ricerca l'azienda dato il codice
        CompDivForSyndCat   findCompDivForSyndCatWithCodiceUL(in ApplicationName appName, in string codiceSI, in string codiceAzienda, in string codiceUL, out CompanyDivision compDivHolder) raises (ILException);

        CompanySeq          findFirstXCompaniesWithNameAndIVANumberCodePaginata(in ApplicationName appName, in string name, in string IVANumber, in long start, in LongLongSeq lSCategory, in long location, in long maxResults) raises (ILException);
        CompanySeq          findFirstXHolding(in ApplicationName appName, in long maxResults) raises (ILException);
        CompanySeq          findFirstXCassaEdile(in ApplicationName appName, in long maxResults) raises (ILException);

        PersonSeq           findFirstXPersonsWithFiscalCode(in ApplicationName appName, in string fiscalCode, in long maxResults) raises (ILException);
        PersonSeq           findFirstXPersonsWithName(in ApplicationName appName, in string name, in long maxResults) raises (ILException);
        PersonSeq           findFirstXPersonsWithSurname(in ApplicationName appName, in string surname, in long maxResults) raises (ILException);
        // ricerca sul campo codificato (surnameNameForSearch)
        PersonSeq           findFirstXPersonsWithSurnameCode(in ApplicationName appName, in string surname, in long maxResults) raises (ILException);
        PersonSeq           findFirstXPersonsWithNameAndSurname(in ApplicationName appName, in string name, in string surname, in long maxResults) raises (ILException);
        // ricerca sul campo codificato (surnameNameForSearch)
        PersonSeq           findFirstXPersonsWithNameAndSurnameCode(in ApplicationName appName, in string name, in string surname, in long maxResults) raises (ILException);

        //Ricerca per nome, cognome, nascita, sesso, CF
        PersonSeq           findFirstXPersonsWithNameSurnameBornDateSexCF(in ApplicationName appName,
                                in string name, in string surname, in long long bornDateDown,
                                in long long bornDateUp, in long isFemale,
                                in string fiscalCode, in long maxResults) raises (ILException);

        //Ricerca per nome, cognome, nascita, sesso, CF
        PersonSeq           findFirstXPersonsWithNameSurnameBornDateSexCFCode(in ApplicationName appName,
                                in string name, in string surname, in long long bornDateDown,
                                in long long bornDateUp, in long isFemale,
                                in string fiscalCode, in long maxResults) raises (ILException);

        //Ricerca per nome, cognome, nascita, sesso, CF( metodo per la paginazione)
        PersonSeq           findFirstXPersonsWithNameSurnameBornDateSexCFPaginata(in ApplicationName appName,
                                in string name, in string surname, in long long bornDateDown,
                                in long long bornDateUp, in long isFemale,
                                in string fiscalCode, in long start, in long maxResults) raises (ILException);

        //Ricerca per nome, cognome, nascita, sesso, CF( metodo per la paginazione)
        PersonSeq           findFirstXPersonsWithNameSurnameBornDateSexCFCodePaginata(in ApplicationName appName,
                                in string name, in string surname, in long long bornDateDown,
                                in long long bornDateUp, in long isFemale,
                                in string fiscalCode, in long start, in long maxResults) raises (ILException);

        //Ricerca per FiltroPerson( metodo per la paginazione)
        PersonSeq           findFirstXPersonsWithFiltroPersonPaginata(in ApplicationName appName,
                                in FiltroPerson filtro, in long start, in long maxResults) raises (ILException);

        //Ricerca per FiltroPerson( metodo per la paginazione)
        PersonSeq           findFirstXPersonsWithFiltroPersonCodePaginata(in ApplicationName appName,
                                in FiltroPerson filtro, in long start, in long maxResults) raises (ILException);

        CompanyDivisionSeq  findFirstXCompanyDivisionsWithName(in ApplicationName appName, in string name, in long maxResults) raises (ILException);
        // ricerca sul campo codificato (nameForSearch)
        CompanyDivisionSeq  findFirstXCompanyDivisionsWithNameCode(in ApplicationName appName, in string name, in long maxResults) raises (ILException);
        // metodi che possono essere utilizzati per la ricerca paginata
        CompanyDivisionSeq  findFirstXCompanyDivisionsWithNamePaginata(in ApplicationName appName, in string name, in long start, in long maxResults) raises (ILException);
        // ricerca sul campo codificato (nameForSearch)
        CompanyDivisionSeq  findFirstXCompanyDivisionsWithNameCodePaginata(in ApplicationName appName, in string name, in long start, in long maxResults) raises (ILException);

        CompanyDivisionSeq  findFirstXCompanyDivisionWithComuneToponimoStreet(in ApplicationName appName,
          in long long idComune, in long long idToponimo, in string frazione, in string street) raises (ILException);

        CompanySeq  findFirstXCompaniesWithComuneToponimoStreet(in ApplicationName appName,
          in long long idComune, in long long idToponimo, in string frazione, in string street) raises (ILException);

        // ricerca gli stradari
        StradarioSeq        findFirstXStradari(in ApplicationName appName, in long maxResults) raises (ILException);
        StradarioSeq        findFirstXStradariWithTerritory(in ApplicationName appName,in long territorio ,in long maxResults) raises (ILException);

        //NotEnoughData is raised when statement not found, or too few parameters
        PersonSeq           findFirstXPersonsSQL(in ApplicationName appName, in string statementName, in StringSeq parameters, in long maxResults) raises (NotEnoughData, ILException);
        CompanySeq          findFirstXCompaniesSQL(in ApplicationName appName, in string statementName, in StringSeq parameters, in long maxResults) raises (NotEnoughData, ILException);
        CompanyDivisionSeq  findFirstXCompanyDivisionsSQL(in ApplicationName appName, in string statementName, in StringSeq parameters, in long maxResults) raises (NotEnoughData, ILException);


        // Contratti
        TransmissionStatus createCollectiveContract (in ApplicationName appName, in long accessLevel, in CollectiveContract contr, out CollectiveContractRecord c, out DBKey tableKey);
        CollectiveContractSeq findFirstXCollectiveContractWithDescAndSyndicateCategoriesPaginata(in ApplicationName appName, in string description, in long start, in long maxResults, in LongLongSeq sCategory) raises (ILException);
        CollectiveContractSeq findFirstXCollContrWithDescAndSyndCatAndContrTypePaginata(in ApplicationName appName, in string description, in long long contractType, in long start, in long maxResults, in LongLongSeq sCategory) raises (ILException);
        CollectiveContractSeq findFirstXCollContrInUseWithSyndCatPaginata(in ApplicationName appName, in long start, in long maxResults, in LongLongSeq sCategory) raises (ILException);
        TransmissionStatus  findCollectiveContractKey (in ApplicationName appName, in DBKey tableKey, out CollectiveContractRecord  result);


        // Create or update records
        // ------------------------

        TransmissionStatus createPerson (in ApplicationName appName, in long accessLevel, in Person pers, out PersonRecord p, out DBKey tableKey);
        TransmissionStatus createCompany(in ApplicationName appName, in long accessLevel, in Company comp, out CompanyRecord c, out DBKey tableKey);

        //Bulk create/updates
        //-------------------
        //we could have only update methods, but having create/update
        //allows us to detect when an update is performed on a non-existing record
        //(we allow this, but this tells us that maybe we dont have all the
        //data .. )

        boolean createPeople   (in ApplicationName appName, in long accessLevel, in PersonSeq pers,
                    out PersonRecordSeq pRec, out LongSeq failed) raises (ILException, AccessDenied);
        boolean createCompanies(in ApplicationName appName, in long accessLevel, in CompanySeq comp,
                    out CompanyRecordSeq cRec, out LongSeq failed) raises (ILException, AccessDenied);


        Work                findWorkWithKey(in ApplicationName appName, in DBKey dbWorkKey) raises (ILException);
        Pension             findPensionWithKey(in ApplicationName appName, in DBKey dbPensionKey) raises (ILException);
        Concomitante        findConcomitanteWithKey(in ApplicationName appName, in DBKey dbConcomitanteKey) raises (ILException);
        Dossier             findDossierWithKey(in ApplicationName appName, in DBKey dbDossierKey) raises (ILException);
        NotWorking          findNotWorkingWithKey(in ApplicationName appName, in DBKey dbNotWorkingKey) raises (ILException);
        Pratica             findPraticaWithKey(in ApplicationName appName, in DBKey dbPraticaKey) raises (ILException);
        Card                findCardWithKey(in ApplicationName appName, in DBKey key) raises (ILException);
        UnionInfo           findUnionInfoWithKey(in ApplicationName appName, in DBKey key) raises (ILException);
        Address             findAddressWithKey(in ApplicationName appName, in DBKey key) raises (ILException);

        ConcisePerson       findConcisePersonWithKey(in ApplicationName appName, in DBKey tableKey) raises (ILException);

        //register interest in event

        void registerEventInterest  (in EventInterestSeq ev);
        void unregisterEventInterest(in EventInterestSeq ev);


        //Get current location code
        long getLocation();

        // dato un comune viene restituito un GestoreStradario.
        TransmissionStatus findStradario(in ApplicationName appName, in long long comune, out GestoreStradario gestoreStradarioHolder);
        // inserimento di uno stradario per un certo comune
        TransmissionStatus createStradario(in ApplicationName appName,in long accessLevel, in Stradario stradario, out GestoreStradario stradarioHolder);


        // Abbonamenti
        AbbonamentoSeq findFirstXAbbonamenti(in ApplicationName appName, in FiltroAbbonamento filtroAbbonamento, in long numMax)  raises (ILException);
        CompleteAbbonamentoSeq findFirstXCompleteAbbonamenti(in ApplicationName appName, in FiltroAbbonamento filtroAbbonamento, in long numMax)  raises (ILException);
        TransmissionStatus updateAbbonamenti(in ApplicationName appName,in long accessLevel, in AbbonamentoSeq abbonamenti, out AbbonamentoSeq abbHolder);
        boolean isUsedInAbbonamentoLibereta(in ApplicationName appName, in DBKey addressKey) raises (ILException);

        // Metodi specifici per il consulente
        TransmissionStatus createConsultant(in ApplicationName appName, in long accessLevel, in Consultant consultant, out ConsultantRecord  consultantHolder);
        TransmissionStatus findConsultantKey(in ApplicationName appName, in DBKey tableKey, out ConsultantRecord  consultantHolder);
        // ricerca intelligente
        ConsultantSeq findFirstXConsultantWithSubject(in ApplicationName appName, in string search, in long numMax) raises (ILException);

        // Metodi specifici per l'entità Other
        TransmissionStatus createOther(in ApplicationName appName, in long accessLevel, in Other other, out OtherRecord  otherHolder);
        TransmissionStatus findOtherKey(in ApplicationName appName, in DBKey tableKey, out OtherRecord  otherHolder);
        // ricerca intelligente
        OtherSeq findFirstXOtherWithDescription(in ApplicationName appName, in string search, in long numMax) raises (ILException);
        OtherSeq findFirstXOtherWithDescriptionAndTipologia(in ApplicationName appName, in string search, in long long tipologia, in long numMax) raises (ILException);
        OtherSeq findFirstXOtherWithDescriptionCode(in ApplicationName appName, in string search, in long numMax) raises (ILException);
        OtherSeq findFirstXOtherWithDescriptionAndTipologiaCode(in ApplicationName appName, in string search, in long long tipologia, in long numMax) raises (ILException);
        // ricerca dei dati per la lista degli other
        DatiListaOtherSeq findFirstXDatiListaOtherWithDescription(in ApplicationName appName, in string search, in long pagina, in long numMax) raises (ILException);
        DatiListaOtherSeq findFirstXDatiListaOtherWithDescriptionAndTipologia(in ApplicationName appName, in string search, in long long tipologia, in long pagina, in long numMax) raises (ILException);
        DatiListaOtherSeq findFirstXDatiListaOtherWithDescriptionCode(in ApplicationName appName, in string search, in long pagina, in long numMax) raises (ILException);
        DatiListaOtherSeq findFirstXDatiListaOtherWithDescriptionAndTipologiaCode(in ApplicationName appName, in string search, in long long tipologia, in long pagina, in long numMax) raises (ILException);

        ConsultantSeq findFirstXConsultantWithSubjectCode(in ApplicationName appName, in string search, in long numMax) raises (ILException);

        PersonSeq findFirstXPersonWithPersonReferenceAndSCategory(in ApplicationName appName, in DBKey tableKey, in long long sCategory) raises (ILException);

        StradarioComuniSeq findFirstXStradarioComuniWithName(in ApplicationName appName, in string name, in long maxResults) raises (ILException);
        StradarioComuni findStradarioComuniWithCodIstat(in ApplicationName appName, in string codiceIstat) raises (ILException);

        //Deleghe - Ricerca della pensione dato il codice pensione pensionNumber
        Pension findPensionWithNumber(in ApplicationName appName, in string pensionNumber) raises (ILException);

        TransmissionStatus    findSedeWithKey(in ApplicationName appName, in DBKey sedeKey, out SedeRecord  sedeHolder);
        SedeSeq               findFirstXSedeWithDescAndWorkCodePaginata(in ApplicationName appName, in string description, in Work work, in long start, in long numMax) raises (ILException);
        CompanyDivisionSeq    findFirstXScuolaWithNameCodePaginata(in ApplicationName appName, in string nome, in long start, in long numMax) raises(ILException);

        // ConciseXXXX
        ConcisePersonSeq findFirstXConcisePersonsWithFiltroCodePaginata(in ApplicationName appName,
              in FiltroConcisePerson filtro, in long start, in long maxResults) raises (ILException);
        ConciseCompanySeq findFirstXConciseCompanyWithFiltroCodePaginata(in ApplicationName appName,
              in FiltroConciseCompany filtro, in long start, in long maxResults) raises (ILException);
        void setPersonAsInterestForTerritory(in ApplicationName appName, in DBKey keyPerson) raises (ILException);
        void setCompanyAsInterestForTerritory(in ApplicationName appName, in DBKey keyCompany) raises (ILException);

        // Stato iscrizioni
        StatoIscrizionePersonaSeq findStatiIscrizioneWithKeys(in ApplicationName appName, in DBKeySeq tableKeys, in long long dataRif) raises(ILException);
        // DIPerson (integrazione)
        DIPersonSeq findFirstXDIPersonsFromKey(in ApplicationName appName, in DBKey startKey, in long maxResults, in long long dataUltimaIntegrazione) raises (ILException);
        // DIPension (integrazione)
        DIPensionSeq findDIPensionsBetweenDBKeyPersons(in ApplicationName appName, in DBKey startKey, in DBKey endKey, in long long dataUltimaIntegrazione) raises (ILException);

        PersonSeq findPersonsWithKeys(in ApplicationName appName, in DBKeySeq arrayDBKeyPerson) raises (ILException);
        AddressSeq findAddressesWithPersonKeys(in ApplicationName appName, in DBKeySeq arrayDBKeyPerson) raises (ILException);
        PensionSeq findPensionsWithKeys(in ApplicationName appName, in DBKeySeq arrayDBKeyPension) raises (ILException);


        // definizione metodi per le richieste di client come Rasi e client WS
        StatoIscrizione getStatoIscrittoByFiscalCode(in ApplicationName appName, in string fiscalCode) raises(ILException);
        IscrizioneSindacaleWSSeq getIscrizioniSindacali(in ApplicationName appName, in string fiscalCode) raises(ILException);
        PersonaWSSeq getPersonaByCognomeNome(in ApplicationName appName, in string cognome, in string nome) raises(ILException);
        DettaglioPersonaWS getDettaglioPersona(in ApplicationName appName, in string codiceFiscale) raises(ILException);
        PraticaSIIncaWSSeq getPraticheSIInca(in ApplicationName appName, in string codiceFiscale) raises(ILException);
        PraticaDSoMobilitaWSSeq getPraticheDsoMobilita(in ApplicationName appName, in string codiceFiscale) raises(ILException);
        // Metodo ce permette di ricercare le persone duplicate secondo un raggruppamento
        // di campi. Restituisce i valori dei campi specificati per il ragruppamento
        // delle persone duplicate 1 o più volte. I dati restituiti servono per la
        // ricerca delle persone duplicate.
        DatiRicercaPersonaSeq findFirstXDatiRicercaPersoneDuplicate(in ApplicationName appName, in CampiPersonaRagruppamento campiRagruppamento) raises(ILException);
        // Dati unità locale
        DatiCompanyDivisionSeq findFirstXDatiCompanyDivisionWithNameCodeFI(in ApplicationName appName, in string name,
          in long location, in long maxResults, in LongLongSeq lSCategory) raises (ILException);

        DatiCompanyDivisionSeq findFirstXDatiCompanyDivisionWithNameFI(in ApplicationName appName, in string name,
          in long location, in long maxResults, in LongLongSeq lSCategory) raises (ILException);

        DatiCompanyDivisionSeq findFirstXDatiCompanyDivisionWithNameAndInterinaleCodeFI(in ApplicationName appName, in string name,
          in long location, in long maxResults, in LongLongSeq lSCategory) raises (ILException);

        DatiCompanyDivisionSeq findFirstXDatiCompanyDivisionWithNameAndInterinaleFI(in ApplicationName appName, in string name,
          in long location, in long maxResults, in LongLongSeq lSCategory) raises (ILException);

        void remove();  // Call this when finished
    };


    //For Pull clients (NO corba Application objects in client)
    // methods return true if there is data
    interface PullAppProxy : AppProxy {
        boolean getDisconnect();

    };

    // definisce il singolo campo della classificazione

    interface LookUpTable {

        // metodi per la Gestione delle classificazioni dinamiche
        // in questo metodo per ora non c'è il controllo dei privilegi perchè il problema verrà affrontato più avanti. I controlli
        // che verranno fatti saranno sulla validità dei dati in input, valori null o campi obbligatori mancanti
        TransmissionStatus newClassificazione(in long accessLevel, in Classificazione classificazione, out Classificazione classHolder);

        // in questo metodo per ora non c'è il controllo dei privilegi perchè il problema verrà affrontato più avanti. I controlli
        // che verranno fatti saranno sulla validità dei dati in input, valori null, classificazione da cancellare non esistente.
        TransmissionStatus deleteClassificazione(in long accessLevel, in Classificazione classificazione);

        // in questo metodo per ora non c'è il controllo dei privilegi perchè il problema verrà affrontato più avanti. ApplicationName 	// viene passato in caso in cui i privilegi vengano controllati dal server. I controlli che verranno fatti saranno sulla validità
        // dei dati in input, valori null.
        IDClassificazioneSeq getAllClassificazione() raises (ILException);

        // in questo metodo per ora non c'è il controllo dei privilegi perchè il problema verrà affrontato più avanti. ApplicationName
        // viene passato in caso in cui i privilegi vengano controllati dal server. I controlli che verranno fatti saranno sulla validità
        // dei dati in input, valori null.
        // daVisualizzare è un booleano che discrimina se restituire le classificazione
        // da visualizzare valore true, oppure quelle da non visualizzare false.
        IDClassificazioneSeq getAllClassificazioneWithVisualizza(in boolean daVisualizzare) raises (ILException);

        // restituisce la struttura senza valori di una certa classificazione.
        CampoSeq getStrutturaClassificazione(in IDClassificazione id) raises (ILException);

        // restituisce la struttura senza valori di una certa classificazione.
        CampoSeq getStrutturaClassificazioneWithNome(in string nomeId) raises (ILException);

        // in questo metodo per ora non c'è il controllo dei privilegi perchè il problema verrà affrontato più avanti. ApplicationName 	// viene passato in caso in cui i privilegi vengano controllati dal server. I controlli che verranno fatti saranno sulla validità
        // dei dati in input, valori null, campi obbligatori mancanti. L'ultimo parametro indica l'insieme dei valori dei campi della 	// classificazione sui quali si filtra la ricerca. Naturalmente deve corrispondere alla posizione del campo nell'array con la posizione del
        // suo valore. Difficile fare il controllo. Una alternativa a questo sarebbe quella di aggiungere nella struct Campo una property
        // che descrive il valore, utilizzato solo per la ricerca, mantenendo la corrispondenza fra campo e suo valore.
        Classificazione getClassificazioneWithCampi(in IDClassificazione id, in CampoSeq campiFiltro) raises (ILException);

        // in questo metodo per ora non c'è il controllo dei privilegi perchè il problema verrà affrontato più avanti. ApplicationName 	// viene passato in caso in cui i privilegi vengano controllati dal server. I controlli che verranno fatti saranno sulla validità
        // dei dati in input, valori null, campi obbligatori mancanti. L'ultimo parametro indica l'insieme dei valori dei campi della 	// classificazione sui quali si filtra la ricerca. Naturalmente deve corrispondere alla posizione del campo nell'array con la posizione del
        // suo valore. Difficile fare il controllo. Una alternativa a questo sarebbe quella di aggiungere nella struct Campo una property
        // che descrive il valore, utilizzato solo per la ricerca, mantenendo la corrispondenza fra campo e suo valore.
        Classificazione getClassificazioneWithNomeAndCampi(in string nomeClassificazione, in CampoSeq campiFiltro) raises (ILException);

        // metodi che implementano l'aggiornamento della classificazione

        // in questo metodo per ora non c'è il controllo dei privilegi perchè il problema verrà affrontato più avanti. I controlli
        // che verranno fatti saranno sulla validità dei dati in input, valori null, esistenza della classificazione, campi obbligatori mancanti.
        // Verranno modificati solo i campi modificabili
        TransmissionStatus updateIDClassificazione(in long accessLevel, in IDClassificazione id, out IDClassificazione idClassHolder);

        // in questo metodo per ora non c'è il controllo dei privilegi perchè il problema verrà affrontato più avanti. I controlli
        // che verranno fatti saranno sulla validità dei dati in input, valori null o campi obbligatori mancanti.
        TransmissionStatus newCampo(in long accessLevel, in IDClassificazione id, in Campo campo, out Campo campoHolder);

        // in questo metodo per ora non c'è il controllo dei privilegi perchè il problema verrà affrontato più avanti. I controlli
        // che verranno fatti saranno sulla validità dei dati in input, valori null, esistenza della classificazione e del campo, campi obbligatori mancanti.
        TransmissionStatus updateCampo(in long accessLevel, in IDClassificazione id, in Campo campo, out Campo campoHolder);

        // in questo metodo per ora non c'è il controllo dei privilegi perchè il problema verrà affrontato più avanti. I controlli
        // che verranno fatti saranno sulla validità dei dati in input, valori null, esistenza della classificazione e del campo, campi obbligatori mancanti.
        TransmissionStatus deleteCampo(in long accessLevel, in IDClassificazione id, in Campo campo);

        // in questo metodo per ora non c'è il controllo dei privilegi perchè il problema verrà affrontato più avanti. I controlli
        // che verranno fatti saranno sulla validità dei dati in input, valori null o campi obbligatori mancanti.
        // All'interno dell'oggetto classificazione ci deve essere solo un record altrimenti viene preso il primo
        TransmissionStatus newRecordClassificazione(in long accessLevel, in Classificazione classificazione, out Classificazione classHolder);

        // in questo metodo per ora non c'è il controllo dei privilegi perchè il problema verrà affrontato più avanti. I controlli
        // che verranno fatti saranno sulla validità dei dati in input, valori null, esistenza della classificazione e del record da modificare, campi obbligatori mancanti.
        // All'interno dell'oggetto classificazione ci deve essere solo un record altrimenti viene preso il primo
        TransmissionStatus updateRecordClassificazione(in long accessLevel, in Classificazione classificazione, out Classificazione classHolder);

        // in questo metodo per ora non c'è il controllo dei privilegi perchè il problema verrà affrontato più avanti. I controlli
        // che verranno fatti saranno sulla validità dei dati in input, valori null, esistenza della classificazione, campi obbligatori mancanti.
        // All'interno dell'oggetto classificazione ci deve essere solo un record altrimenti viene preso il primo
        TransmissionStatus deleteRecordClassificazione(in long accessLevel, in Classificazione classificazione);

        //Gestione delle localizzazioni
        TransmissionStatus newLocTerritory(in long accessLevel, in Classificazione classTerritory, out Classificazione classHolder);
        TransmissionStatus updateLocTerritory(in long accessLevel, in Classificazione classTerritory, out Classificazione classHolder);
        TransmissionStatus deleteLocTerritory(in long accessLevel, in Classificazione classTerritory);

        TransmissionStatus newLocZone(in long accessLevel, in Classificazione classZone, out Classificazione classHolder);
        TransmissionStatus updateLocZone(in long accessLevel, in Classificazione classZone, out Classificazione classHolder);
        TransmissionStatus deleteLocZone(in long accessLevel, in Classificazione classZone);

        TransmissionStatus newLocLeague(in long accessLevel, in Classificazione classLeague, out Classificazione classHolder);
        TransmissionStatus updateLocLeague(in long accessLevel, in Classificazione classLeague, out Classificazione classHolder);
        TransmissionStatus deleteLocLeague(in long accessLevel, in Classificazione classLeague);

        TransmissionStatus newLocGroup(in long accessLevel, in Classificazione classGroup, out Classificazione classHolder);
        TransmissionStatus updateLocGroup(in long accessLevel, in Classificazione classGroup, out Classificazione classHolder);
        TransmissionStatus deleteLocGroup(in long accessLevel, in Classificazione classGroup);

        // Restituisce un elenco di idCategoria composto da: catOrigine + insieme delle categorie
        // collegate a quelle in catOrigine attraverso il campo NuovaCategoria (senza doppioni)
        LongLongSeq getSCatCollegate(in LongLongSeq catOrigine) raises (ILException);

        // metodo per liberare tutte le risorse.
        void disconnect() raises (ILException);
    };

    //-----------------------------Funzionalità batch--------------------------

    //----- Strutture funzionalità batch -----
    // * = parametro obbligatorio

    struct ParametriStorico {

      long long   dataAttiviWork;  	 	// data a partire dalla quale i lavori sono considerati attivi
      // parametri sorgente
      long long  endDateWork;            	// termine rapporto di lavoro sorgente
      long long  reasonForEndingWPNWWork;	// causale cessazione lavoro sorgente
      long long  cancDateUI; 	        	// termine trattenuta sindacale iscrizione associata al lavoro sorgente
      long long  reasonForEndingUnionUI;	// causale cessazione iscrizione associata al lavoro sorgente
      long long  endDateUI; 	 		// termine validità iscrizione associata al lavoro sorgente
      // parametri destinazione
      long long  startDateWork;			// data inizio rapporto di lavoro destinazione
      long long  subscriptionDateUI;    	// data della richiesta di iscrizione del lavoro destinazione
      long long  startDateUI;           	// data di inizio validita' iscrizione lavoro destinazione
      long long  firstPayDateUI;        	// decorrenza trattenuta sindacale lavoro destinazione
    };


    struct TrasferimentoLavoratori{
      il::ParametriStorico parametriStorico;
      // flag per scegliere se mantenere o meno lo storico
      long mantieniStorico;     		// *true (1), false (0)
      // parametri sorgente
      string codiceAziendaFrom;     		// *codice azienda
      string codiceSIFrom;                      // *codice strato integrazione
      string codiceULFrom;			// *codice unità locale
      long long sCategoryTitolareFrom;      	// categoria del lavoro
      long locationTitolareFrom;        	// location dell'UL titolare
      // parametri destinazione
      string codiceAziendaTo;     		// *codice azienda
      string codiceSITo;                        // *codice strato integrazione
      string codiceULTo;			// *codice unità locale
      long long sCategoryTitolareTo;      	// categoria del lavoro
      long locationTitolareTo;        	// location dell'UL titolare
      // parametri esclusivi di TrasferimentoLavoratori
      long mantieniContratto;			// true (1), false (0)
      long mantieniContractSector;              // true (1), false(0)
      long isModificaRSU;
    };


    struct CambioIndirizzoUL{
      il::ParametriStorico parametriStorico;
      // flag per scegliere se mantenere o meno lo storico
      long mantieniStorico;     		// * true (1), false (0)
      // parametri sorgente
      string codiceAziendaFrom;     		   // *codice azienda
      string codiceSIFrom;                      // *codice strato integrazione
      string codiceULFrom;			// *codice unità locale
      long locationFrom;    			// azzonamento indirizzo
      // parametri destinazione
      long locationTo;    			// azzonamento indirizzo
      // parametri esclusivi di CambioIndirizzoUL
      long long   comuneTo;           		      // comune ID di Comuni
      long long   toponimoTo;                   // toponimo
      string      street;                       // strada
      string      streetNumber;                 // numero civico
      string      place;                        // frazione
      long long   validFrom;                    // inizio validità indirizzo
      long long   validUntil;                   // fine validità indirizzo
      string      streetNumberExt;              // estensione numero civico
    };

    struct CambioCategoriaUL{

      il::ParametriStorico parametriStorico;
      // parametri sorgente
      string codiceAziendaFrom;     		// *codice azienda
      string codiceSIFrom;                      // *codice strato integrazione
      string codiceULFrom;			// *codice unità locale
      long long sCategoryULFrom;      	        // *categoria dell'unità locale
      // parametri destinazione
      long long sCategoryULTo;      	        // *categoria dell'unità locale
      // parametri esclusivi di CambioCategoriaUL
      DBKey collectiveContractDBKey;             // contratto lavoro associato alla categoria destinazione
      long long contractSectorID;                // settore contrattuale associato alla categoria destinazione
      // parametri esclusivi di CambioCategoriaUL
      long isModificaRSU;
    };

    struct CambioCategoriaGlobale{
      il::ParametriStorico parametriStorico;
      // parametri sorgente
      long long sCategoryFrom;     // *categoria dell'unità locale
      // parametri destinazione
      long long sCategoryTo;       // *categoria dell'unità locale
      // parametri esclusivi di CambioCategoriaGlobale
      long isModificaRSU;
    };

    struct SpostamentoUL{
      il::ParametriStorico parametriStorico;
      // flag per scegliere se mantenere o meno lo storico
      long mantieniStorico;     		// *true (1), false (0)
      // parametri sorgente
      string codiceAziendaFrom;     		// *codice azienda
      string codiceULFrom;			        // *codice unità locale
      string codiceSIFrom;                      // *codice strato integrazione
      long long sCategoryULFrom;      		// *categoria dell'unità locale
      long locationULFrom;        		// location dell'UL
      // parametri destinazione
      string codiceAziendaTo;     		// *codice azienda
      string codiceSITo;                      // *codice strato integrazione
      string codiceULTo;			// *codice unità locale
      long long sCategoryULTo;      		// *categoria dell'unità locale
      long locationULTo;        		// location dell'unità locale

      // parametri esclusivi di SpostamentoUL
      DBKey collectiveContractDBKey;            // contratto associato alla categoria destinazione
      long long contractSectorID;                 // settore contrattuale associato alla categoria destinazione
      long aggiornaUL;                          // * true (1), false (0)
      long isOriginePrincipale;								  // *indica se l'unità locale d'origine è principale o meno
      long isModificaRSU;

    };

    struct ChiusuraUL{
      il::ParametriStorico parametriStorico;
      // parametri sorgente
      string codiceAzienda;     		// *codice azienda
      string codiceUL;			        // *codice unità locale
      string codiceSI;                          // *codice strato integrazione
      long long sCategoryUL;      		// *categoria dell'unità locale
      long locationUL;        		        // location dell'UL

      // parametri esclusivi di ChiusuraUL
      long long dataChiusuraUL;        		// *data chiusura UL
      long long tipoChiusuraUL;        		// *tipo chiusura UL class ClosingReason
      long long dataScadenzaAbbonamento;        // data di scadenza dell'abbonamento collegato all'unità locale.

    };


    struct BatchStatus{
      TransmissionStatus result;
      string logFileName;
    };


    // fine strutture funzionalità batch


    //-----Sequence funzionalità batch------


    // fine sequence funzionalità batch

    //-----Interfacce funzionalità batch-----

    interface GestoreBatch {
      BatchStatus eseguiTrasferimentoLavoratori(in ApplicationName appName, in long accessLevel, in TrasferimentoLavoratori trasferimento);
      BatchStatus eseguiCambioIndirizzoUL(in ApplicationName appName, in long accessLevel, in CambioIndirizzoUL cambioIndirizzo);
      BatchStatus eseguiCambioCategoriaUL(in ApplicationName appName, in long accessLevel, in CambioCategoriaUL cambioCategoria);
      BatchStatus eseguiSpostamentoUL(in ApplicationName appName, in long accessLevel, in SpostamentoUL spostamento);
      BatchStatus eseguiChiusuraUL(in ApplicationName appName, in long accessLevel, in ChiusuraUL chiusura);
      BatchStatus eseguiAccorpaUtente(in ApplicationName appName, in long accessLevel, in string cfOrigine, in string cfSuperstite);
      BatchStatus eseguiCambioCategoriaGlobale(in ApplicationName appName, in long accessLevel, in CambioCategoriaGlobale cambioCatGlob);
      string getLog(in string logFileName) raises(ILException);

      // metodo per liberare tutte le risorse.
      void disconnect() raises (ILException);
    };


    //fine interfacce funzionalità batch

    //Fine Funzionalità batch


   //-----------------------------Gestione RSU--------------------------

    //-----Interfacce Gestione RSU-----
    // identifica un verbale e contiene i metodi per gestirlo
    interface VerbaleRecord {
      Verbale getVerbaleData();
      TransmissionStatus updateVerbale(in ApplicationName appName, in long accessLevel, in Verbale newData, out Verbale theNewVerbale);
      TransmissionStatus deleteVerbale(in ApplicationName appName, in long accessLevel);
      TransmissionStatus chiusuraVerbale(in long long dataChiusura, in ApplicationName appName, in long accessLevel);

      TransmissionStatus updateNonEletto(in ApplicationName appName, in long accessLevel, in NonEletto newData, out NonEletto theNewNonEletto);
      TransmissionStatus deleteNonEletto(in ApplicationName appName, in long accessLevel, in NonEletto nonEletto);
      TransmissionStatus newNonEletto(in ApplicationName appName, in long accessLevel, in NonEletto newData, out NonEletto theNewNonEletto);
      NonElettoSeq getAllNonEletto(in ApplicationName appName, in long numMax) raises(ILException);

      TransmissionStatus updateDatiSindacato(in ApplicationName appName, in long accessLevel, in DatiSindacato newData, out DatiSindacato theNewDatiSindacati);
      TransmissionStatus deleteDatiSindacato(in ApplicationName appName, in long accessLevel, in DatiSindacato datiSindacato);
      TransmissionStatus newDatiSindacato(in ApplicationName appName, in long accessLevel, in DatiSindacato newData, out DatiSindacato theNewDatiSindacati);
      DatiSindacatoSeq getAllDatiSindacati(in ApplicationName appName, in long numMax) raises(ILException);

      IncaricoRSUSeq       getAllIncarichiRSU(in ApplicationName appName, in long numMax) raises(ILException);
      DatiIncaricatiRSUSeq getAllDatiIncaricatiRSU(in ApplicationName appName, in long numMax) raises(ILException);
    };

    // identifica un Organismo RSU e contie i metodi per gestirlo
    interface OrganismoRSURecord {
      OrganismoRSU getOrganismoRSUData();
      TransmissionStatus updateOrganismoRSU(in ApplicationName appName, in long accessLevel, in OrganismoRSU newData, out OrganismoRSU theNewOrganismoRSU);
      TransmissionStatus deleteOrganismoRSU(in ApplicationName appName, in long accessLevel);

      TransmissionStatus createVerbale(in ApplicationName appName, in long accessLevel, in Verbale verbale, out VerbaleRecord p, out DBKey tableKey);
      TransmissionStatus rinnovoVerbale(in ApplicationName appName, in long accessLevel, in Verbale newVerbale, out VerbaleRecord p, out DBKey tableKey);
      TransmissionStatus findVerbaleWithKey(in ApplicationName appName, in long accessLevel, in DBKey dbKeyVerbale, out VerbaleRecord verbaleHolder);
      VerbaleSeq findFirstXVerbali(in ApplicationName appName, in FiltroVerbale filtro , in long maxResults) raises (ILException);
      VerbaleSeq getAllActiveVerbali(in ApplicationName appName) raises (ILException);
    };

    // contiene i metodi per ricercare gli organismi e i verbali.
    interface GestoreRSU {
      TransmissionStatus createOrganismoRSU (in ApplicationName appName, in long accessLevel, in OrganismoRSU organismo, out OrganismoRSURecord organismoHolder, out DBKey tableKey);
      TransmissionStatus findOrganismoRSUWithKey(in ApplicationName appName, in long accessLevel, in DBKey dbKeyOrganismoRSU, out OrganismoRSURecord organismoHolder);
      OrganismoRSUSeq findFirstXOrganismoRSU(in ApplicationName appName, in FiltroOrganismoRSU filtro , in long maxResults) raises (ILException);
      // metodi che permettono la ricerca di un unica elezione, l'ultima inserita con il verbale aperto.
      // Vengono restituiti come parametri di out i riferimenti agli oggetti remoti OrganismoRSURecord e VerbaleRecord per
      // la gestione di essi.
      ElezioneRSU getElezioneRSUWithCodiceProg(in ApplicationName appName, in long codiceProgressivo, in TipoOrganismoRSU tipoOrganismo, out OrganismoRSURecord organismoRecord, out VerbaleRecord verbale) raises (ILException);
      ElezioneRSU getElezioneRSUWithUL(in ApplicationName appName, in DBKey dbKeyUL, in long long categoriaSindacale, in TipoOrganismoRSU tipoOrganismo, out OrganismoRSURecord organismoRecord, out VerbaleRecord verbale) raises (ILException);
      ElezioneRSU getElezioneRSUWithNomeInterazienda(in ApplicationName appName, in string nomeInterazienda, in long long categoriaSindacale, in TipoOrganismoRSU tipoOrganismo, out OrganismoRSURecord organismoRecord, out VerbaleRecord verbale) raises (ILException);

      ElezioneRSUSeq getElezioneRSUStoriche(in ApplicationName appName, in FiltroOrganismoRSU filtro , in long pagina, in long maxResults, out OrganismoRSURecord organismoRecord, out VerbaleRecord verbale) raises(ILException);
      ElezioneRSUSeq getElezioneRSU(in ApplicationName appName, in FiltroOrganismoRSU filtro , in long pagina, in long maxResults, out OrganismoRSURecord organismoRecord, out VerbaleRecord verbale) raises(ILException);

      ElezioneRSU    getElezioneRSUWithKey(in ApplicationName appName, in DBKey keyOrganismo, in DBKey keyVerbale, out OrganismoRSURecord organismoRecord, out VerbaleRecord verbale) raises(ILException);
      // metodo che restituisce la lista degli incaricati di una azienda o di una unità locale.
      DatiIncaricatiRSUSeq getAllIncaricatiWithAziendaPaginata(in ApplicationName appName, in FiltroOrganismoRSU filtro, in long start, in long maxResults) raises (ILException);

      // metodo per liberare tutte le risorse.
      void disconnect() raises (ILException);
    };
    //fine interfacce Gestione RSU

    //Fine Gestione RSU


    // Struttura composta da informazioni inerenti un oggetto del sistema ASI
    struct DatiAsi {
        DBKey  tableKey;   //chiave dell'oggetto
        long abilitato; // true = oggetto abilitato, false = oggetto non abilitato
    };

    typedef sequence <DatiAsi> DatiAsiSeq;

    struct Ruolo {
      DBKey       tableKey;
      long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
      long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT
      ChangedBy   changes;
      string	  nome;
      string      note;
      long        certainty;    //"autorevolezza"
    };

    struct Utente {
      DBKey       tableKey;
      long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
      long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

      ChangedBy   changes;

      string      userId;
      string      pwd;
      long        abilitato;         // flag per indicare se l'utente è abilitato: 0 non abilitato 1 abilitato
      string      name;
      string      surname;
      string      fiscalCode;
      long        certainty;         //"autorevolezza"
    };

    struct UtenteArgo {
      DBKey       tableKey;
      long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
      long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT
      ChangedBy   changes;

      DBKey       dbKeyUtente;
      long        defaultLocation;   // location di default per questo utente
      long long   privilegio;        // privilegio dell'utente
      string      programmaDiStampa; // percorso e nome del programma di stampa
      string      percorsoTemplate;  // percorso dove si trovano i template.
      string      percorsoFileStampa;// percorso dove si trova il file da cui stampare il report(file .dbf).
      string      note;
      long        certainty;         //"autorevolezza"
    };

    struct UtenteApplicativo {
      DBKey       tableKey;
      long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
      long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT
      ChangedBy   changes;

      DBKey       dbKeyUtente;
      long        idApplicativo;     // foreign key to ApplicationName table
      long        isSupervisore;     // flag che indica se l'utente ha privilegio di supervisore
      long        abilitato;         // flag per indicare se l'utente è abilitato
      long        certainty;         //"autorevolezza"
    };

    struct RuoloAndOggetto {
      DBKey       tableKey;
      long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
      long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

      ChangedBy   changes;

      DBKey       dbKeyRuolo;        // relazione con la tabella ruolo
      long long   idOggetto;         // relazione con la tabella Oggetto
      long        certainty;         //"autorevolezza"
    };

    // Relazione fra utente e ruolo. Chiave UtenteArgo nascosta
    struct UtenteAndRuolo {
      DBKey       tableKey;
      long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
      long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

      ChangedBy   changes;

      DBKey       dbKeyRuolo;        // relazione con la tabella ruolo
      long        certainty;         //"autorevolezza"
    };

    // Relazione fra utente e categoria. Chiave UtenteArgo nascosta
    struct UtenteAndCategoria {
      DBKey       tableKey;
      long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
      long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT

      ChangedBy   changes;

      long long   idCategoria;      // relazione con la tabella SCategory
      long        certainty;         //"autorevolezza"
    };

    typedef sequence <Ruolo>              RuoloSeq;
    typedef sequence <Utente>             UtenteSeq;
    typedef sequence <UtenteArgo>         UtenteArgoSeq;
    typedef sequence <long long>          CategoriaSeq;
//    typedef sequence <long long>          OggettoSeq;
//    typedef sequence <long long>          PrivilegioSeq;
//    typedef sequence <RuoloAndOggetto>    RuoloAndOggettoSeq;
    typedef sequence <UtenteAndCategoria> UtenteAndCategoriaSeq;
    typedef sequence <UtenteApplicativo>  UtenteApplicativoSeq;

    // Struttura utilizzata per restituire il profilo completo di un UtenteArgo
    struct ProfiloUtenteCompleto {
      RuoloSeq		        ruoli;
//      PrivilegioSeq		privilegi;
      CategoriaSeq	        categorie;
    };

    struct ASI_Gruppo {
      DBKey       tableKey;
      long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
      long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT
      ChangedBy   changes;

      string      nomeGruppo;
      string      descrizioneGruppo;
      long        abilitato; // flag
      long        idApplicativo;     // foreign key to ApplicationName table
      long        certainty;
    };

    struct ASI_PermessiGruppi {
      DBKey       tableKey;
      long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
      long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT
      ChangedBy   changes;

      DBKey       dbKeyASI_Gruppo;
      long long   idOggetto;
      long long   idPrivilegio;
      long        abilitato; // flag
      long        certainty;
    };

    struct ASI_LinkGruppiUtenti {
      DBKey       tableKey;
      long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
      long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT
      ChangedBy   changes;

      DBKey       dbKeyASI_Gruppo;
      DBKey       dbKeyUtenteApplicativo;
      long        certainty;
    };

    struct RASI_Struttura {
      DBKey       tableKey;
      long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
      long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT
      ChangedBy   changes;

      string      nomeStruttura;
      string      descrizioneStruttura;
      long        abilitato; // flag
      long        certainty;
    };

    struct RASI_Modulo {
      DBKey       tableKey;
      long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
      long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT
      ChangedBy   changes;

      string      nome;
      string      descrizione;
      string      nomeLogo;
      string      nomeAnteprima;
      string      comando;
      string      raggruppamento1;
      string      raggruppamento2;
      long        abilitato; // flag
      long        certainty;
    };

    typedef sequence <ASI_Gruppo>         ASI_GruppoSeq;
    typedef sequence <ASI_PermessiGruppi> ASI_PermessiGruppiSeq;
    typedef sequence <RASI_Struttura>     RASI_StrutturaSeq;
    typedef sequence <RASI_Modulo>        RASI_ModuloSeq;

    struct RASI_LinkStruttureGruppi {
      DBKey       tableKey;
      long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
      long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT
      ChangedBy   changes;

      DBKey       dbKeyRASI_Struttura;
      DBKey       dbKeyASI_Gruppo;
      long        certainty;
    };

    struct RASI_LinkGruppiModuli {
      DBKey       tableKey;
      long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
      long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT
      ChangedBy   changes;

      DBKey       dbKeyASI_Gruppo;
      DBKey       dbKeyRASI_Modulo;
      long        certainty;
    };

    struct RASI_LinkStruttureModuli {
      DBKey       tableKey;
      long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
      long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT
      ChangedBy   changes;

      DBKey       dbKeyRASI_Struttura;
      DBKey       dbKeyRASI_Modulo;
      long        certainty;
    };

    struct RASI_CronologiaModuli {
      DBKey       tableKey;
      long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
      long long   lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT
      ChangedBy   changes;

      DBKey       dbKeyRASI_Modulo;
      DBKey       dbKeyUtente;
      DBKey       dbKeyPerson;
      long long   dataUtilizzo;
      long        certainty;
    };

    typedef sequence <RASI_CronologiaModuli> RASI_CronologiaModuliSeq;

    struct Permesso {
      DBKey       tableKey;
      long long idOggetto;
      long long idPrivilegio;
      long abilitato;

    };

    typedef sequence <Permesso> PermessoSeq;

    struct CompleteUtente {
      Utente utenteAsi;
      DatiAsiSeq gruppi;
      PermessoSeq permessi; // Somma di tutti gli ASI_PermessiGruppi legati ai gruppi di cui l'utente fa parte
      UtenteApplicativo utenteAppl;
    };

    struct CompleteUtenteArgo {
      CompleteUtente complUtente;
      UtenteArgo utenteArg;
    };

    struct CompleteUtenteRasi {
      CompleteUtente complUtente;
      DatiAsiSeq strutture; // Somma di tutte le strutture legate ai gruppi di cui l'utente fa parte
      DatiAsiSeq moduli; // Somma di tutti i moduli legati ai gruppi di cui l'utente fa parte
    };

    typedef sequence <CompleteUtente> CompleteUtenteSeq;
    typedef sequence <CompleteUtenteRasi> CompleteUtenteRasiSeq;
    typedef sequence <CompleteUtenteArgo> CompleteUtenteArgoSeq;

    struct CompleteASIGruppo {
      ASI_Gruppo gruppo;
      DatiAsiSeq strutture;
      DatiAsiSeq moduli;
      DatiAsiSeq utenti;
      PermessoSeq permessi; // ASI_PermessiGruppi
    };

    struct CompleteRASIStruttura {
      RASI_Struttura struttura;
      DatiAsiSeq gruppi;
      DatiAsiSeq moduli; // Somma di tutti i moduli legati ai gruppi a cui la struttura è legata
      DatiAsiSeq utenti; // Somma di tutti gli utenti legati ai gruppi a cui la struttura è legata
    };

    struct CompleteRASIModulo {
      RASI_Modulo modulo;
      DatiAsiSeq gruppi;
      DatiAsiSeq strutture; // Somma di tutte le strutture legate ai gruppi a cui il modulo è legato
      DatiAsiSeq utenti; // Somma di tutti gli utenti legati ai gruppi a cui il modulo è legato
    };

    struct CompleteRASICronologiaModuli {
      RASI_CronologiaModuli cronologia;
      string nomeModulo;
      string nomeUtente;
      string cognomeUtente;
      string nomePersona;
      string cognomePersona;
    };

    struct CompleteOggetto {
      //campi propri di Oggetto
      string nome;
      string descrizione;
      long abilitato; // flag
      long idApplicativo; // id di ApplicationName
      // strutture associate
      PermessoSeq permessi;
      DatiAsiSeq gruppi;
      DatiAsiSeq strutture;
      DatiAsiSeq moduli;
      DatiAsiSeq utenti;

    };

    // struttura dati per passare i filtri per la ricerca di Utente
    struct FiltroUtente {
      DBKey tableKey;
      string user;
      string nome;
      string cognome;
      string codiceFiscale;
      long abilitato;
      long idApplicativo;
    };

    // struttura dati per passare i filtri per la ricerca di ASI_Gruppo, RASI_Struttura, RASI_Modulo
    struct FiltroASI {
      DBKey tableKey;
      string nome;
      string descrizione;
      long abilitato;
      long idApplicativo; // solo per ASI_Gruppo
    };

    // struttura dati per passare i filtri per la ricerca di ASI_PermessiGruppi
    struct FiltroASI_PermessiGruppi {
      DBKey       tableKey;
      DBKey       dbKeyASI_Gruppo;
      long long   idOggetto;
      long long   idPrivilegio;
      long        abilitato;
    };

    // struttura dati per passare i filtri per la ricerca di ASI_PermessiGruppi
    struct FiltroRASI_CronologiaModuli {
      DBKey       tableKey;
      DBKey       dbKeyRASI_Modulo;
      DBKey       dbKeyUtente;
      DBKey       dbKeyPerson;
      long long   dataUtilizzo;
    };

    // struttura dati per passare i filtri per la ricerca di ASI_Gruppo, RASI_Struttura, RASI_Modulo
    struct FiltroRASIModulo {
      DBKey tableKey;
      string nome;
      string descrizione;
      string      nomeLogo;
      string      nomeAnteprima;
      string      comando;
      string      raggruppamento1;
      string      raggruppamento2;
      long abilitato;
      long idApplicativo; // solo per ASI_Gruppo
    };

    // struttura dati rappresentante un oggetto
    struct Oggetto {
      long long id;
      string code;
      string description;
      long abilitato;
      long idApplicativo;
    };

    // struttura dati rappresentante un privilegio
    struct Privilegio {
      long long id;
      string code;
      string description;
      long idApplicativo;
    };

    typedef sequence <Oggetto> OggettoSeq;
    typedef sequence <Privilegio> PrivilegioSeq;


    interface GestoreUtente {
      CompleteUtente login(in ApplicationName appName, in long idApplicativo, in string userName, in string password) raises (ILException);
      void logout(in ApplicationName appName) raises (ILException);

      // Utente
      UtenteSeq getAllUtenteWithFiltri(in ApplicationName appName, in FiltroUtente filtro) raises (ILException);
      // Restituisce tutti gli Utenti non collegati ad un certo applicativo
      UtenteSeq getAllUtenteNonAppWithFiltri(in ApplicationName appName, in FiltroUtente filtro) raises (ILException);
      TransmissionStatus findUtenteWithKey(in ApplicationName appName, in long accessLevel, in DBKey dbKeyUtente, in long idApplicativo, out CompleteUtente complUtenteHolder);
      CompleteUtenteSeq  getAllComplUtenteWithFiltri(in ApplicationName appName, in FiltroUtente filtro) raises (ILException);
      TransmissionStatus createUtente(in ApplicationName appName, in long accessLevel, in Utente utente, out Utente newUtenteHolder);
      TransmissionStatus updateUtente(in ApplicationName appName, in long accessLevel, in Utente utente, out Utente newUtenteHolder);
      TransmissionStatus deleteUtente(in ApplicationName appName, in long accessLevel, in Utente utente);

      // ASI_Gruppo
      ASI_GruppoSeq getAllGruppoWithFiltri(in ApplicationName appName, in FiltroASI filtro) raises (ILException);
      TransmissionStatus findGruppoWithKey(in ApplicationName appName,  in long accessLevel, in DBKey dbKeyGruppo, out CompleteASIGruppo complGruppoHolder);
      TransmissionStatus createGruppo(in ApplicationName appName, in long accessLevel, in ASI_Gruppo gruppo, out ASI_Gruppo newGruppoHolder);
      TransmissionStatus updateGruppo(in ApplicationName appName, in long accessLevel, in ASI_Gruppo gruppo, out ASI_Gruppo newGruppoHolder);
      TransmissionStatus deleteGruppo(in ApplicationName appName, in long accessLevel, in ASI_Gruppo gruppo);

      TransmissionStatus linkGruppoUtenteAppl(in ApplicationName appName, in long accesslevel, in DBKey dbKeyGruppo, in DBKey dbKeyUtenteAppl);
      TransmissionStatus unlinkGruppoUtenteAppl(in ApplicationName appName, in long accesslevel, in DBKey dbKeyGruppo, in DBKey dbKeyUtenteAppl);

      // ASI_PermessiGruppi
      TransmissionStatus createPermessiGruppi(in ApplicationName appName, in long accessLevel, in ASI_PermessiGruppi permessiGruppi, out ASI_PermessiGruppi newPermessiGruppiHolder);
      TransmissionStatus updatePermessiGruppi(in ApplicationName appName, in long accessLevel, in ASI_PermessiGruppi permessiGruppi, out ASI_PermessiGruppi newPermessiGruppiHolder);
      TransmissionStatus deletePermessiGruppi(in ApplicationName appName, in long accessLevel, in ASI_PermessiGruppi permessiGruppi);
      ASI_PermessiGruppiSeq getAllPermessiGruppiWithFiltri(in ApplicationName appName, in FiltroASI_PermessiGruppi filtro) raises (ILException);

      // UtenteApplicativo
      TransmissionStatus createUtenteApplicativo(in ApplicationName appName, in long accessLevel, in UtenteApplicativo utenteAppl, out UtenteApplicativo utenteApplHolder);
      TransmissionStatus updateUtenteApplicativo(in ApplicationName appName, in long accessLevel, in UtenteApplicativo utenteAppl, out UtenteApplicativo utenteApplHolder);
      TransmissionStatus deleteUtenteApplicativo(in ApplicationName appName, in long accessLevel, in UtenteApplicativo utenteAppl);
      UtenteApplicativoSeq getAllUtenteApplicativo(in ApplicationName appName, in DBKey utenteKey, in long idApplicativo) raises (ILException);

      // Oggetti e privilegi
      OggettoSeq getAllOggetto(in ApplicationName appName, in long idApplicativo) raises (ILException);
      TransmissionStatus findOggettoWithId(in ApplicationName appName, in long idApplicativo, in long accessLevel, in long long idOggetto, out CompleteOggetto complOggettoHolder);
      PrivilegioSeq getAllPrivilegio(in ApplicationName appName, in long idApplicativo) raises (ILException);

      // metodo per liberare tutte le risorse.
      void disconnect() raises (ILException);
    };

    // interfaccia che definisce i metodi di un UtenteArgo
    interface UtenteRecord {
      UtenteArgo getUtenteArgoData();
      TransmissionStatus updateUtenteArgo(in ApplicationName appName, in long accessLevel, in UtenteArgo utenteArgo, out UtenteArgo utenteArgoHolder);
      TransmissionStatus deleteUtenteArgo(in ApplicationName appName, in long accessLevel);

      // Associazione con la categoria
      TransmissionStatus linkCategoria(in ApplicationName appName, in long accesslevel, in long long sCategory);
      TransmissionStatus unlinkCategoria(in ApplicationName appName, in long accesslevel, in long long sCategory);
      CategoriaSeq getAllCategoria(in ApplicationName appName, in long numMax) raises(ILException);

      // Associazione con il Ruolo
      TransmissionStatus linkRuolo(in ApplicationName appName, in long accesslevel, in Ruolo ruolo);
      TransmissionStatus unlinkRuolo(in ApplicationName appName, in long accesslevel, in Ruolo ruolo);
      RuoloSeq getAllRuolo(in ApplicationName appName, in long numMax) raises(ILException);

      ProfiloUtenteCompleto getProfiloUtente(in ApplicationName appName) raises(ILException);

      // metodo che restituisce i file di stampa presenti nel percorso dell'utente
      StringSeq getAllFileDiStampa(in ApplicationName appName) raises(ILException);
      // metodo che restituisce le directory di stampa presenti nel percorso dell'utente
      StringSeq getAllDirectoryDiStampa(in ApplicationName appName) raises(ILException);
    };

    interface GestoreProfilo {
      // Questo login deve richiamare al suo interno GestoreUtente.login()
      void login(in ApplicationName appName, in string userName, in string password, out ApplicationName appNameHolder) raises (ILException);

      //link a Ruolo to a Oggetto
      TransmissionStatus  linkOggettoToRuolo(in ApplicationName appName, in long accessLevel, in Ruolo theRuolo, in long long theObjectID);
      TransmissionStatus  linkAllOggettoToRuolo(in ApplicationName appName, in long accessLevel, in Ruolo theRuolo, in LongLongSeq theObjectID);
      TransmissionStatus  unlinkOggettoToRuolo(in ApplicationName appName, in long accessLevel, in Ruolo theRuolo, in long long theObjectID);
      TransmissionStatus  unlinkAllOggettoToRuolo(in ApplicationName appName, in long accessLevel, in Ruolo theRuolo, in LongLongSeq theObjectID);
      LongLongSeq getAllOggettoWithRuolo(in ApplicationName appName, in Ruolo ruolo, in long numMax) raises(ILException);

      // Gestione Ruolo
      TransmissionStatus updateRuolo(in ApplicationName appName, in long accessLevel, in Ruolo updatedRuolo, out Ruolo theNewRuolo);
      TransmissionStatus newRuolo(in ApplicationName appName, in long accessLevel, in Ruolo newRuolo, out Ruolo theNewRuolo);
      TransmissionStatus deleteRuolo(in ApplicationName appName, in long accessLevel, in Ruolo newRuolo);
      RuoloSeq getAllRuolo(in ApplicationName appName, in long numMax) raises(ILException);
      RuoloSeq getRuoloWithName(in ApplicationName appName, in string name, in long numMax) raises(ILException);
      Ruolo getRuolo(in ApplicationName appName, in DBKey chiave) raises(ILException);

      CompleteUtenteArgoSeq getAllComplUtenteArgoWithFiltriAndLocation(in ApplicationName appName, in FiltroUtente filtro, in long defaultLocation) raises (ILException);
      TransmissionStatus findUtenteArgo(in ApplicationName appName, in long accessLevel, in DBKey dbKeyUtenteArgo, out UtenteRecord utenteRecordHolder);
      TransmissionStatus createUtenteArgo(in ApplicationName appName, in long accessLevel, in UtenteArgo utenteArgo, in Utente utente, out UtenteRecord utenteRecordHolder);

      // metodo per liberare tutte le risorse.
      void disconnect() raises (ILException);
    };

    interface GestoreUtenteRasi {
      // Questo login deve richiamare al suo interno GestoreUtente.login()
      CompleteUtenteRasi login(in ApplicationName appName, in string userName, in string password) raises (ILException);

      // Restituisce tutti gli Utenti collegati a RASI
      CompleteUtenteRasiSeq getAllUtenteRasiWithFiltri(in ApplicationName appName, in FiltroUtente filtro) raises (ILException);

      TransmissionStatus findGruppoWithKey(in ApplicationName appName,  in long accessLevel, in DBKey dbKeyGruppo, out CompleteASIGruppo complGruppoHolder);

      // RASI_Struttura
      RASI_StrutturaSeq getAllStrutturaWithFiltri(in ApplicationName appName, in FiltroASI filtro) raises (ILException);
      TransmissionStatus findStrutturaWithKey(in ApplicationName appName, in long accessLevel, in DBKey dbKeyStruttura, out CompleteRASIStruttura complStrutturaHolder);
      TransmissionStatus createStruttura(in ApplicationName appName, in long accessLevel, in RASI_Struttura struttura, out RASI_Struttura newStrutturaHolder);
      TransmissionStatus updateStruttura(in ApplicationName appName, in long accessLevel, in RASI_Struttura struttura, out RASI_Struttura newStrutturaHolder);
      TransmissionStatus deleteStruttura(in ApplicationName appName, in long accessLevel, in RASI_Struttura struttura);

      // RASI_Modulo
      RASI_ModuloSeq getAllModuloWithFiltri(in ApplicationName appName, in FiltroRASIModulo filtro) raises (ILException);
      TransmissionStatus findModuloWithKey(in ApplicationName appName, in long accessLevel, in DBKey dbKeyModulo, out CompleteRASIModulo complModuloHolder);
      TransmissionStatus createModulo(in ApplicationName appName, in long accessLevel, in RASI_Modulo modulo, out RASI_Modulo newModuloHolder);
      TransmissionStatus updateModulo(in ApplicationName appName, in long accessLevel, in RASI_Modulo modulo, out RASI_Modulo newModuloHolder);
      TransmissionStatus deleteModulo(in ApplicationName appName, in long accessLevel, in RASI_Modulo modulo);

      TransmissionStatus linkStrutturaGruppo(in ApplicationName appName, in long accesslevel, in DBKey dbKeyStruttura, in DBKey dbKeyGruppo);
      TransmissionStatus unlinkStrutturaGruppo(in ApplicationName appName, in long accesslevel, in DBKey dbKeyStruttura, in DBKey dbKeyGruppo);
      TransmissionStatus linkStrutturaModulo(in ApplicationName appName, in long accesslevel, in DBKey dbKeyStruttura, in DBKey dbKeyModulo);
      TransmissionStatus unlinkStrutturaModulo(in ApplicationName appName, in long accesslevel, in DBKey dbKeyStruttura, in DBKey dbKeyModulo);
      TransmissionStatus linkGruppoModulo(in ApplicationName appName, in long accesslevel, in DBKey dbKeyGruppo, in DBKey dbKeyModulo);
      TransmissionStatus unlinkGruppoModulo(in ApplicationName appName, in long accesslevel, in DBKey dbKeyGruppo, in DBKey dbKeyModulo);

      // metodo per liberare tutte le risorse.
      void disconnect() raises (ILException);
    };

    interface GestoreStatisticheRasi {
      RASI_CronologiaModuliSeq getAllCronologiaModuliWithFiltri(in ApplicationName appName, in FiltroRASI_CronologiaModuli filtro) raises (ILException);
      TransmissionStatus findCronologiaModuliWithKey(in ApplicationName appName, in long accessLevel, in DBKey dbKeyCronologia, out CompleteRASICronologiaModuli complCronologiaHolder);
      TransmissionStatus createCronologiaModuli(in ApplicationName appName, in long accessLevel, in RASI_CronologiaModuli cronologia, out RASI_CronologiaModuli newCronologiaHolder);
      TransmissionStatus updateCronologiaModuli(in ApplicationName appName, in long accessLevel, in RASI_CronologiaModuli cronologia, out RASI_CronologiaModuli newCronologiaHolder);
      TransmissionStatus deleteCronologiaModuli(in ApplicationName appName, in long accessLevel, in RASI_CronologiaModuli cronologia);

      // metodo per liberare tutte le risorse.
      void disconnect() raises (ILException);
    };

    struct UnionInfoAndCard {
        // sezione UnionInfo
        DBKey       tableKey;
        long long   lastChanged;
        long        changes_cgdByLoc;
        long long   sCategoryAttivazione;
        long        locationAttivazione;
        long long   servCategoryAttivazione;
        long long   application;          // application that created this record
        DBKey       dbKeyUser;            // reference to the user that inserted the record
        long long   startDate;
        string      occasion;             // attivita' che ha dato luogo all'iscrizione
        long long   servActivity;         // attività di servizio che ha generato l'iscrizione
        long        locationTitolare;
        long long   sCategoryTitolare;
        long long   confederation;
        long long   oldConfederation;
        long        locationRiferimento;
        long long   sCategoryRiferimento;
        long long   subscriptionDate;
        long long   endDate;
        long long   cancellationDate;     // data di disdetta
        long long   reasonForEndingUnion;
        long long   delegationType;
        long long   delegationStartDate;
        long long   payMethod;
        long long   firstPayDate;         // decorrenza;
        long long   confCorporation;      // ente che conferma l'iscrizione
        long        createCard;
        long        flag1;                // I° iscrizione al sindacato
        long        flag2;                // Cambio scelta (Unitari) (SOLO LAVORO DIP e SOMM)
        long        flag3;                // I° iscrizione alla categoria
        long        flag4;                // Nuova delega UL (SOLO LAVORO DIP e SOMM)
        long        flag5;                // Reiscrizione categoria anni precedenti
        long        flag6;                // Trasferimento UL (SOLO LAVORO DIP e SOMM)
        long        flag7;                // Reiscrizione categoria anno in corso
        long        flag8;                // Cambio azzonamento

        // sezione Card
        DBKey       card_tableKey;
        long long   card_lastChanged;
        long        card_changes_cgdByLoc;
        DBKey       card_dbKeyUI;         // VERIFICARE SE ELIMINABILE: dovrebbe non servire
        long long   card_cardType;
        long        card_lastCardYear;
        long        card_previousCardYear;
        long long   card_lastCardSCategory;
        long long   card_lastCardConfed;
        long        card_toPrint;
        long long   card_reasonNotToPrint;
        long        card_lastPrintedCardYear;
        long long   card_printingDate;
        long long   card_cardDelType;

        // sezione UnionInfoAndWPNW
        DBKey       uwpnw_tableKey;
        long long   uwpnw_lastChanged;
        long        uwpnw_changes_cgdByLoc;
        DBKey       uwpnw_dbKeyUnionInfo; // VERIFICARE SE ELIMINABILE: dovrebbe non servire
        DBKey       uwpnw_dbKeyWPNW;
        long        uwpnw_tableTypeWPNW;  // 0 = Work, 1 = Pension, 2 = NotWorking, 3 = Pratica
    };

    // struttura utilizzata per la vista PERSONANDPROFFOREIGNPERSON eseguita
    // sulle tabelle Person, ProfPerson, ForeignPerson
    struct PersonAndProfForeignPerson {
        // sezione person
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long        changes_cgdByLoc;
        long long   birthDate;    //Julian date of birth
        string      deathDay;      // giorno di morte 2 caratteri
        string      deathMonth;    // mese di morte 2 caratteri
        string      deathYear;     // anno di morte con 4 caratteri
        long        isDead;       // flag per il decesso. 0 vivo - 1 deceduto
        long        isFemale;     // true (1) if female, false (0) if male
        string      privacy;
        long long   acQualification;  //Academic qualification: titolo di studio
        string      name;
        string      surname;
        string      husbandSurname;
        string      fiscalCode;
        long long   birthPlace;           //Luogo di Nascita (ID di Comuni)
        long long   nationality;
        long        isCEE;
        long long   idContinente;
        long long   maritalStatus;
        string      firstUnion;    // Anno di prima iscrizione a CGIL
        long        sendingComunications;  // flag per indicare l'invio di comunicazioni
                                          // 0 nessun invio - 1 invio comunicazioni
        // sezione ProfPerson
        DBKey       prof_tableKey;
        long long   prof_lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long        prof_changes_cgdByLoc;
        string      prof_IVANumber;
        long        prof_isMember;
        string      prof_sector;
        string      prof_details;

        // sezione ForeignPerson
        DBKey       stra_tableKey;
        long long   stra_lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long        stra_changes_cgdByLoc;
        long long   stra_dateOfArrival;
        long        stra_hasPermission;
        long long   stra_permissionEndDate;
        long        stra_hasFamilyDossier;
        long long   stra_famDossierEndDate;
        long long   stra_language1;
        long long   stra_language2;
        long long   stra_language3;
        long long   stra_language4;
        long        stra_hasNaturalization;
        long long   stra_naturStartDate;
        long long   stra_naturEndDate;

    };

    // struttura utilizzata per la vista WORKDONECOMPLETE eseguita
    // sulle tabelle WorkDone, CompanyDivision, Company e Address per Abbonamenti
    struct CompleteWorkDone {
        //sezione WorkDone
        DBKey       tableKey;
        long long   lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long        changes_cgdByLoc;
        DBKey       dbKeyPerson;
        DBKey       dbKeyCompanyDiv;            // reference to the Company Division
        long        dipIndipOSommin;
        long long   startDate;
        long long   endDate;
        long long   wType;
        long        flagCollocamentoObb;
        long long   sCategoryTitolare;
        long        locationTitolare;
        long long   idQualifica;
        string      qualDetail;
        string      department;
        long long   workStatus;
        long long   workStatusDate;
        string      settoreLavorativo;

        //sezione Company Division
        DBKey       cdiv_tableKey;
        long long   cdiv_lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long        cdiv_changes_cgdByLoc;
        DBKey       cdiv_dbKeyCompany;      // foreign key to Company table
        string      cdiv_name;
        long long   cdiv_compDivType;
        long long   cdiv_idEnteBilaterale;
        long long   cdiv_tipoScuola;         // id della classificazione tipoScuola
        long        cdiv_isScuola;           // 0 unità locale, 1 scuola
        long        cdiv_isEntePagatore;     // 0 non è entePagatore, 1 Ente Pagatore

        //sezione Company
        DBKey       comp_tableKey;
        long long   comp_lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   comp_lastSynchronized;  //readonly -- seconds since 1/1/1970 00:00 GMT
        string      comp_name;
        string      comp_IVAnumber;
        long long   comp_legalType;
        long long   comp_companyType;
        string      comp_fiscalCode;
        long        comp_isScuola;          // 0 unità locale, 1 scuola
        string      comp_codiceSI;          // codice strato integrazione, per canalizzazione
        string      comp_codiceAzienda;     // codice azienda, per canalizzazione

        //sezione address
        DBKey       addr_tableKey;
        long long   addr_lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long        addr_changes_cgdByLoc;
        DBKey       addr_dbKRec;  //to know which record in which table (Person, Company, CompanyDivision) this refers to
        long        addr_refApplication;   // Applicazione di riferimento
        long long   addr_refSCategory;     // Categoria sindacale di riferimento
        long long   addr_validFrom;
        long long   addr_validUntil;   // zero means no expiry
        long long   addr_addrType;     //foreign key to AddressType table
        string      addr_street;
        string      addr_co;
        long long   addr_toponimo;
        string      addr_streetNumber;
        string      addr_postCode;
        string      addr_streetNumberExt;
        string      addr_place;
        long long   addr_comune;           // Comune ID di Comuni
        string      addr_postPlace;
        string      addr_province;
        string      addr_telephone;
        string      addr_altroTelefono;        // AOMDB : 59
        string      addr_cellulare;            // AOMDB : 59
        string      addr_fax;
        string      addr_descrizioneFax;       // Modifica della parte "Numeri di telefono" AOMDB59
        string      addr_fax2;                 // AOMDB : 59
        string      addr_descrizioneFax2;      // Modifica della parte "Numeri di telefono" AOMDB59
        long        addr_oldLocation; // old azzonamento
        long        addr_location;    // "azzonamento"
        string      addr_email;
        string      addr_foreignAddress;

    };

    // struttura utilizzata per la vista COMPLETEWORKDONE eseguita
    // sulle tabelle WorkDone, CompanyDivision, Company e Address per la Stampa Analitica
    struct CompleteWorkDoneSA {
        //sezione WorkDone
        DBKey       tableKey;
        long long   lastChanged;           //readonly -- seconds since 1/1/1970 00:00 GMT
        long        changes_cgdByLoc;
        DBKey       dbKeyPerson;
        DBKey       dbKeyCompanyDiv;      // ?? reference to the Company Division
        long        dipIndipOSommin;
        long long   startDate;
        long long   endDate;
        DBKey       dbKeyContract;        //NEW: reference to contract
        long long   idContractSector;     //NEW: reference to idContractSector
        DBKey       dbKeyWork;            //NEW: reference to work
        long        isSomministratore;
        long long   wType;
        long        flagCollocamentoObb;
        long        isSocioLavoratore;
        string      payLevel;             //NEW: pay level
        long long   sCategoryTitolare;
        long        locationTitolare;
        long long   professionalArea;     //NEW: professionale area
        long        isAssociatoCassaEdile; //NEW: cassa edile
        long long   idQualifica;
        string      qualDetail;
        string      department;
        long long   workStatus;
        long long   workStatusDate;
        long long   reasonForEndingWPNW;  //NEW: ending reason
        string      settoreLavorativo;

        //sezione Company Division
        DBKey       cdiv_tableKey;
        long long   cdiv_lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long        cdiv_changes_cgdByLoc;
        string      cdiv_name;
        long long   cdiv_compDivType;
        long        cdiv_isAdminOffice;      //NEW: administration
        long long   cdiv_sectorAssociation;  //NEW: sector
        long long   cdiv_closingReason;      //NEW: closing reason
        long long   cdiv_closingDate;        //NEW: closing date
        long long   cdiv_idEnteBilaterale;
        long long   cdiv_tipoScuola;         // id della classificazione tipoScuola
        long        cdiv_isScuola;           // 0 unità locale, 1 scuola
        long        cdiv_numberOfEmployees;  		 //number of persons working for this Division
        long long   cdiv_numberOfEmplDate;
        string      cdiv_CCIAACode;
        string      cdiv_CCIAAProv;
        string      cdiv_webSite;
        long        cdiv_isEntePagatore;     		 // 0 non è entePagatore, 1 Ente Pagatore
        long        cdiv_isEBER;

        //sezione Company
        DBKey       comp_tableKey;
        long long   comp_lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long long   comp_levelOfInterest;   //NEW: interest level
        long        comp_changes_cgdByLoc;  //NEW: cgdByLoc
        string      comp_name;
        string      comp_IVAnumber;
        long long   comp_legalType;
        long long   comp_companyType;
        string      comp_fiscalCode;
        long        comp_isSomministratrice;
        long        comp_isHolding;              //NEW: holding
        long long   comp_companySituation;       //NEW: company situation
        long        comp_isScuola;          // 0 unità locale, 1 scuola
        string      comp_codiceSI;          // codice strato integrazione, per canalizzazione
        string      comp_codiceAzienda;     // codice azienda, per canalizzazione
        DBKey       comp_dbKeyHolding;
        string      comp_companyRegistryCode;
        string      comp_companyRegistryProv;
        string      comp_INPScode;
        string      comp_webSite;
        string      comp_syndicateGroup;

        //sezione address
        DBKey       addr_tableKey;
        long long   addr_lastChanged;       //readonly -- seconds since 1/1/1970 00:00 GMT
        long        addr_changes_cgdByLoc;
        long long   addr_refSCategory;     // Categoria sindacale di riferimento
        string      addr_street;
        long long   addr_toponimo;
        string      addr_streetNumber;
        string      addr_postCode;
        string      addr_streetNumberExt;
        long long   addr_comune;           // Comune ID di Comuni
        string      addr_postPlace;
        string      addr_province;
        string      addr_telephone;
        string      addr_altroTelefono;
        string      addr_fax;
        long        addr_location;    // "azzonamento"
        string      addr_email;
        long long   addr_validFrom;
        long long   addr_validUntil;

    };

    // Struttura usata per recuperare lo stato di avanzamento dell'esecuzione
    // di una configurazione dei report
    struct Progresso {
        long avanzamento;
        long totale;
    };


    typedef sequence<TBLConfigurazione> TBLConfigurazioneSeq;
    typedef sequence<TBLEsecuzione> TBLEsecuzioneSeq;
    typedef sequence<TBLConfESyndCat> TBLConfESyndCatSeq;
    typedef sequence<long long> TBLEntitaSeq;
    typedef sequence<TBLValoriFiltro> TBLValoriFiltroSeq;
    typedef sequence<TBLPersParametri> TBLPersParametriSeq;
    typedef sequence<TBLAzieParametri> TBLAzieParametriSeq;
    typedef sequence<TBLAbboParametri> TBLAbboParametriSeq;
    typedef sequence<long long> SCategorySeq;
    typedef sequence<long long>  TBLChiaviEntitaSeq;
    typedef sequence <UnionInfoAndCard> UnionInfoAndCardSeq;

    //Struct stampe centralizzate
    struct ParametroRPT {
      string nome; // nome del parametro
      StringSeq valori; //range dei valori che il parametro può assumere
    };

    struct DatoRPT {
      string nome; // nome del parametro valorizzato
      string valore; // valore del parametro
    };

    typedef sequence<ParametroRPT> ParametriRPT;
    typedef sequence<DatoRPT> DatiRPT;


    interface TBLConfigurazioneRecord {
      TBLConfigurazione getTBLConfigurazione(in ApplicationName appName) raises (ILException);
      TransmissionStatus  updateTBLConfigurazione(in ApplicationName appName, in long accessLevel, in TBLConfigurazione newConfig, out TBLConfigurazione result);
      TransmissionStatus  deleteTBLConfigurazione(in ApplicationName appName, in long accessLevel, in TBLConfigurazione newConfig);
      TransmissionStatus  newTBLEsecuzione(in ApplicationName appName, in long accessLevel, in TBLEsecuzione newEsec, out TBLEsecuzione resEsec, in boolean isAppend);
      TransmissionStatus  deleteTBLEsecuzione(in ApplicationName appName, in long accessLevel,  in TBLEsecuzione newEsec);
      TransmissionStatus  deleteAllTBLEsecuzione(in ApplicationName appName, in long accessLevel,  in TBLEsecuzioneSeq newEsec);

      TBLEsecuzioneSeq  getAllTBLEsecuzione(in ApplicationName appName, in long maxNum) raises (ILException);
      TBLEsecuzioneSeq  getTBLEsecBetween(in ApplicationName appName, in long long dataEsecDa, in long long dataEsecA, in long maxNum) raises (ILException);
      TBLEsecuzioneSeq  getTBLEsecForNomeTabellone(in ApplicationName appName, in string nomeTbl, in long maxNum) raises (ILException);
      TBLEsecuzioneSeq  getTBLEsecForOperatore(in ApplicationName appName, in DBKey op, in long maxNum) raises (ILException);

      SCategorySeq  getAllSCategory(in ApplicationName appName, in long numMax) raises(ILException);
      TransmissionStatus  linkAllSCategory(in ApplicationName appName, in long accesslevel, in SCategorySeq arraySCategory);
      TransmissionStatus  unlinkAllSCategory(in ApplicationName appName, in long accesslevel, in SCategorySeq arraySCategory);

      TBLEntitaSeq  getAllEntita(in ApplicationName appName, in long numMax) raises(ILException);
      TransmissionStatus  linkAllEntita(in ApplicationName appName, in long accesslevel, in TBLChiaviEntitaSeq arrayChiaviEntita);
      TransmissionStatus  unlinkAllEntita(in ApplicationName appName, in long accesslevel, in TBLChiaviEntitaSeq arrayChiaviEntita);

      TBLEntitaSeq  getAllEntitaPrinc(in ApplicationName appName, in long numMax) raises(ILException);
      TransmissionStatus  linkAllEntitaPrinc(in ApplicationName appName, in long accesslevel, in TBLChiaviEntitaSeq arrayChiaviEntita);
      TransmissionStatus  unlinkAllEntitaPrinc(in ApplicationName appName, in long accesslevel, in TBLChiaviEntitaSeq arrayChiaviEntita);

      TBLValoriFiltroSeq  getAllTBLValoriFiltro(in ApplicationName appName, in long numMax) raises(ILException);
      TransmissionStatus  newTBLValoriFiltro(in ApplicationName appName, in long accessLevel, in TBLValoriFiltro newValoriFiltro, out TBLValoriFiltro resValoriFiltro);
      TransmissionStatus  newAllTBLValoriFiltro(in ApplicationName appName, in long accessLevel, in TBLValoriFiltroSeq newArrayValoriFiltro, out TBLValoriFiltroSeq resArrayValoriFiltro);
      TransmissionStatus  updateTBLValoriFiltro(in ApplicationName appName, in long accessLevel, in TBLValoriFiltro newValoriFiltro, out TBLValoriFiltro resValoriFiltro);
      TransmissionStatus  deleteTBLValoriFiltro(in ApplicationName appName, in long accessLevel, in TBLValoriFiltro newValoriFiltro);

      TBLPersParametri  getTBLPersParametri(in ApplicationName appName) raises(ILException);
      TransmissionStatus  newTBLPersParametri(in ApplicationName appName, in long accessLevel, in TBLPersParametri newPersParam, out TBLPersParametri resPersParam);
      TransmissionStatus  updateTBLPersParametri(in ApplicationName appName, in long accessLevel, in TBLPersParametri newPersParam, out TBLPersParametri resPersParam);
      TransmissionStatus  deleteTBLPersParametri(in ApplicationName appName, in long accessLevel, in TBLPersParametri newPersParam);

      TBLAzieParametri  getTBLAzieParametri(in ApplicationName appName) raises(ILException);
      TransmissionStatus  newTBLAzieParametri(in ApplicationName appName, in long accessLevel, in TBLAzieParametri newAzieParam, out TBLAzieParametri resAzieParam);
      TransmissionStatus  updateTBLAzieParametri(in ApplicationName appName, in long accessLevel, in TBLAzieParametri newAzieParam, out TBLAzieParametri resAzieParam);
      TransmissionStatus  deleteTBLAzieParametri(in ApplicationName appName, in long accessLevel, in TBLAzieParametri newAzieParam);

      TBLAbboParametri  getTBLAbboParametri(in ApplicationName appName) raises(ILException);
      TransmissionStatus  newTBLAbboParametri(in ApplicationName appName, in long accessLevel, in TBLAbboParametri newAbboParam, out TBLAbboParametri resAbboParam);
      TransmissionStatus  updateTBLAbboParametri(in ApplicationName appName, in long accessLevel, in TBLAbboParametri newAbboParam, out TBLAbboParametri resAbboParam);
      TransmissionStatus  deleteTBLAbboParametri(in ApplicationName appName, in long accessLevel, in TBLAbboParametri newAbboParam);
      //Aggiornamento tabella CardTemp.DBF
      TransmissionStatus updateCardTemporaryDBF(in ApplicationName appName, in long accessLevel, in TBLEsecuzione newEsec, out TBLEsecuzione newEsecHolder);


      // Procedura d'interruzione dell'esecuzione della configurazione
      TransmissionStatus interrompiEsecuzione(in ApplicationName appName, in long accessLevel) raises(ILException);
      Progresso getProgresso(in ApplicationName appName, in long accessLevel, in long idEsecuzione);

      //Stampe centralizzate
      ParametriRPT getParametriRPT(in ApplicationName appName) raises(ILException);
      OctetSeq getPDFStampaCentralizzata(in ApplicationName appName, in DatiRPT datiRPT) raises(ILException);

    };



        interface GestoreReport {
      // metodi per la creazione e ricerca di TBLConfigurazione
      TransmissionStatus  createTBLConfigurazione(in ApplicationName appName, in long accessLevel, in TBLConfigurazione config, out TBLConfigurazioneRecord configRecord, out DBKey tableKey);
      TransmissionStatus  findTBLConfigurazioneKey(in ApplicationName appName, in DBKey tableKey, out TBLConfigurazioneRecord configRecord);
      TBLConfigurazioneSeq  findFirstXTBLConfigBetween(in ApplicationName appName, in long long dataCreazDa, in long long dataCreazA, in long maxNum) raises(ILException);
      TBLConfigurazioneSeq  findFirstXTBLConfigWithNome(in ApplicationName appName, in string nome, in long maxNum) raises(ILException);
      TBLConfigurazioneSeq  findFirstXTBLConfigWithNomeCode(in ApplicationName appName, in string nomeCode, in long maxNum) raises(ILException);
      TBLConfigurazioneSeq  findFirstXTBLConfigWithDesc(in ApplicationName appName, in string desc, in long maxNum) raises(ILException);
      TBLConfigurazioneSeq  findFirstXTBLConfigWithDescCode(in ApplicationName appName, in string descCode, in long maxNum) raises(ILException);
      TBLConfigurazioneSeq  findFirstXTBLConfigWithOperatore(in ApplicationName appName, in DBKey op, in long maxNum) raises(ILException);
      StringSeq  getAllRPTAreaPersona(in ApplicationName appName) raises (ILException);

      // metodo per liberare tutte le risorse.
      void disconnect() raises (ILException);

    };

    // Gestione delle notifiche
    struct EventTypeReport {
        long long eventCode;
        long      eventNum;
        long long eventMaxDate;
    };

    typedef sequence<EventTypeReport> EventReports;
    typedef sequence<EventNotification> EventSeq;

    struct EventFilter {
        LongLongSeq sCategory;
        LongLongSeq eventType;
        long long startDate;
        long long endDate;

    };




    // interfaccia  che definisce i metodi per la gestione delle notifiche
    interface GestoreNotifiche {
      //newEvent e updateEvent vengono gestite automaticamente
      // Cancella un record di EventNotification
      TransmissionStatus deleteEvent(in ApplicationName appName, in long accessLevel, in EventNotification event);

      EventSeq getAllEventsWithEventFilter(in ApplicationName appName, in EventFilter eventFilter, in long start, in long maxNum) raises(ILException);

      // Restituisce tutti i reportEvent
      EventReports getAllEventReports(in ApplicationName appName, in EventFilter eventFilter, in long start, in long numMax) raises(ILException);

      // Association with EventTypeForSyndCat
      TransmissionStatus linkAllEventTypeAndSCategories(in ApplicationName appName, in long accesslevel, in long long eventType, in LongLongSeq sCategories);
      TransmissionStatus unlinkAllEventTypeAndSCategories(in ApplicationName appName, in long accesslevel, in long long eventType, in LongLongSeq sCategories);
      LongLongSeq getAllSCategoriesWhithEventType(in ApplicationName appName, in long long eventType, in long numMax) raises(ILException);

      // Eventi per la gestione dell'integrazione SIINCA
      TransmissionStatus creaEventoCancellazioneUtenteINCA(in ApplicationName appName, in long accessLevel, in Person person);
      TransmissionStatus creaEventoCancellazionePraticaINCA(in ApplicationName appName, in long accessLevel, in Person person, in Dossier dossier);

      // Eventi per la gestione dell'integrazione DS
      TransmissionStatus creaEventoCancellazionePratica(in ApplicationName appName, in long accessLevel, in Person person, in Pratica pratica);

      // metodo per liberare tutte le risorse.
      void disconnect() raises (ILException);

    };


    module sync {
      // package per le classi della sincronizzazione

      // struct che contiene le chiavi dei record
      struct KeySync {
        long long loc;
        long long id;
      };

      // struct per identificare il server con cui si sta
      // comunicando
      struct Identity {
         string installationCode;
         string urlName;
         long comunicationsPort;
         string serverName;
         long location;
         string isRegionale;
      };

      struct SyncConfiguration {
        string name;
        boolean isActive;
        long long startDate;
        long repeat;
        Identity syncWithServer;
        StringSeq listTable;
        boolean syncAsParent;
      };

      typedef sequence<octet> OctetSeq;

      // struct che contiene i dati che descrivono l'esito
      // di una sincronizzazione su un record.
      struct ReportRecord {
        long idRecord;
        long idTable;
        KeySync recordKey;
        long long failureDate;
        //OctetSeq recordRemote;
        string recordRemoteOne;
        string recordRemoteTwo;
        long result;
        string descriptionResult;
        long isUpload;
      };

      typedef sequence<ReportRecord> ReportRecordSeq;

      // struct che contiene i dati che descrivono l'esito
      // di una sincronizzazione su una tabella.
      struct ReportTable {
        long idTable;
        long idSync;
        string tableName;
        long long lastSyncUpload;
        long long lastSyncUploadConfl;
        long long lastSyncDownload;
        long long lastSyncDownConfl;
        long numberRecordSync;
        long numberRecToChild;
        long numberRecToParent;
        long result;
        long hasSingleKey;
        string descriptionResult;
        ReportRecordSeq recordUploadConflict;
        ReportRecordSeq recordDownConflict;
        long numberRecordConflict;              // campo non salvato nel DB.
                                                // serve per calcolare il numero
                                                // totale dei record in conflitto
                                                // nel reportSync
      };

      typedef sequence<ReportTable> ReportTableSeq;

      // struct che contiene i dati che descrivono l'esito
      // di una sincronizzazione.
      struct ReportSync {
        long idSync;
        long long startDate;
        long long endDate;
        Identity child;
        Identity parent;
        long numberRecordConflict;
        long numberRecordSync;
        long result;
        ReportTableSeq tableSync;
        string descriptionResult;
      };

      // struct per restituire i record in errore
      struct RecordInError {
        long idReportRecord;
        DBKey recordKey;
        long long recordID;
      };

      typedef sequence<ReportSync> ReportSyncSeq;
      typedef sequence<RecordInError> RecordInErrorSeq;

      // struct che contiene i record in errore per una singola tabella
      struct TableRecordInError {
        string tableName;
        RecordInErrorSeq records;
      };

      typedef sequence<TableRecordInError> TableRecordInErrorSeq;

      // interfaccia per la sincronizzazione
      interface SyncProxy {

        long long getTime(in long long localTime) raises (ILException);

        ReportTable sendDataToSync(in OctetSeq tableData, in long long lastSync, in long long lastSyncConfl) raises (ILException);

        OctetSeq getDataToSync(in string tableName, in long territory,
                   in long long lastSynchronized, in long long lastSynchIgnore, in long long lastSynchConfl,
                   in long long startSync, in long maxRecord) raises (ILException);

        Identity getIdentity() raises (ILException);

        void sendReportTable(in ReportTable reportTable) raises (ILException);

        void disconnect();
      };

      // struct per effettaure la ricerca delle sincronizzazioni
      struct FiltroReportRecord {
        long result;
        long isUpload;
        long long idReportTable;
      };

      // struct per effettaure la ricerca delle sincronizzazioni
      struct FiltroReportTable {
        long         result;
        string       tableName;
        long long    idReportSync;
      };

      // struct per effettaure la ricerca delle sincronizzazioni
      struct FiltroReportSync {
        long long startDate;
        long long endDate;
        Identity child;
        Identity parent;
        long result;
      };

      // interfaccia che gestisce la lettura dei report delle sincronizzazione
      interface ReportSyncManager {

        ReportSync getReportSync(in long idReportSync) raises (ILException);

        ReportRecord getReportRecord(in long idReportRecord) raises (ILException);

        ReportSyncSeq getAllReportSync(in FiltroReportSync filtro, in long start, in long numMax) raises (ILException);

        ReportTableSeq getAllReportTable(in FiltroReportTable filtro, in long start, in long numMax) raises (ILException);

        ReportRecordSeq getAllReportRecord(in FiltroReportRecord filtro, in long start, in long numMax) raises (ILException);

        ReportTable getReportTable(in long idReportTable) raises (ILException);

        OctetSeq getComparisonRecord(in string tableName, in long idRecord) raises (ILException);

        OctetSeq getTableMetaData(in string nomeTabella) raises (ILException);

        TableRecordInErrorSeq getAllRecordInError(in long long date) raises (ILException);

        void remove() raises (ILException);  // Call this when finished
      };


    };  // fine del module sync

    interface IntegrationLayer {

      //Register an application (Push)
      AppProxy      registerPushApplication(in Application app, in boolean dontSendEvents);

      //Register a pull application
      PullAppProxy  registerPullApplication(in ApplicationName appName, in boolean dontSendEvents);

      //Get an object of type LookUptable
      LookUpTable   getLookUpTable(in ApplicationName appName);

      //Restituisce un oggetto di tipo GestoreDeleghe
      GestoreDeleghe   getGestoreDeleghe(in ApplicationName appName);

      //Restituisce un oggetto di tipo GestoreNotifiche
      GestoreNotifiche   getGestoreNotifiche(in ApplicationName appName);

      //Restituisce un oggetto di tipo GestoreProfilo
      GestoreProfilo   getGestoreProfilo(in ApplicationName appName);

      //Restituisce un oggetto di tipo GestoreReport
      GestoreReport getGestoreReport(in ApplicationName appName);

      //Restituisce un oggetto di tipo GestoreAbbonamenti
      GestoreAbbonamenti getGestoreAbbonamenti(in ApplicationName appName);

      //Restituisce un oggetto di tipo GestoreBatch
      GestoreBatch   getGestoreBatch(in ApplicationName appName);

      //Restituisce un oggetto di tipo GestoreRSU
      GestoreRSU   getGestoreRSU(in ApplicationName appName);

      GestoreUtente getGestoreUtente(in ApplicationName appName);
      GestoreUtenteRasi getGestoreUtenteRasi(in ApplicationName appName);
      GestoreStatisticheRasi getGestoreStatisticheRasi(in ApplicationName appName);

/*
      //Read only access to event data
      AnyTable      getAnyTable(in DBKey dbKeyRecord, in CDSTable tableType);
      */

      //Synchronization of databases
//      SyncProxy     getSyncProxy(in string user, in string password);
      sync::SyncProxy     getSyncProxy(in sync::Identity identity, in string nomeConf, in boolean isParent, in long long currentTime);

      sync::ReportSyncManager getReportSyncManager(in ApplicationName appName);

      void startSynchronize(in string nomeConf) raises(ILException);

      boolean isServerRegionale();
      string getCodiceInstallazione() raises(ILException);
      string getVersioneServer();
      void chiudiServer() raises(ILException);
    };

}; //end of module CGIL
