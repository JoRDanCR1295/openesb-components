/*******************************************************************************
 *  Copyright (c) 2005, 2006 Imola Informatica.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the LGPL License v2.1
 *  which accompanies this distribution, and is available at
 *  http://www.gnu.org/licenses/lgpl.html
 *******************************************************************************/
/**
 * 
 */
package it.imolinfo.jbi4cics.connection.jdbc.util;

import java.lang.reflect.Proxy;

/**
 * l'obiettivo di questi statemetn disconnessi è di consentire l'operativita anche in assenza di una connessione sql
 * il funzionamento generale è quello di "memorizzare" le operazioni che vengono su di essi chiamate e poi eseguirle
 * in sequenza quando viene assegnata la connessione.
 * In generale le operazioni che è possibile memorizzare sono quelle che ritornano void. Le altre possono essere eseguite solo 
 * quando lo statement è in fase connessa, in tal caso saranno immediatamente delegate al vero statement sottostante
 * @author raffaele
 *
 */
public class DisconnectedStatementFactory {
	
	/**
	 * void constructor.
	 */
	  public DisconnectedStatementFactory(){
		  super();
	  }

  public static DisconnectedStatement createDisconnectedStatement(){
    return (DisconnectedStatement)Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),new Class[]{DisconnectedStatement.class},new StatementInvocationHandler());
  }
  
  public static DisconnectedStatement createDisconnectedStatement(int resultSetType, int resultSetConcurrency){
    return (DisconnectedStatement)Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),new Class[]{DisconnectedStatement.class},new StatementInvocationHandler(resultSetType,resultSetConcurrency));
  }  
  
  public static DisconnectedStatement createDisconnectedStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability){
    return (DisconnectedStatement)Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),new Class[]{DisconnectedStatement.class},new StatementInvocationHandler(resultSetType,resultSetConcurrency,resultSetHoldability));
  }  
  
  public static DisconnectedPreparedStatement prepareDisconnectedStatement(String sql){
    return (DisconnectedPreparedStatement)Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),new Class[]{DisconnectedPreparedStatement.class},new PreparedStatementInvocationHandler(sql));
  }

  public static DisconnectedPreparedStatement prepareDisconnectedStatement(String sql, int autoGeneratedKeys){
    return (DisconnectedPreparedStatement)Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),new Class[]{DisconnectedPreparedStatement.class},new PreparedStatementInvocationHandler(sql, autoGeneratedKeys));
  }
  
  public static DisconnectedPreparedStatement prepareDisconnectedStatement(String sql, int[] columnIndexes){
    return (DisconnectedPreparedStatement)Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),new Class[]{DisconnectedPreparedStatement.class},new PreparedStatementInvocationHandler(sql, columnIndexes));
  }
  
  public static DisconnectedPreparedStatement prepareDisconnectedStatement(String sql, int resultSetType, int resultSetConcurrency){
    return (DisconnectedPreparedStatement)Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),new Class[]{DisconnectedPreparedStatement.class},new PreparedStatementInvocationHandler(sql, resultSetType, resultSetConcurrency));
  }
  
  public static DisconnectedPreparedStatement prepareDisconnectedStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability){
    return (DisconnectedPreparedStatement)Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),new Class[]{DisconnectedPreparedStatement.class},new PreparedStatementInvocationHandler(sql, resultSetType, resultSetConcurrency, resultSetHoldability));
  }
  
  public static DisconnectedPreparedStatement prepareDisconnectedStatement(String sql, String[] columnNames){
    return (DisconnectedPreparedStatement)Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),new Class[]{DisconnectedPreparedStatement.class},new PreparedStatementInvocationHandler(sql, columnNames));
  }  
  
  public static DisconnectedCallableStatement prepareDisconnectedCall(String sql){
    return (DisconnectedCallableStatement)Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),new Class[]{DisconnectedCallableStatement.class},new CallableStatementInvocationHandler(sql));
  }
  
  public static DisconnectedCallableStatement prepareDisconnectedCall(String sql, int resultSetType, int resultSetConcurrency){
    return (DisconnectedCallableStatement)Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),new Class[]{DisconnectedCallableStatement.class},new CallableStatementInvocationHandler(sql,resultSetType,resultSetConcurrency));
  }  
  
  public static DisconnectedCallableStatement prepareDisconnectedCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability){
    return (DisconnectedCallableStatement)Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),new Class[]{DisconnectedCallableStatement.class},new CallableStatementInvocationHandler(sql,resultSetType,resultSetConcurrency,resultSetHoldability));
  }      
  

}
