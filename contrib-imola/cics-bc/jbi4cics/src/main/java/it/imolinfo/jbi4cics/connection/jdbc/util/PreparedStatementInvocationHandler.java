/*******************************************************************************
 *  Copyright (c) 2005, 2006 Imola Informatica.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the LGPL License v2.1
 *  which accompanies this distribution, and is available at
 *  http://www.gnu.org/licenses/lgpl.html
 *******************************************************************************/
/**
 * 
 */
package it.imolinfo.jbi4cics.connection.jdbc.util;

import java.sql.SQLException;
import java.sql.Statement;

/**
 * @author raffaele
 *
 */
class PreparedStatementInvocationHandler extends StatementInvocationHandler {
  
  protected String sql;
  protected int autoGeneratedKeys=-1;
  protected int[] columnIndexes;
  protected String[] columnNames;

  /**
   * @param sql    The sql
   */
  public PreparedStatementInvocationHandler(String sql) {
    super();
    this.sql=sql;
  }
  
  /**
   * @param sql     The sql
   * @param autoGeneratedKeys    Theauto-generated key
   */
  public PreparedStatementInvocationHandler(String sql, int autoGeneratedKeys) {
    super();
    this.sql=sql;
    this.autoGeneratedKeys=autoGeneratedKeys;
  }
 
  /**
   * @param sql     The sql
   * @param columnIndexes    The column index
   */
  public PreparedStatementInvocationHandler(String sql, int[] columnIndexes) {
    super();
    this.sql=sql;    
    this.columnIndexes=columnIndexes;
  }

  /**
   * @param sql    The SQL
   * @param resultSetType    The result set type
   * @param resultSetConcurrency    The result set concurrency
   */
  public PreparedStatementInvocationHandler(String sql, int resultSetType, int resultSetConcurrency) {
    super(resultSetType, resultSetConcurrency);
    this.sql=sql;
  }

  /** 
   * @param sql    The SQL
   * @param resultSetType    The result set type
   * @param resultSetConcurrency    The result set concurrency
   * @param resultSetHoldability    The result set Hodability
   */
  public PreparedStatementInvocationHandler(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
    super(resultSetType, resultSetConcurrency, resultSetHoldability);
    this.sql=sql;
  }
  
  /**
   * @param sql    The sql
   * @param columnNames The colum names
   */
  public PreparedStatementInvocationHandler(String sql, String[] columnNames) {
    super();
    this.sql=sql;
    this.columnNames=columnNames;
  }
  
  /**
   * Metodo un po' complicato per capire quale era il costruttore e riprodure esattamente il comportamento desiderato.
   * @return    The created statement
   * @throws SQLException    The SQL exceptio
   */
  protected Statement createStatement() throws SQLException {
    if (columnNames!=null){
      return getConnection().prepareStatement(sql,columnNames);
    }
    if (columnIndexes!=null){
      return getConnection().prepareStatement(sql,columnIndexes);
    }
    if (autoGeneratedKeys!=-1){
      return getConnection().prepareStatement(sql,autoGeneratedKeys);
    }    
    return getConnection().prepareStatement(sql,resultSetType,resultSetConcurrency,resultSetHoldability);
  }

}
