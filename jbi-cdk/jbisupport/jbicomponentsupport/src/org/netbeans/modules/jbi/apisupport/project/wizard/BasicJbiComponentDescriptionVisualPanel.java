/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */


package org.netbeans.modules.jbi.apisupport.project.wizard;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.StringTokenizer;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;
import org.netbeans.modules.j2ee.deployment.devmodules.api.ServerManager;
import org.netbeans.modules.jbi.apisupport.JbiAdminSettings;
import org.netbeans.modules.jbi.apisupport.common.wizard.AbstractWizardModel;
import org.netbeans.modules.jbi.apisupport.common.wizard.AbstractWizardVisualPanel;
import org.netbeans.modules.jbi.apisupport.common.wizard.ProjectLocationVisualPanel;
import org.openide.WizardDescriptor;
import org.openide.util.NbBundle;
import org.openide.util.Utilities;

/** A single panel for a wizard - the GUI portion.
 *
 * @author chikkala
 */
public class BasicJbiComponentDescriptionVisualPanel
        extends AbstractWizardVisualPanel
        implements PropertyChangeListener {
    
    /** Create the wizard panel and set up some basic properties. */
    public BasicJbiComponentDescriptionVisualPanel(BasicJbiComponentProjectPanel panel) {
        super(panel);
        initComponents();
        // Provide a name in the title bar.
        setName(NbBundle.getMessage(BasicJbiComponentDescriptionVisualPanel.class,
                "TITLE_ComponentDescriptionPanel"));
        this.mEngineTypeValue =
                org.openide.util.NbBundle.getMessage(
                BasicJbiComponentDescriptionVisualPanel.class, "LBL_ServiceEngine");
        this.mBindingTypeValue =
                org.openide.util.NbBundle.getMessage(
                BasicJbiComponentDescriptionVisualPanel.class, "LBL_BindingComponent");
        
        this.mNameTF.getDocument().addDocumentListener( new DocumentListener() {
            
            public void insertUpdate(DocumentEvent e) {
                componentNameChanged();
            }
            
            public void removeUpdate(DocumentEvent e) {
                componentNameChanged();
            }
            
            public void changedUpdate(DocumentEvent e) {
                componentNameChanged();
            }
            
        });
        
        
        this.mPackageTF.getDocument().addDocumentListener( new DocumentListener() {
            
            public void insertUpdate(DocumentEvent e) {
                packageNameChanged();
            }
            
            public void removeUpdate(DocumentEvent e) {
                packageNameChanged();
            }
            
            public void changedUpdate(DocumentEvent e) {
                packageNameChanged();
            }
            
        });
        
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mPackageLBL = new javax.swing.JLabel();
        mPackageTF = new javax.swing.JTextField();
        mComponentTypeLBL = new javax.swing.JLabel();
        mComponentTypeValueLBL = new javax.swing.JLabel();
        mNameLBL = new javax.swing.JLabel();
        mNameTF = new javax.swing.JTextField();
        mDescriptionLBL = new javax.swing.JLabel();
        mDescriptionScrollPane = new javax.swing.JScrollPane();
        mDescriptionTA = new javax.swing.JTextArea();
        mTargetServerLBL = new javax.swing.JLabel();
        mTargetServerComboBox = new javax.swing.JComboBox();
        mTargetServerManageBTN = new javax.swing.JButton();
        mDummyLBL = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        mPackageLBL.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        mPackageLBL.setLabelFor(mPackageTF);
        mPackageLBL.setText(org.openide.util.NbBundle.getMessage(BasicJbiComponentDescriptionVisualPanel.class, "BasicCompDescPanel.ComponentSourcePackage.LBL"));
        mPackageLBL.setToolTipText(org.openide.util.NbBundle.getMessage(BasicJbiComponentDescriptionVisualPanel.class, "TIP_Package"));
        mPackageLBL.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 20, 5);
        add(mPackageLBL, gridBagConstraints);

        mPackageTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mPackageTFKeyTyped(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 20, 5);
        add(mPackageTF, gridBagConstraints);

        mComponentTypeLBL.setLabelFor(mComponentTypeValueLBL);
        mComponentTypeLBL.setText(org.openide.util.NbBundle.getMessage(BasicJbiComponentDescriptionVisualPanel.class, "BasicCompDescPanel.ComponentType.LBL"));
        mComponentTypeLBL.setToolTipText(org.openide.util.NbBundle.getMessage(BasicJbiComponentDescriptionVisualPanel.class, "TIP_LBL_ComponentType"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(mComponentTypeLBL, gridBagConstraints);

        mComponentTypeValueLBL.setText(org.openide.util.NbBundle.getMessage(BasicJbiComponentDescriptionVisualPanel.class, "LBL_ServiceEngine"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(mComponentTypeValueLBL, gridBagConstraints);

        mNameLBL.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        mNameLBL.setLabelFor(mNameTF);
        mNameLBL.setText(org.openide.util.NbBundle.getMessage(BasicJbiComponentDescriptionVisualPanel.class, "BasicCompDescPanel.ComponentName.LBL"));
        mNameLBL.setToolTipText(org.openide.util.NbBundle.getMessage(BasicJbiComponentDescriptionVisualPanel.class, "TIP_LBL_ComponentName"));
        mNameLBL.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(mNameLBL, gridBagConstraints);

        mNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mNameTFActionPerformed(evt);
            }
        });
        mNameTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mNameTFKeyTyped(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(mNameTF, gridBagConstraints);

        mDescriptionLBL.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        mDescriptionLBL.setLabelFor(mDescriptionTA);
        mDescriptionLBL.setText(org.openide.util.NbBundle.getMessage(BasicJbiComponentDescriptionVisualPanel.class, "BasicCompDescPanel.ComponentDesc.LBL"));
        mDescriptionLBL.setToolTipText(org.openide.util.NbBundle.getMessage(BasicJbiComponentDescriptionVisualPanel.class, "TIP_LBL_ComponentDescription"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(mDescriptionLBL, gridBagConstraints);

        mDescriptionScrollPane.setPreferredSize(new java.awt.Dimension(4, 40));
        mDescriptionTA.setFont(new java.awt.Font("SansSerif", 0, 12));
        mDescriptionTA.setMargin(new java.awt.Insets(1, 1, 1, 1));
        mDescriptionTA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mDescriptionTAKeyTyped(evt);
            }
        });

        mDescriptionScrollPane.setViewportView(mDescriptionTA);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(mDescriptionScrollPane, gridBagConstraints);

        mTargetServerLBL.setText(org.openide.util.NbBundle.getBundle(BasicJbiComponentDescriptionVisualPanel.class).getString("BasicCompDescPanel.TargetServer.LBL"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 5, 5, 5);
        add(mTargetServerLBL, gridBagConstraints);

        mTargetServerComboBox.setModel(getTargetServerComboBoxModel());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 5, 5, 5);
        add(mTargetServerComboBox, gridBagConstraints);

        mTargetServerManageBTN.setText(org.openide.util.NbBundle.getBundle(BasicJbiComponentDescriptionVisualPanel.class).getString("BasicCompDescPanel.TargetServer.Manage.BTN"));
        mTargetServerManageBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mTargetServerManageBTNActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 5, 5);
        add(mTargetServerManageBTN, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        add(mDummyLBL, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents
    
    private void mTargetServerManageBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mTargetServerManageBTNActionPerformed
        // TODO add your handling code here:
        invokeServerManager();
    }//GEN-LAST:event_mTargetServerManageBTNActionPerformed
    
    private void mPackageTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mPackageTFKeyTyped
        // TODO add your handling code here:
        this.mPackageNameEdited = true;
    }//GEN-LAST:event_mPackageTFKeyTyped
    
    private void mDescriptionTAKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_mDescriptionTAKeyTyped
    {//GEN-HEADEREND:event_mDescriptionTAKeyTyped
        // TODO add your handling code here:
        this.mCompDescEdited = true;
    }//GEN-LAST:event_mDescriptionTAKeyTyped
    
    private void mNameTFKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_mNameTFKeyTyped
    {//GEN-HEADEREND:event_mNameTFKeyTyped
        // TODO add your handling code here:
        this.mCompNameEdited = true;
    }//GEN-LAST:event_mNameTFKeyTyped
    
    private void mNameTFActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mNameTFActionPerformed
    {//GEN-HEADEREND:event_mNameTFActionPerformed
        // TODO add your handling code here:
        this.mCompNameEdited = true;
    }//GEN-LAST:event_mNameTFActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel mComponentTypeLBL;
    private javax.swing.JLabel mComponentTypeValueLBL;
    private javax.swing.JLabel mDescriptionLBL;
    private javax.swing.JScrollPane mDescriptionScrollPane;
    private javax.swing.JTextArea mDescriptionTA;
    private javax.swing.JLabel mDummyLBL;
    private javax.swing.JLabel mNameLBL;
    private javax.swing.JTextField mNameTF;
    private javax.swing.JLabel mPackageLBL;
    private javax.swing.JTextField mPackageTF;
    private javax.swing.JComboBox mTargetServerComboBox;
    private javax.swing.JLabel mTargetServerLBL;
    private javax.swing.JButton mTargetServerManageBTN;
    // End of variables declaration//GEN-END:variables
    
    private String mEngineTypeValue =  "Service Engine";
    private String mBindingTypeValue =  "Binding Component";
    private boolean mValidPackageName = true;
    private boolean mValidComponentName = true;
    
    private boolean mPackageNameEdited = false;
    private boolean mCompNameEdited = false;
    private boolean mCompDescEdited = false;
    
    private String mCompType = JbiComponentProjectWizardModel.SERVICE_ENGINE_COMP_TYPE;
    
    private DefaultComboBoxModel mTargetServerComboBoxModel = null;
    private Map mTargetMap = null;
    
    public DefaultComboBoxModel getTargetServerComboBoxModel() {
        if ( this.mTargetServerComboBoxModel == null ) {
            this.mTargetMap = new HashMap();
            JbiAdminSettings[] list = JbiAdminSettings.JbiAdminSettingsImpl.getAllJbiAdminSettings();
            for ( int i=0; i < list.length; ++i) {
                this.mTargetMap.put(list[i].getAppServerId(), list[i]);
            }
            // System.out.println("# of JbiAdmins " + list.length);
            this.mTargetServerComboBoxModel = new DefaultComboBoxModel(list);
        }
        return this.mTargetServerComboBoxModel;
    }
    
    private void selectTargetServer(String targetServerID) {
        DefaultComboBoxModel comboBoxModel = getTargetServerComboBoxModel();
        JbiAdminSettings adminSettings = (JbiAdminSettings) this.mTargetMap.get(targetServerID);
        if ( adminSettings == null ) {
            // get the default settings
            for ( Iterator itr = this.mTargetMap.values().iterator(); itr.hasNext(); ) {
                adminSettings = (JbiAdminSettings) itr.next();
                if ( !JbiAdminSettings.UNKNOWN_SERVER_ID.equals(adminSettings.getAppServerId()) ) {
                    break;
                }
            }
        }
        comboBoxModel.setSelectedItem(adminSettings);
    }
    
    private void invokeServerManager() {
        
        JbiAdminSettings adminSettings = (JbiAdminSettings) this.getTargetServerComboBoxModel().getSelectedItem();
        String lastSelectedServerID = JbiAdminSettings.UNKNOWN_SERVER_ID;
        if ( adminSettings != null ) {
            lastSelectedServerID = adminSettings.getAppServerId();
        }
        String serverID = null;
        if ( lastSelectedServerID != null && !JbiAdminSettings.UNKNOWN_SERVER_ID.equals(lastSelectedServerID)) {
            serverID = lastSelectedServerID;
        }
        ServerManager.showCustomizer(serverID);
        
        this.mTargetServerComboBoxModel = null;
        DefaultComboBoxModel comboBoxModel = getTargetServerComboBoxModel();
        this.mTargetServerComboBox.setModel(comboBoxModel);
        
        if ( JbiAdminSettings.UNKNOWN_SERVER_ID.equals(lastSelectedServerID)) {
            for ( Iterator itr = this.mTargetMap.values().iterator(); itr.hasNext(); ) {
                adminSettings = (JbiAdminSettings) itr.next();
                lastSelectedServerID = adminSettings.getAppServerId();
                if ( !JbiAdminSettings.UNKNOWN_SERVER_ID.equals(lastSelectedServerID) ) {
                    break;
                }
            }
        }
        
        this.selectTargetServer(lastSelectedServerID);
        
    }
    
    private boolean canUpdateModelFromProjectName() {
        return !(this.mPackageNameEdited && this.mCompNameEdited && this.mCompDescEdited);
    }
    
    // update the asainfo until user edit the info.
    private void updateModelFromProjectName(JbiComponentProjectWizardModel wizModel) {
        if ( !canUpdateModelFromProjectName()) {
            return;
        }
        String prjName = wizModel.getProjectName();
        String compType = wizModel.getComponentType();
        
        if ( prjName != null && prjName.trim().length() > 0 ) {
            if ( !this.mCompNameEdited ) {
                wizModel.setComponentName(JbiComponentProjectWizardModel.getComponentName(prjName, compType));
            }
            
            if ( !this.mCompDescEdited ) {
                String compName = wizModel.getComponentName();
                wizModel.setComponentDescription(JbiComponentProjectWizardModel.getComponentDescription(compName, compType));
            }
            
            if ( !this.mPackageNameEdited ) {
                wizModel.setPackageName(JbiComponentProjectWizardModel.getPackageName(prjName, compType));
            }
        }
    }
    
    private String toComponentTypeValue(String compType) {
        if ( JbiComponentProjectWizardModel.BINDING_COMPONENT_COMP_TYPE.equalsIgnoreCase(compType)) {
            return this.mBindingTypeValue;
        } else {
            return this.mEngineTypeValue;
        }
    }
    
    public void loadFromWizardModel(AbstractWizardModel wizModel) {
        JbiComponentProjectWizardModel compWizModel = (JbiComponentProjectWizardModel)wizModel;
        this.mCompType = compWizModel.getComponentType();
        
        updateModelFromProjectName(compWizModel);
        
        this.mComponentTypeValueLBL.setText(toComponentTypeValue(compWizModel.getComponentType()));
        
        String compName = compWizModel.getComponentName();
        if ( compName != null ) {
            compName = compName.trim();
        }
        this.mNameTF.setText(compName);
        
        this.mDescriptionTA.setText(compWizModel.getComponentDescription());
        String pkgName = compWizModel.getPackageName();
        if ( pkgName != null ) {
            pkgName = pkgName.trim();
        }
        this.mPackageTF.setText(pkgName);
        
        this.selectTargetServer(compWizModel.getTargetServerID());
    }
    
    public void saveToWizardModel(AbstractWizardModel wizModel) {
        JbiComponentProjectWizardModel compWizModel = (JbiComponentProjectWizardModel)wizModel;
        
        String name = this.mNameTF.getText().trim();
        String desc = this.mDescriptionTA.getText();
        String packageName = this.mPackageTF.getText().trim();
        compWizModel.setComponentName(name);
        compWizModel.setComponentDescription(desc);
        compWizModel.setPackageName(packageName);
        JbiAdminSettings adminSettings = (JbiAdminSettings) this.getTargetServerComboBoxModel().getSelectedItem();
        if ( adminSettings != null ) {
            compWizModel.setTargetServerID(adminSettings.getAppServerId());
        }
    }
    
    public void validateVisualPanel(AbstractWizardModel wizModel) throws org.openide.WizardValidationException {
        // do nothing.
        // check for the valid package name.
    }
    
    public boolean isValidVisualPanel(AbstractWizardModel wizModel) {
        WizardDescriptor wizardDescriptor = wizModel.getWizardDescriptor();
        wizardDescriptor.putProperty( "WizardPanel_errorMessage", "" );
        
        if (!this.mValidPackageName ) {
            wizardDescriptor.putProperty( "WizardPanel_errorMessage", // NOI18N
                    NbBundle.getMessage(BasicJbiComponentDescriptionVisualPanel.class,"ERROR_InvalidPackageName"));
            return false;
        }
        
        if (!this.mValidComponentName) {
            wizardDescriptor.putProperty( "WizardPanel_errorMessage", // NOI18N
                    NbBundle.getMessage(BasicJbiComponentDescriptionVisualPanel.class,"ERROR_InvalidComponentName"));
            return false;
        }
        
        return true;
    }
    
    private boolean isValidPackageName(String pkgName) {
        String trimedPkgName = pkgName.trim();
        if ( trimedPkgName.length() == 0 ) {
            return false; // don't allow root package eventhough it is valid
        }
        
        StringTokenizer tk = new StringTokenizer(trimedPkgName, "."); //NOI18N
        boolean valid = true;
        while (tk.hasMoreTokens()) {
            String token = tk.nextToken();
            if (token.length() == 0 || !Utilities.isJavaIdentifier(token)) {
                valid = false;
                break;
            }
        }
        
        return valid;
    }
    
    private void packageNameChanged() {
        String pkgName = this.mPackageTF.getText();
        this.mValidPackageName = isValidPackageName(pkgName);
        this.getWizardPanel().fireChangeEvent();
    }
    
    private boolean isValidComponentName(String name) {
        // for now, the package name validity is same as the component name validity
        return isValidPackageName(name); // TODO add a common method for the validation of the name, pkg name
    }
    
    private void componentNameChanged() {
        String compName = this.mNameTF.getText();
        this.mValidComponentName = isValidComponentName(compName);
        if ( !this.mCompDescEdited ) {
            this.mDescriptionTA.setText(JbiComponentProjectWizardModel.getComponentDescription(compName, this.mCompType));
        }
        this.getWizardPanel().fireChangeEvent();
    }
    
    private void updateGUIFromProjectNameChange(String prjName) {
        
        if ( !canUpdateModelFromProjectName()) {
            return;
        }
        
        if ( prjName != null && prjName.trim().length() > 0 ) {
            if ( !this.mCompNameEdited ) {
                this.mNameTF.setText(JbiComponentProjectWizardModel.getComponentName(prjName, this.mCompType));
            }
            
//            if ( !this.mCompDescEdited ) {
//                String compName = this.mNameTF.getText().trim();
//                this.mDescriptionTA.setText(JbiComponentProjectWizardModel.getComponentDescription(compName, this.mCompType));
//            }
            
            if ( !this.mPackageNameEdited ) {
                this.mPackageTF.setText(JbiComponentProjectWizardModel.getPackageName(prjName, this.mCompType));
            }
        }
        
    }
    
    public void propertyChange(PropertyChangeEvent event) {
        if (ProjectLocationVisualPanel.PROP_PROJECT_NAME.equals(event.getPropertyName())) {
            String newProjectName = (String)event.getNewValue();
            newProjectName = ( newProjectName != null ) ? newProjectName.trim() : "" ;
            updateGUIFromProjectNameChange(newProjectName);
        }
    }
}
