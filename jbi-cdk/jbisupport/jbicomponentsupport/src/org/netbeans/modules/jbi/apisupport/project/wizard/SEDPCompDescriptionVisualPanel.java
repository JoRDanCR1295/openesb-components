/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */


package org.netbeans.modules.jbi.apisupport.project.wizard;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.StringTokenizer;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.modules.jbi.apisupport.common.wizard.AbstractWizardModel;
import org.netbeans.modules.jbi.apisupport.common.wizard.AbstractWizardVisualPanel;
import org.netbeans.modules.jbi.apisupport.common.wizard.ProjectLocationVisualPanel;
import org.openide.WizardDescriptor;
import org.openide.util.NbBundle;
import org.openide.util.Utilities;

/** A single panel for a wizard - the GUI portion.
 *
 * @author chikkala
 */
public class SEDPCompDescriptionVisualPanel
        extends AbstractWizardVisualPanel
        implements PropertyChangeListener {
    
    /** Create the wizard panel and set up some basic properties. */
    public SEDPCompDescriptionVisualPanel(DeployPluginProjectPanel panel) {
        super(panel);
        initComponents();
        // Provide a name in the title bar.
        setName(NbBundle.getMessage(BCDPCompDescriptionVisualPanel.class,
                "TITLE_ComponentDescriptionPanel"));
        this.mEngineTypeValue =
                org.openide.util.NbBundle.getMessage(
                BCDPCompDescriptionVisualPanel.class, "LBL_ServiceEngine");
        this.mBindingTypeValue =
                org.openide.util.NbBundle.getMessage(
                BCDPCompDescriptionVisualPanel.class, "LBL_BindingComponent");
        
        this.mNameTF.getDocument().addDocumentListener( new DocumentListener() {
            
            public void insertUpdate(DocumentEvent e) {
                componentNameChanged();
            }
            
            public void removeUpdate(DocumentEvent e) {
                componentNameChanged();
            }
            
            public void changedUpdate(DocumentEvent e) {
                componentNameChanged();
            }
            
        });
        
        
        this.mPackageTF.getDocument().addDocumentListener( new DocumentListener() {
            
            public void insertUpdate(DocumentEvent e) {
                packageNameChanged();
            }
            
            public void removeUpdate(DocumentEvent e) {
                packageNameChanged();
            }
            
            public void changedUpdate(DocumentEvent e) {
                packageNameChanged();
            }
            
        });
        
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mPackageLBL = new javax.swing.JLabel();
        mPackageTF = new javax.swing.JTextField();
        mComponentTypeLBL = new javax.swing.JLabel();
        mComponentTypeValueLBL = new javax.swing.JLabel();
        mNameLBL = new javax.swing.JLabel();
        mNameTF = new javax.swing.JTextField();
        mDescriptionLBL = new javax.swing.JLabel();
        mDescriptionScrollPane = new javax.swing.JScrollPane();
        mDescriptionTA = new javax.swing.JTextArea();
        mPrjTypePanel = new javax.swing.JPanel();
        mPrjNamespaceLBL = new javax.swing.JLabel();
        mPrjNamespaceTF = new javax.swing.JTextField();
        mPrivateNSLBL = new javax.swing.JLabel();
        mPrivateNSTF = new javax.swing.JTextField();
        mDummyLBL = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        mPackageLBL.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        mPackageLBL.setLabelFor(mPackageTF);
        mPackageLBL.setText(org.openide.util.NbBundle.getMessage(SEDPCompDescriptionVisualPanel.class, "BasicCompDescPanel.ComponentSourcePackage.LBL")); // NOI18N
        mPackageLBL.setToolTipText(org.openide.util.NbBundle.getMessage(SEDPCompDescriptionVisualPanel.class, "TIP_Package")); // NOI18N
        mPackageLBL.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 20, 5);
        add(mPackageLBL, gridBagConstraints);

        mPackageTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mPackageTFKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 20, 5);
        add(mPackageTF, gridBagConstraints);

        mComponentTypeLBL.setLabelFor(mComponentTypeValueLBL);
        mComponentTypeLBL.setText(org.openide.util.NbBundle.getMessage(SEDPCompDescriptionVisualPanel.class, "BasicCompDescPanel.ComponentType.LBL")); // NOI18N
        mComponentTypeLBL.setToolTipText(org.openide.util.NbBundle.getMessage(SEDPCompDescriptionVisualPanel.class, "TIP_LBL_ComponentType")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(mComponentTypeLBL, gridBagConstraints);

        mComponentTypeValueLBL.setText(org.openide.util.NbBundle.getMessage(SEDPCompDescriptionVisualPanel.class, "LBL_ServiceEngine")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(mComponentTypeValueLBL, gridBagConstraints);

        mNameLBL.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        mNameLBL.setLabelFor(mNameTF);
        mNameLBL.setText(org.openide.util.NbBundle.getMessage(SEDPCompDescriptionVisualPanel.class, "BasicCompDescPanel.ComponentName.LBL")); // NOI18N
        mNameLBL.setToolTipText(org.openide.util.NbBundle.getMessage(SEDPCompDescriptionVisualPanel.class, "TIP_LBL_ComponentName")); // NOI18N
        mNameLBL.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(mNameLBL, gridBagConstraints);

        mNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mNameTFActionPerformed(evt);
            }
        });
        mNameTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mNameTFKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(mNameTF, gridBagConstraints);

        mDescriptionLBL.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        mDescriptionLBL.setLabelFor(mDescriptionTA);
        mDescriptionLBL.setText(org.openide.util.NbBundle.getMessage(SEDPCompDescriptionVisualPanel.class, "BasicCompDescPanel.ComponentDesc.LBL")); // NOI18N
        mDescriptionLBL.setToolTipText(org.openide.util.NbBundle.getMessage(SEDPCompDescriptionVisualPanel.class, "TIP_LBL_ComponentDescription")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(mDescriptionLBL, gridBagConstraints);

        mDescriptionScrollPane.setPreferredSize(new java.awt.Dimension(4, 40));

        mDescriptionTA.setFont(new java.awt.Font("SansSerif", 0, 12));
        mDescriptionTA.setMargin(new java.awt.Insets(1, 1, 1, 1));
        mDescriptionTA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mDescriptionTAKeyTyped(evt);
            }
        });
        mDescriptionScrollPane.setViewportView(mDescriptionTA);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(mDescriptionScrollPane, gridBagConstraints);

        mPrjTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(SEDPCompDescriptionVisualPanel.class, "TITLE_se.project.type"))); // NOI18N
        mPrjTypePanel.setLayout(new java.awt.GridBagLayout());

        mPrjNamespaceLBL.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        mPrjNamespaceLBL.setLabelFor(mPrjNamespaceTF);
        mPrjNamespaceLBL.setText(org.openide.util.NbBundle.getMessage(SEDPCompDescriptionVisualPanel.class, "LBL_project.namespace")); // NOI18N
        mPrjNamespaceLBL.setToolTipText(org.openide.util.NbBundle.getMessage(SEDPCompDescriptionVisualPanel.class, "TIP_LBL_Namespace")); // NOI18N
        mPrjNamespaceLBL.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPrjTypePanel.add(mPrjNamespaceLBL, gridBagConstraints);

        mPrjNamespaceTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mPrjNamespaceTFActionPerformed(evt);
            }
        });
        mPrjNamespaceTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mPrjNamespaceTFKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPrjTypePanel.add(mPrjNamespaceTF, gridBagConstraints);

        mPrivateNSLBL.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        mPrivateNSLBL.setLabelFor(mPrivateNSTF);
        mPrivateNSLBL.setText(org.openide.util.NbBundle.getMessage(SEDPCompDescriptionVisualPanel.class, "LBL_prj.private.namespace")); // NOI18N
        mPrivateNSLBL.setToolTipText(org.openide.util.NbBundle.getMessage(SEDPCompDescriptionVisualPanel.class, "TIP_LBL_NSPrefix")); // NOI18N
        mPrivateNSLBL.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPrjTypePanel.add(mPrivateNSLBL, gridBagConstraints);

        mPrivateNSTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mPrivateNSTFActionPerformed(evt);
            }
        });
        mPrivateNSTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mPrivateNSTFKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mPrjTypePanel.add(mPrivateNSTF, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(mPrjTypePanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        add(mDummyLBL, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    
    private void mPrivateNSTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mPrivateNSTFKeyTyped
        this.mPrjPvtNSEdited = true;
}//GEN-LAST:event_mPrivateNSTFKeyTyped
    
    private void mPrivateNSTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mPrivateNSTFActionPerformed
        this.mPrjPvtNSEdited = true;
}//GEN-LAST:event_mPrivateNSTFActionPerformed
    
    private void mPrjNamespaceTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mPrjNamespaceTFKeyTyped
        this.mNamespaceEdited = true;
}//GEN-LAST:event_mPrjNamespaceTFKeyTyped
    
    private void mPrjNamespaceTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mPrjNamespaceTFActionPerformed
        this.mNamespaceEdited = true;
}//GEN-LAST:event_mPrjNamespaceTFActionPerformed
    
    private void mPackageTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mPackageTFKeyTyped
        // TODO add your handling code here:
        this.mPackageNameEdited = true;
    }//GEN-LAST:event_mPackageTFKeyTyped
    
    private void mDescriptionTAKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_mDescriptionTAKeyTyped
    {//GEN-HEADEREND:event_mDescriptionTAKeyTyped
        // TODO add your handling code here:
        this.mCompDescEdited = true;
    }//GEN-LAST:event_mDescriptionTAKeyTyped
    
    private void mNameTFKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_mNameTFKeyTyped
    {//GEN-HEADEREND:event_mNameTFKeyTyped
        // TODO add your handling code here:
        this.mCompNameEdited = true;
    }//GEN-LAST:event_mNameTFKeyTyped
    
    private void mNameTFActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mNameTFActionPerformed
    {//GEN-HEADEREND:event_mNameTFActionPerformed
        // TODO add your handling code here:
        this.mCompNameEdited = true;
    }//GEN-LAST:event_mNameTFActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel mComponentTypeLBL;
    private javax.swing.JLabel mComponentTypeValueLBL;
    private javax.swing.JLabel mDescriptionLBL;
    private javax.swing.JScrollPane mDescriptionScrollPane;
    private javax.swing.JTextArea mDescriptionTA;
    private javax.swing.JLabel mDummyLBL;
    private javax.swing.JLabel mNameLBL;
    private javax.swing.JTextField mNameTF;
    private javax.swing.JLabel mPackageLBL;
    private javax.swing.JTextField mPackageTF;
    private javax.swing.JLabel mPrivateNSLBL;
    private javax.swing.JTextField mPrivateNSTF;
    private javax.swing.JLabel mPrjNamespaceLBL;
    private javax.swing.JTextField mPrjNamespaceTF;
    private javax.swing.JPanel mPrjTypePanel;
    // End of variables declaration//GEN-END:variables
    
    private String mEngineTypeValue =  "Service Engine";
    private String mBindingTypeValue =  "Binding Component";
    
    private boolean mValidPackageName = true;
    private boolean mValidComponentName = true;
    
    private boolean mPackageNameEdited = false;
    private boolean mCompNameEdited = false;
    private boolean mCompDescEdited = false;
    
    private boolean mNamespaceEdited = false;
    private boolean mPrjPvtNSEdited = false;
    
    private String mCompType = DeployPluginWizardModel.SERVICE_ENGINE_COMP_TYPE;
    
    private boolean canUpdateModelFromProjectName() {
        return !(this.mPackageNameEdited && this.mCompNameEdited && this.mCompDescEdited &&
                this.mNamespaceEdited && this.mPrjPvtNSEdited);
    }
    
    // update the asainfo until user edit the info.
    private void updateModelFromProjectName(DeployPluginWizardModel wizModel) {
        if ( !canUpdateModelFromProjectName()) {
            return;
        }
        String prjName = wizModel.getProjectName();
        String compType = wizModel.getComponentType();
        
        if ( prjName != null && prjName.trim().length() > 0 ) {
            if ( !this.mCompNameEdited ) {
                wizModel.setComponentName(
                        DeployPluginWizardModel.getComponentName(
                        DeployPluginWizardModel.SAMPLE_SE_NAME, compType));
            }
            
            if ( !this.mCompDescEdited ) {
                String compName = wizModel.getComponentName();
                wizModel.setComponentDescription(DeployPluginWizardModel.getComponentDescription(compName, compType));
            }
            
            if ( !this.mPackageNameEdited ) {
                wizModel.setPackageName(DeployPluginWizardModel.getPackageName(prjName, compType));
            }
                        
        }
    }
    
    private String toComponentTypeValue(String compType) {
        if ( DeployPluginWizardModel.BINDING_COMPONENT_COMP_TYPE.equalsIgnoreCase(compType)) {
            return this.mBindingTypeValue;
        } else {
            return this.mEngineTypeValue;
        }
    }
    
    public void loadFromWizardModel(AbstractWizardModel wizModel) {
        SEDeployPluginWizardModel pluginWizModel = (SEDeployPluginWizardModel)wizModel;
        
        this.mCompType = pluginWizModel.getComponentType();
        
        updateModelFromProjectName(pluginWizModel);
        
        this.mComponentTypeValueLBL.setText(toComponentTypeValue(pluginWizModel.getComponentType()));
        
        String compName = pluginWizModel.getComponentName();
        if ( compName != null ) {
            compName = compName.trim();
        }
        this.mNameTF.setText(compName);
        
        this.mDescriptionTA.setText(pluginWizModel.getComponentDescription());
        String pkgName = pluginWizModel.getPackageName();
        if ( pkgName != null ) {
            pkgName = pkgName.trim();
        }
        this.mPackageTF.setText(pkgName);
        
        String prjTypeNS = pluginWizModel.getProjectTypeNS();
        String prjPvtNS = pluginWizModel.getProjectPrivateNS();
        if ( prjTypeNS == null ) {
            prjTypeNS = pluginWizModel.getDefProjectTypeNS(compName);
        }
        this.mPrjNamespaceTF.setText(pluginWizModel.getProjectTypeNS());
        this.mPrivateNSTF.setText(pluginWizModel.getProjectPrivateNS());
    }
    
    public void saveToWizardModel(AbstractWizardModel wizModel) {
        SEDeployPluginWizardModel pluginWizModel = (SEDeployPluginWizardModel)wizModel;
        
        String name = this.mNameTF.getText().trim();
        String desc = this.mDescriptionTA.getText();
        String packageName = this.mPackageTF.getText().trim();
        
        String prjTypeNS = this.mPrjNamespaceTF.getText().trim();
        String prjPrivateNS = this.mPrivateNSTF.getText().trim();
        
        pluginWizModel.setComponentName(name);
        pluginWizModel.setComponentDescription(desc);
        pluginWizModel.setPackageName(packageName);
        
        pluginWizModel.setProjectTypeNS(prjTypeNS);
        pluginWizModel.setProjectPrivateNS(prjPrivateNS);
    }
    
    public void validateVisualPanel(AbstractWizardModel wizModel) throws org.openide.WizardValidationException {
        // do nothing.
        // check for the valid package name.
    }
    
    @Override
    public boolean isValidVisualPanel(AbstractWizardModel wizModel) {
        WizardDescriptor wizardDescriptor = wizModel.getWizardDescriptor();
        wizardDescriptor.putProperty( "WizardPanel_errorMessage", "" );
        
        if (!this.mValidPackageName ) {
            wizardDescriptor.putProperty( "WizardPanel_errorMessage", // NOI18N
                    NbBundle.getMessage(BasicJbiComponentDescriptionVisualPanel.class,"ERROR_InvalidPackageName"));
            return false;
        }
        
        if (!this.mValidComponentName) {
            wizardDescriptor.putProperty( "WizardPanel_errorMessage", // NOI18N
                    NbBundle.getMessage(BasicJbiComponentDescriptionVisualPanel.class,"ERROR_InvalidComponentName"));
            return false;
        }
        
        return true;
    }
    
    private boolean isValidPackageName(String pkgName) {
        String trimedPkgName = pkgName.trim();
        if ( trimedPkgName.length() == 0 ) {
            return false; // don't allow root package eventhough it is valid
        }
        
        StringTokenizer tk = new StringTokenizer(trimedPkgName, "."); //NOI18N
        boolean valid = true;
        while (tk.hasMoreTokens()) {
            String token = tk.nextToken();
            if (token.length() == 0 || !Utilities.isJavaIdentifier(token)) {
                valid = false;
                break;
            }
        }
        
        return valid;
    }
    
    private void packageNameChanged() {
        String pkgName = this.mPackageTF.getText();
        this.mValidPackageName = isValidPackageName(pkgName);
        this.getWizardPanel().fireChangeEvent();
    }
    
    private boolean isValidComponentName(String name) {
        // for now, the package name validity is same as the component name validity
        return isValidPackageName(name); // TODO add a common method for the validation of the name, pkg name
    }
    
    private void componentNameChanged() {
        String compName = this.mNameTF.getText();
        this.mValidComponentName = isValidComponentName(compName);
        if ( !this.mCompDescEdited ) {
            this.mDescriptionTA.setText(DeployPluginWizardModel.getComponentDescription(compName, this.mCompType));
        }
        
        if ( !this.mNamespaceEdited ) {
            this.mPrjNamespaceTF.setText(SEDeployPluginWizardModel.getDefProjectTypeNS(compName));
        }
        
        if ( !this.mPrjPvtNSEdited ) {
          this.mPrivateNSTF.setText(SEDeployPluginWizardModel.getDefProjectPrivateNS(compName));  
        }
        
        this.getWizardPanel().fireChangeEvent();
    }
    
    private void updateGUIFromProjectNameChange(String prjName) {
        
        if ( !canUpdateModelFromProjectName()) {
            return;
        }
        
        if ( prjName != null && prjName.trim().length() > 0 ) {
//            if ( !this.mCompNameEdited ) {
//                this.mNameTF.setText(DeployPluginWizardModel.getComponentName(prjName, this.mCompType));
//            }
            
            if ( !this.mPackageNameEdited ) {
                this.mPackageTF.setText(DeployPluginWizardModel.getPackageName(prjName, this.mCompType));
            }
        }
        
    }
    
    public void propertyChange(PropertyChangeEvent event) {
        if (ProjectLocationVisualPanel.PROP_PROJECT_NAME.equals(event.getPropertyName())) {
            String newProjectName = (String)event.getNewValue();
            newProjectName = ( newProjectName != null ) ? newProjectName.trim() : "" ;
            updateGUIFromProjectNameChange(newProjectName);
        }
    }
}
