/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.jbi.apisupport.project.ui.customizer;

import java.awt.Component;
import java.awt.Container;
import java.awt.Dialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import org.netbeans.api.project.Project;
import org.netbeans.modules.j2ee.deployment.devmodules.api.ServerManager;
import org.netbeans.modules.jbi.apisupport.JbiAdminSettings;
import org.netbeans.modules.jbi.apisupport.project.JbiCompProject;
import org.netbeans.modules.jbi.apisupport.project.JbiCompProjectProperties;
import org.netbeans.modules.jbi.apisupport.project.SourceRoots;
import org.netbeans.modules.jbi.apisupport.project.classpath.ClassPathSupport;
import org.netbeans.spi.project.support.ant.EditableProperties;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.awt.MouseUtils;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;


/**
 *
 * @author  chikkala
 */
public class CustomizerRun extends JPanel implements HelpCtx.Provider {
    
    private JbiCompProject project;
    private CustomizerUIModel mUIModel;
    
    public CustomizerRun( CustomizerUIModel uiProperties ) {
        
        this.mUIModel = uiProperties;
        this.project = uiProperties.getProject();
        this.mAppServerIdDoc = uiProperties.AS_INSTANCE_ID_MODEL;
        
        initComponents();
        
        this.mASHomeTF.setDocument(uiProperties.AS_HOME_MODEL);
//        this.mJbiHomeTF.setDocument(uiProperties.JBI_HOME_MODEL);
        
        this.mHostTF.setDocument(uiProperties.JBI_HOST_MODEL);
        this.mPortTF.setDocument(uiProperties.JBI_PORT_MODEL);
        this.mUsernameTF.setDocument(uiProperties.JBI_USERNAME_MODEL);
        this.mPasswordField.setDocument(uiProperties.JBI_PASSWORD_MODEL);
        
        this.mJbiAntClassPathModel = uiProperties.JBI_ANT_TASKS_CLASSPATH_MODEL;
        
        this.mUseParamsChkBox.setModel(uiProperties.JBI_INSTALL_WITH_PARAMS_MODEL);
        
        hideTargetServerDetailsUI();
        
        // select target server.
        selectTargetServer();
        
        initInstallParamsEditor();
        
        
    }
    
    public HelpCtx getHelpCtx() {
        return new HelpCtx( CustomizerRun.class );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mTargetServerLBL = new javax.swing.JLabel();
        mTargetServerComboBox = new javax.swing.JComboBox();
        mTargetServerManageBTN = new javax.swing.JButton();
        mASHomeLBL = new javax.swing.JLabel();
        mASHomeTF = new javax.swing.JTextField();
        mASHomeBrowseBTN = new javax.swing.JButton();
        mJbiHomeLBL = new javax.swing.JLabel();
        mJbiHomeTF = new javax.swing.JTextField();
        mJbiHomeBrowseBTN = new javax.swing.JButton();
        mHostLBL = new javax.swing.JLabel();
        mHostTF = new javax.swing.JTextField();
        mPortLBL = new javax.swing.JLabel();
        mPortTF = new javax.swing.JTextField();
        mUsernameLBL = new javax.swing.JLabel();
        mUsernameTF = new javax.swing.JTextField();
        mPasswordLBL = new javax.swing.JLabel();
        mPasswordField = new javax.swing.JPasswordField();
        mUseParamsChkBox = new javax.swing.JCheckBox();
        mParamsPanel = new InstallParamEditor();
        mFillLBL = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        mTargetServerLBL.setText("Target Server:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 6, 4);
        add(mTargetServerLBL, gridBagConstraints);

        mTargetServerComboBox.setModel(getTargetServerComboBoxModel());
        mTargetServerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mTargetServerComboBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 6, 4);
        add(mTargetServerComboBox, gridBagConstraints);

        mTargetServerManageBTN.setText("Manage...");
        mTargetServerManageBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mTargetServerManageBTNActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 6, 2);
        add(mTargetServerManageBTN, gridBagConstraints);

        mASHomeLBL.setText("AppServer Home:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 2, 2, 4);
        add(mASHomeLBL, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 2, 2, 4);
        add(mASHomeTF, gridBagConstraints);

        mASHomeBrowseBTN.setText("Browse...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(6, 2, 2, 2);
        add(mASHomeBrowseBTN, gridBagConstraints);

        mJbiHomeLBL.setText("JBI Home:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 6, 4);
        add(mJbiHomeLBL, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 6, 4);
        add(mJbiHomeTF, gridBagConstraints);

        mJbiHomeBrowseBTN.setText("Browse...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 6, 2);
        add(mJbiHomeBrowseBTN, gridBagConstraints);

        mHostLBL.setText("Host:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 2, 2, 4);
        add(mHostLBL, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(6, 2, 2, 4);
        add(mHostTF, gridBagConstraints);

        mPortLBL.setText("Port:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 4);
        add(mPortLBL, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 4);
        add(mPortTF, gridBagConstraints);

        mUsernameLBL.setText("Username:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 4);
        add(mUsernameLBL, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 4);
        add(mUsernameTF, gridBagConstraints);

        mPasswordLBL.setText("Password:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 4);
        add(mPasswordLBL, gridBagConstraints);

        mPasswordField.setText("jPasswordField1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 4);
        add(mPasswordField, gridBagConstraints);

        mUseParamsChkBox.setText("Use install parameters");
        mUseParamsChkBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        mUseParamsChkBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        mUseParamsChkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mUseParamsChkBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 2, 2, 4);
        add(mUseParamsChkBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(mParamsPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        add(mFillLBL, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void mUseParamsChkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mUseParamsChkBoxActionPerformed
        // TODO add your handling code here:
        boolean enabled = this.mUseParamsChkBox.isSelected();
        // System.out.println("##### Param panel enable " + enable);
        // setEnabledRecursively(this.mParamsPanel, enable);
        this.mParamsPanel.setEnabled(enabled);
    }//GEN-LAST:event_mUseParamsChkBoxActionPerformed

    private void mTargetServerManageBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mTargetServerManageBTNActionPerformed
// TODO add your handling code here:
        invokeServerManager();
    }//GEN-LAST:event_mTargetServerManageBTNActionPerformed

    private void mTargetServerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mTargetServerComboBoxActionPerformed
// TODO add your handling code here:
        JbiAdminSettings adminSettings = (JbiAdminSettings) this.getTargetServerComboBoxModel().getSelectedItem();
        this.updateJbiAdminSettings(adminSettings);
    }//GEN-LAST:event_mTargetServerComboBoxActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton mASHomeBrowseBTN;
    private javax.swing.JLabel mASHomeLBL;
    private javax.swing.JTextField mASHomeTF;
    private javax.swing.JLabel mFillLBL;
    private javax.swing.JLabel mHostLBL;
    private javax.swing.JTextField mHostTF;
    private javax.swing.JButton mJbiHomeBrowseBTN;
    private javax.swing.JLabel mJbiHomeLBL;
    private javax.swing.JTextField mJbiHomeTF;
    private javax.swing.JPanel mParamsPanel;
    private javax.swing.JPasswordField mPasswordField;
    private javax.swing.JLabel mPasswordLBL;
    private javax.swing.JLabel mPortLBL;
    private javax.swing.JTextField mPortTF;
    private javax.swing.JComboBox mTargetServerComboBox;
    private javax.swing.JLabel mTargetServerLBL;
    private javax.swing.JButton mTargetServerManageBTN;
    private javax.swing.JCheckBox mUseParamsChkBox;
    private javax.swing.JLabel mUsernameLBL;
    private javax.swing.JTextField mUsernameTF;
    // End of variables declaration//GEN-END:variables
    
    private DefaultComboBoxModel mTargetServerComboBoxModel = null;
    private Map mTargetMap = null;
    private Document mAppServerIdDoc = null;
    
    private DefaultListModel mJbiAntClassPathModel;  // initialized by the ui model in the constructor
                
    private void setDocumentText(Document doc, String text) {
        try {
            doc.remove(0, doc.getLength());
            doc.insertString(0, text, null);
        } catch (BadLocationException ex) {
            ex.printStackTrace();
            // ingore           
        }
    }
    
    private String getDocumentText(Document doc) {
        try {
            return doc.getText(0, doc.getLength());
        } catch (BadLocationException ex) {
            ex.printStackTrace();
            return "";
        }
    }

    public void hideTargetServerDetailsUI() {
        
        this.mJbiHomeLBL.setVisible(false);
        this.mJbiHomeTF.setVisible(false);
        this.mJbiHomeBrowseBTN.setVisible(false); 
        
        this.mASHomeLBL.setVisible(false);
        this.mASHomeTF.setVisible(false);
        this.mASHomeBrowseBTN.setVisible(false);
        
        this.mHostLBL.setVisible(false);
        this.mHostTF.setVisible(false);

        this.mPortLBL.setVisible(false);
        this.mPortTF.setVisible(false);
        
        this.mUsernameLBL.setVisible(false);
        this.mUsernameTF.setVisible(false);
        
        this.mPasswordLBL.setVisible(false);
        this.mPasswordField.setVisible(false);        
        
    }
    
    public void initInstallParamsEditor() {
        
        InstallParamEditor editor = (InstallParamEditor) this.mParamsPanel;
        FileObject prjDir = this.project.getProjectDirectory();
        FileObject paramsFO;
        String paramsPath = "install-params.properties";
        try {
            paramsFO = FileUtil.createData(prjDir, this.mUIModel.JBI_INSTALL_PARAMS_FILE_VALUE);
            File paramsFile = FileUtil.toFile(paramsFO);
            paramsPath = paramsFile.getAbsolutePath();
            
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        editor.setDefaultInstallParamsFile(paramsPath);
        editor.setInstallParamsFile(paramsPath);
        editor.updateInstallParamsFileGUI();
        editor.loadInstallParamsFile();
        
        this.mUIModel.INSTALL_PARAMS_MODEL = editor.getInstallParamTableModel();
        this.setDocumentText(this.mUIModel.JBI_INSTALL_PARAMS_FILE_MODEL, editor.getInstallParamsFile());
        
        boolean enabled = this.mUseParamsChkBox.isSelected();
        this.mParamsPanel.setEnabled(enabled);
    }
    
    public DefaultComboBoxModel getTargetServerComboBoxModel() {
        if ( this.mTargetServerComboBoxModel == null ) {
            this.mTargetMap = new HashMap();
            JbiAdminSettings[] list = JbiAdminSettings.JbiAdminSettingsImpl.getAllJbiAdminSettings();
            for ( int i=0; i < list.length; ++i) {
                this.mTargetMap.put(list[i].getAppServerId(), list[i]);
            }
            // System.out.println("# of JbiAdmins " + list.length);
            this.mTargetServerComboBoxModel = new DefaultComboBoxModel(list);
        }
        return this.mTargetServerComboBoxModel;
    }
    
    private void selectTargetServer() {
        DefaultComboBoxModel comboBoxModel = getTargetServerComboBoxModel();
        String targetServerId = getDocumentText(this.mAppServerIdDoc);
        JbiAdminSettings adminSettings = (JbiAdminSettings) this.mTargetMap.get(targetServerId);
        if ( adminSettings == null ) {
            // get the default settings 
            adminSettings = (JbiAdminSettings) this.mTargetMap.get(JbiAdminSettings.UNKNOWN_SERVER_ID);
        }
        comboBoxModel.setSelectedItem(adminSettings);
    }
    
    private void invokeServerManager() {
        
        JbiAdminSettings adminSettings = (JbiAdminSettings) this.getTargetServerComboBoxModel().getSelectedItem();
        String lastSelectedServerID = JbiAdminSettings.UNKNOWN_SERVER_ID;
        if ( adminSettings != null ) {
            lastSelectedServerID = adminSettings.getAppServerId();
        }
        String serverID = null;
        if ( lastSelectedServerID != null && !JbiAdminSettings.UNKNOWN_SERVER_ID.equals(lastSelectedServerID)) {
            serverID = lastSelectedServerID;
        }
        ServerManager.showCustomizer(serverID);
        
        this.mTargetServerComboBoxModel = null;
        DefaultComboBoxModel comboBoxModel = getTargetServerComboBoxModel();
        this.mTargetServerComboBox.setModel(comboBoxModel);
        
        if ( JbiAdminSettings.UNKNOWN_SERVER_ID.equals(lastSelectedServerID)) {
            for ( Iterator itr = this.mTargetMap.values().iterator(); itr.hasNext(); ) {
                adminSettings = (JbiAdminSettings) itr.next();
                lastSelectedServerID = adminSettings.getAppServerId();
                if ( !JbiAdminSettings.UNKNOWN_SERVER_ID.equals(lastSelectedServerID) ) {
                    break;
                }
            }
        }
        
        adminSettings = (JbiAdminSettings) this.mTargetMap.get(lastSelectedServerID);
        if ( adminSettings == null ) {
            adminSettings = JbiAdminSettings.JbiAdminSettingsImpl.getDefaultJbiAdminSettings();
        }
        comboBoxModel.setSelectedItem(adminSettings);        
    }
    
    private void updateJbiAntClassPathModel(JbiAdminSettings jbiSettings) {
        
        this.mJbiAntClassPathModel.clear();
        EditableProperties ep = new EditableProperties();
        
//            ep.setProperty(JbiCompProjectProperties.JBI_ANT_TASKS_CLASSPATH, new String[] { // NOI18N
//                JbiCompProjectProperties.GLASSFISH_ANT_TASKS_CLASSPATH_VALUE +":", // NOI18N
//                JbiCompProjectProperties.JBI_ANT_TASKS_GLASSFISH_V2_CLASSPATH_VALUE +":", // NOI18N
//                JbiCompProjectProperties.JBI_ANT_TASKS_JEE5SDK_CLASSPATH_VALUE // NOI18N
//            });
                        
        if ( jbiSettings.UNKNOWN_SERVER_ID.equalsIgnoreCase(jbiSettings.getAppServerId()) ) {
            ep.setProperty(JbiCompProjectProperties.JBI_ANT_TASKS_CLASSPATH, new String[] { // NOI18N
                JbiCompProjectProperties.GLASSFISH_ANT_TASKS_CLASSPATH_VALUE +":", // NOI18N
                JbiCompProjectProperties.JBI_ANT_TASKS_GLASSFISH_V2_CLASSPATH_VALUE +":", // NOI18N
                JbiCompProjectProperties.JBI_ANT_TASKS_JEE5SDK_CLASSPATH_VALUE // NOI18N
            });
//            System.out.println("UI updating the jbi ant task classpath for UNKNOWN Server");
        } else {
            if ( jbiSettings.isOpenESB2x()) {
                ep.setProperty(JbiCompProjectProperties.JBI_ANT_TASKS_CLASSPATH, new String[] { // NOI18N
                    JbiCompProjectProperties.GLASSFISH_ANT_TASKS_CLASSPATH_VALUE +":", // NOI18N
                    JbiCompProjectProperties.JBI_ANT_TASKS_GLASSFISH_V2_CLASSPATH_VALUE // NOI18N
                });
//                System.out.println("UI updating the jbi ant task classpath for OPENESB 2x");
            } else {
                ep.setProperty(JbiCompProjectProperties.JBI_ANT_TASKS_CLASSPATH, new String[] { // NOI18N
                    JbiCompProjectProperties.JBI_ANT_TASKS_JEE5SDK_CLASSPATH_VALUE // NOI18N
                });
//                System.out.println("UI updating the jbi ant task classpath for JavaEE u1, u2");
            }
        }
        
        String antTaskCp = ep.getProperty(JbiCompProjectProperties.JBI_ANT_TASKS_CLASSPATH);
        
//        System.out.println("UI update " + JbiCompProjectProperties.JBI_ANT_TASKS_CLASSPATH + " value : " + antTaskCp);
        
        for ( Iterator itr = this.mUIModel.cs.itemsIterator(antTaskCp); itr.hasNext();) {
            ClassPathSupport.Item item = (ClassPathSupport.Item) itr.next();            
            this.mJbiAntClassPathModel.addElement(item);
        }
        
//        for ( Enumeration itr = this.mJbiAntClassPathModel.elements(); itr.hasMoreElements() ; ) {
//          ClassPathSupport.Item item = (ClassPathSupport.Item) itr.nextElement();
//          System.out.println("XXX In UI update classpath Item " + item.getReference());
//        } 
        
    }
    
    private void updateJbiAdminSettings(JbiAdminSettings adminSettings) {
        if ( adminSettings == null ) {
            assert false : "jbi admin settings is null while updating the jbi settings from comp prj customizer run";
            return;
        }
        setDocumentText(this.mAppServerIdDoc, adminSettings.getAppServerId());
        
        this.mASHomeTF.setText(adminSettings.getAppServerHome());
        this.mJbiHomeTF.setText(adminSettings.getJbiHome());
        
        this.mHostTF.setText(adminSettings.getHost());
        this.mPortTF.setText(adminSettings.getPort());
        this.mUsernameTF.setText(adminSettings.getUsername());
        this.mPasswordField.setText(adminSettings.getPassword());      
        
        updateJbiAntClassPathModel(adminSettings);
    }
    
}
