/*
 * InstallParamEditor.java
 *
 * Created on February 23, 2007, 5:44 PM
 */

package org.netbeans.modules.jbi.apisupport.project.ui.customizer;

import java.awt.Component;
import java.awt.Container;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;
import org.netbeans.modules.jbi.apisupport.common.Util;

/**
 *
 * @author  chikkala
 */
public class InstallParamEditor extends javax.swing.JPanel  {
    
    /** Creates new form InstallParamEditor */
    public InstallParamEditor() {
        initComponents();
        this.mUseDefaultFileChkBox.setSelected(true);
        this.updateInstallParamsFileGUI();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mInstallParamsLBL = new javax.swing.JLabel();
        mInstallParamsTF = new javax.swing.JTextField();
        mInstallParamsBrowseBTN = new javax.swing.JButton();
        mUseDefaultFileLBL = new javax.swing.JLabel();
        mUseDefaultFileChkBox = new javax.swing.JCheckBox();
        mEditParamsLBL = new javax.swing.JLabel();
        mParamsTBLScrollPane = new javax.swing.JScrollPane();
        mParamsTBL = new javax.swing.JTable();
        mAddParamBTN = new javax.swing.JButton();
        mRemoveParamBTN = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        mInstallParamsLBL.setText("Install parameters file:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 2, 6, 4);
        add(mInstallParamsLBL, gridBagConstraints);

        mInstallParamsTF.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 2, 2, 4);
        add(mInstallParamsTF, gridBagConstraints);

        mInstallParamsBrowseBTN.setText("Browse...");
        mInstallParamsBrowseBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mInstallParamsBrowseBTNActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(6, 2, 2, 4);
        add(mInstallParamsBrowseBTN, gridBagConstraints);

        mUseDefaultFileLBL.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(mUseDefaultFileLBL, gridBagConstraints);

        mUseDefaultFileChkBox.setText("Use default parameters file");
        mUseDefaultFileChkBox.setActionCommand("Use default parameters file");
        mUseDefaultFileChkBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        mUseDefaultFileChkBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        mUseDefaultFileChkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mUseDefaultFileChkBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 4);
        add(mUseDefaultFileChkBox, gridBagConstraints);

        mEditParamsLBL.setText("Edit parameters in file");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 4);
        add(mEditParamsLBL, gridBagConstraints);
        mEditParamsLBL.getAccessibleContext().setAccessibleName("Edit Install parameters");

        mParamsTBL.setModel(getInstallParamTableModel());
        mParamsTBLScrollPane.setViewportView(mParamsTBL);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 4, 4);
        add(mParamsTBLScrollPane, gridBagConstraints);

        mAddParamBTN.setText("Add");
        mAddParamBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAddParamBTNActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 2, 2, 2);
        add(mAddParamBTN, gridBagConstraints);

        mRemoveParamBTN.setText("Remove");
        mRemoveParamBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mRemoveParamBTNActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 6, 2);
        add(mRemoveParamBTN, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents
    
    private void mInstallParamsBrowseBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mInstallParamsBrowseBTNActionPerformed
        // TODO add your handling code here:
        // select install params properties file
        String installParamsFile = "install-params.properties";
        this.setInstallParamsFile(installParamsFile);
        updateInstallParamsFileGUI();
    }//GEN-LAST:event_mInstallParamsBrowseBTNActionPerformed
    
    private void mUseDefaultFileChkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mUseDefaultFileChkBoxActionPerformed
        // TODO add your handling code here:
        updateInstallParamsFileGUI();
        
    }//GEN-LAST:event_mUseDefaultFileChkBoxActionPerformed
    
    private void mRemoveParamBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mRemoveParamBTNActionPerformed
        int idx = this.mParamsTBL.getSelectedRow();
        if ( idx >= 0 ) {
            this.getInstallParamTableModel().removeParam(idx);
        }
        
    }//GEN-LAST:event_mRemoveParamBTNActionPerformed
    
    private void mAddParamBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mAddParamBTNActionPerformed
        
        this.getInstallParamTableModel().addParam();
    }//GEN-LAST:event_mAddParamBTNActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton mAddParamBTN;
    private javax.swing.JLabel mEditParamsLBL;
    private javax.swing.JButton mInstallParamsBrowseBTN;
    private javax.swing.JLabel mInstallParamsLBL;
    private javax.swing.JTextField mInstallParamsTF;
    private javax.swing.JTable mParamsTBL;
    private javax.swing.JScrollPane mParamsTBLScrollPane;
    private javax.swing.JButton mRemoveParamBTN;
    private javax.swing.JCheckBox mUseDefaultFileChkBox;
    private javax.swing.JLabel mUseDefaultFileLBL;
    // End of variables declaration//GEN-END:variables
    
    private InstallParamTableModel mInstallParamModel;
    
    private String mDefParamsFile = "install-params.properties";
    
    private String mInstallParamsFile = "install-params.properties";
    
    public void setEnabled(boolean enabled) {
        super.setEnabled(enabled);
        Container root = this;
        for (Component c : root.getComponents()) {
            if (c instanceof Container) {
                Util.setEnabledRecursively((Container) c, enabled);
            } else {
                c.setEnabled(enabled);
            }
        }
        if ( enabled ) {
            updateInstallParamsFileGUI();
        }
    }
    
    public void updateInstallParamsFileGUI() {
        
        boolean selected = this.mUseDefaultFileChkBox.isSelected();
        if ( selected ) {
            // disable the browse button.
            this.mInstallParamsBrowseBTN.setEnabled(false);
            // use default
            this.mInstallParamsTF.setText(this.getDefaultInstallParamsFile());
            
        } else {
            // enable the browse button
            this.mInstallParamsBrowseBTN.setEnabled(true);
            // set the user selected
            this.mInstallParamsTF.setText(this.getInstallParamsFile());
        }
        
        // TODO: enable these two when the full support for selecting the
        // install params file is done
        this.mUseDefaultFileChkBox.setEnabled(false);
        this.mInstallParamsBrowseBTN.setEnabled(false);
        
    }
    
    public InstallParamTableModel getInstallParamTableModel() {
        if ( this.mInstallParamModel == null ) {
            this.mInstallParamModel = new InstallParamTableModel();
        }
        return mInstallParamModel;
    }
    
    public boolean isDefaultInstallParamsFileSelected() {
        if ( mInstallParamsFile == null ) {
            return true;
        }
        File defFile = new File(this.mDefParamsFile);
        File selectedFile = new File(this.mInstallParamsFile);
        return ( defFile.getAbsolutePath().equals(selectedFile.getAbsolutePath()) );
    }
    
    public void setDefaultInstallParamsFile(String paramsFile) {
        this.mDefParamsFile = paramsFile;
    }
    
    public String getDefaultInstallParamsFile() {
        return this.mDefParamsFile;
    }
    
    public void setInstallParamsFile(String paramsFile) {
        this.mInstallParamsFile = paramsFile;
    }
    
    public String getInstallParamsFile() {
        return this.mInstallParamsFile;
    }
    
    public Properties getInstallParams() {
        return this.getInstallParamTableModel().getParams();
    }
    
    public boolean isEdited() {
        return this.getInstallParamTableModel().isEdited();
    }
    
    // TODO: use EditableProperties ant project utilites for managing install params properties
    public void saveInstallParamsFileChanges() {
        
        File paramsFile = new File(this.getInstallParamsFile());
        Properties props = this.getInstallParamTableModel().getParams();
        FileOutputStream os = null;
        try {
            os = new FileOutputStream(paramsFile);
            props.store(os, "");
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            if ( os != null ) {
                try {
                    os.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        }
    }
    
    public void loadInstallParamsFile() {
        
        File paramsFile = new File(this.getInstallParamsFile());
        FileInputStream is = null;
        try {
            is = new FileInputStream(paramsFile);
            Properties props = new Properties();
            props.load(is);
            this.getInstallParamTableModel().load(props);
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            if ( is != null ) {
                try {
                    is.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        }
    }
    
    public static class InstallParamTableModel extends AbstractTableModel {
        
        public static final int NAME_COL_IDX = 0;
        public static final int VALUE_COL_IDX = 1;
        
        private List /*<InstallParam>*/ mParams;
        
        private boolean mEdited = false;
        
        public InstallParamTableModel() {
            
            this.mParams = new ArrayList();
            this.mEdited = false;
        }
        
        public boolean isEdited() {
            return this.mEdited;
        }
        
        protected void setEdited(boolean edited) {
            this.mEdited = edited;
        }
        
        public int getRowCount() {
            return this.mParams.size();
        }
        
        public int getColumnCount() {
            return 2;
        }
        
        public String getColumnName(int column) {
            
            if ( column == NAME_COL_IDX ) {
                return "Parameter";
            } else if ( column == VALUE_COL_IDX ) {
                return "Value";
            } else {
                return null;
            }
        }
        
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            // return ( columnIndex == VALUE_COL_IDX );
            return true;
        }
        
        public Object getValueAt(int rowIndex, int columnIndex) {
            
            InstallParam param = (InstallParam) this.mParams.get(rowIndex);
            
            if ( columnIndex == NAME_COL_IDX ) {
                return param.getName();
            } else if ( columnIndex == VALUE_COL_IDX ) {
                return param.getValue();
            } else {
                return null;
            }
        }
        
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            
            InstallParam param = (InstallParam) this.mParams.get(rowIndex);
            if ( param == null ) {
                return;
            }
            
            if ( columnIndex == NAME_COL_IDX ) {
                param.setName((String)aValue);
                this.setEdited(true);
            } else if ( columnIndex == VALUE_COL_IDX ) {
                param.setValue((String)aValue);
                this.setEdited(true);
            }
            
        }
        
        public void clear() {
            this.mParams = new ArrayList();
            this.setEdited(true);
            this.fireTableDataChanged();
        }
        
        public void load(Properties props) {
            List params = new ArrayList();
            for ( Iterator itr = props.keySet().iterator(); itr.hasNext(); ) {
                String name = (String) itr.next();
                String value = props.getProperty(name, "");
                params.add(new InstallParam(name, value));
            }
            this.mParams.clear();
            this.mParams.addAll(params);
            this.setEdited(false);
            this.fireTableDataChanged();
        }
        
        public InstallParam createNewParam() {
            List names = new ArrayList();
            InstallParam newParam = new InstallParam("Param", "");
            
            for ( Iterator itr = this.mParams.iterator(); itr.hasNext() ;) {
                names.add(((InstallParam)itr.next()).getName());
            }
            
            for ( int i=0; i < Integer.MAX_VALUE; ++i) {
                String newName = "Param_" + i;
                if (!names.contains(newName)) {
                    newParam = new InstallParam(newName, "");
                    break;
                }
            }
            return newParam;
        }
        
        public void addParam() {
            int i = this.mParams.size();
            this.mParams.add(createNewParam());
            this.setEdited(true);
            this.fireTableRowsInserted(i,i);
        }
        
        public void removeParam(int idx) {
            try {
                this.mParams.remove(idx);
                this.setEdited(true);
                this.fireTableRowsDeleted(idx, idx);
            } catch (IndexOutOfBoundsException ex) {
                ex.printStackTrace();
            }
        }
        
        public Properties getParams() {
            Properties params = new Properties();
            for ( Iterator itr = this.mParams.iterator(); itr.hasNext(); ) {
                InstallParam param = (InstallParam) itr.next();
                params.setProperty(param.getName(), param.getValue());
            }
            return params;
        }
    }
    
    public static class InstallParam {
        
        public InstallParam(String name, String value) {
            this.mName = name;
            this.mValue = value;
        }
        
        /**
         * Holds value of property name.
         */
        private String mName;
        
        /**
         * Getter for property name.
         * @return Value of property name.
         */
        public String getName() {
            return this.mName;
        }
        
        /**
         * Setter for property name.
         * @param name New value of property name.
         */
        public void setName(String name) {
            this.mName = name;
        }
        
        /**
         * Holds value of property value.
         */
        private String mValue;
        
        /**
         * Getter for property value.
         * @return Value of property value.
         */
        public String getValue() {
            return this.mValue;
        }
        
        /**
         * Setter for property value.
         * @param value New value of property value.
         */
        public void setValue(String value) {
            this.mValue = value;
        }
    }
}
