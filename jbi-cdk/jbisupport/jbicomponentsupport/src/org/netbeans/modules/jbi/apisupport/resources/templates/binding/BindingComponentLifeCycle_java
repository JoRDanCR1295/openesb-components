/*
 * The contents of this file are subject to the terms
 * of the Common Development and Distribution License
 * (the "License").  You may not use this file except
 * in compliance with the License.
 *
 * You can obtain a copy of the license at
 * https://open-esb.dev.java.net/public/CDDLv1.0.html.
 * See the License for the specific language governing
 * permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL
 * HEADER in each file and include the License file at
 * https://open-esb.dev.java.net/public/CDDLv1.0.html.
 * If applicable add the following below this CDDL HEADER,
 * with the fields enclosed by brackets "[]" replaced with
 * your own identifying information: Portions Copyright
 * [year] [name of copyright owner]
 */

/*
 * Copyright 2004-2006 Sun Microsystems, Inc. All Rights Reserved.
 */

/*
 * __NAME__.java
 *
 * Created on __DATE__, __TIME__
 */

package JBISupport.codegen.components.binding;

import com.sun.jbi.sample.component.runtime.AbstractComponentLifeCycle;
import com.sun.jbi.sample.component.runtime.ComponentRuntime;
import com.sun.jbi.sample.component.runtime.MessageExchangeHandlerFactory;
import com.sun.jbi.sample.component.runtime.MessageExchangeReceiver;
import com.sun.jbi.sample.component.runtime.RuntimeContext;
import com.sun.jbi.sample.component.runtime.ServiceDescriptor;
import javax.jbi.JBIException;
import javax.management.InstanceAlreadyExistsException;
import javax.management.MBeanRegistrationException;
import javax.management.MalformedObjectNameException;
import javax.management.NotCompliantMBeanException;
import javax.management.ObjectName;
import javax.management.StandardMBean;
import javax.xml.namespace.QName;

/**
 * Sample ComponentLifeCycle implementation for Binding Component(BC). Use or
 * modify the generated sample code to implement the BC functionality required
 * for your Binding Component needs.
 *
 * Sample code generated for the Binding Component demonstrates how this BC can
 * be used to enable the inbound endpoints for invoking the services provided
 * inside the jbi environment by external service consumers.
 *
 * In sample scenario, external consumer send input document (xml text) to the
 * BC using JMX protocol, BC up on receiving the input document, converts that
 * into a normalized message and sends it to the service provider in a InOut
 * message exchange with the service provider to receive the output document as
 * a normalized message which it converts back to the output message and returns
 * it to the external service consumer using JMX protocol. The service the BC
 * access as a consumer is "echo" service that a service engine implements and
 * activates a jbi internal service endpoint with service name "echoService"
 * and "<ComponentName>_JBIPort" as the endpoint name where "<ComponentName>" is
 * the actual service engine component name that implements the service.
 *
 * BC also registers the JMXEndpointMBean with jmx objectname as
 * <domain>:<key>=<value> where
 * domain = "com.sun.jbi.sample.component.jmx.binding"
 * key=endpoint-address-mbean
 * value=<BindingComponentName>/<ServiceEngineName>/echo"
 * to enable unique external endpoint for external service consumer to 
 * send/receive input/output documents to/from the service invocation via 
 * this binding component
 *
 * @see JMXEndpointMBeanImpl
 *
 * @author  __USER__
 */
public class BindingComponentLifeCycle extends AbstractComponentLifeCycle {
    
    /** consumed service info **/
    private final static String  SERVICE_NS = "http://www.sun.com/sample-service/echo";
    private final static String  INTERFACE_NAME = "echo";
    private final static String  OPERATION_NAME = "echo";
    private final static String  OPERATION_INPUT_NAME = "echo";
    private final static String  OPERATION_OUTPUT_NAME = "echo";
    private final static String  SERVICE_NAME = "echoService";
    /** endpoint name for the ServiceEndpiont activated by the service provider */
    private final static String  SE_ENDPOINT_NAME = "__SE_ENDPOINT_NAME__";
    /** mbean objectname key "endpoint-address-mbean" value which will identify this endpoint address */
    private final static String  ENDPOINT_ADDRESS_MBEAN = "__JMX_ENDPOINT_ADDRESS_MBEAN__";
    
    /** Consumed Service Description  */
    private ServiceDescriptor mConsumedServiceDescriptor;
    /** JMX endpoint manager */
    private JMXEndpointManager mJMXEndpointMgr;
    
    
    public BindingComponentLifeCycle(ComponentRuntime compRuntime) {
        super(compRuntime);
        
    }
    /**
     * create a data model for the EchoService information
     */
    private ServiceDescriptor createEchoServiceDescriptor() {
        
        ServiceDescriptor serviceDesc = new ServiceDescriptor();
        
        serviceDesc.setRole(javax.jbi.messaging.MessageExchange.Role.CONSUMER);
        
        serviceDesc.setEndpointName(SE_ENDPOINT_NAME);
        serviceDesc.setServiceName(new QName(SERVICE_NS, SERVICE_NAME));
        QName serviceType = new QName(SERVICE_NS, INTERFACE_NAME);
        serviceDesc.setServiceTypes(new QName[] {serviceType});
        
        ServiceDescriptor.OperationDescriptor opDesc = new ServiceDescriptor.OperationDescriptor();
        opDesc.setServiceType(serviceType);
        opDesc.setName(OPERATION_NAME);
        opDesc.setMEP(ServiceDescriptor.OperationDescriptor.IN_OUT_MEP);
        opDesc.setInput(OPERATION_INPUT_NAME);
        opDesc.setOutput(OPERATION_OUTPUT_NAME);
        
        serviceDesc.setOperations(new ServiceDescriptor.OperationDescriptor[] {opDesc});
        
        return serviceDesc;
    }
    
    /**
     * JMX Endpoint Manager to register/unregister the JMXEndpointMBean impls.
     */
    private JMXEndpointManager getJMXEndpointManger() {
        if ( this.mJMXEndpointMgr == null ) {
            this.mJMXEndpointMgr = JMXEndpointManager.newInstance();
        }
        return this.mJMXEndpointMgr;
    }
    
    protected void initMessageExchangeHandlerFactory() throws JBIException {
        RuntimeContext.getInstance().setMessageExchangeHandlerFactory(
                new MessageExchangeHandlerFactory.DefaultMessageExchangeHandlerFactory());
    }
    
    protected MessageExchangeReceiver createMessageExchangeReceiver() throws Exception {
        // JMXBinding component sample only provides synchornous inbound message exchange.
        // so no need to have the message receiver to get the message exchanges from delivery channel.
        return null;
    }
    
    protected void activateServiceConsumers() throws JBIException {
        
        if ( this.mConsumedServiceDescriptor == null ) {
            this.mConsumedServiceDescriptor = createEchoServiceDescriptor();
        }
        // activate protocol binding and external endpoint for exteranl service
        // consumers to access the service providers.
        try {
            getJMXEndpointManger().registerJMXEndpointMBean(ENDPOINT_ADDRESS_MBEAN,
                    this.mConsumedServiceDescriptor);
        } catch (MBeanRegistrationException ex) {
            ex.printStackTrace();
        } catch (MalformedObjectNameException ex) {
            ex.printStackTrace();
        } catch (InstanceAlreadyExistsException ex) {
            ex.printStackTrace();
        } catch (NotCompliantMBeanException ex) {
            ex.printStackTrace();
        }
    }
    
    protected void deactivateServiceConsumers() throws JBIException {
        
        // deactivate protocol binding and external endpoint for exteranl service
        // consumers.
        try {
            getJMXEndpointManger().unregisterJMXEndpointMBean(ENDPOINT_ADDRESS_MBEAN);
        } catch (MalformedObjectNameException ex) {
            ex.printStackTrace();
        }
    }
    protected void activateServiceProviders() throws JBIException {
        // NOOP
    }
    
    protected void deactivateServiceProviders() throws JBIException {
        // NOOP
    }    
    
    /**
     * no extension mbean
     */
    protected ObjectName createExtensionMBeanName() {
        return null;
    }
    
    /**
     * no extension mbean
     */
    protected StandardMBean createExtensionMBean() {
        return null;
    }
    
}
