/*
 * The contents of this file are subject to the terms
 * of the Common Development and Distribution License
 * (the "License").  You may not use this file except
 * in compliance with the License.
 *
 * You can obtain a copy of the license at
 * https://open-esb.dev.java.net/public/CDDLv1.0.html.
 * See the License for the specific language governing
 * permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL
 * HEADER in each file and include the License file at
 * https://open-esb.dev.java.net/public/CDDLv1.0.html.
 * If applicable add the following below this CDDL HEADER,
 * with the fields enclosed by brackets "[]" replaced with
 * your own identifying information: Portions Copyright
 * [year] [name of copyright owner]
 */

/*
 * Copyright 2004-2006 Sun Microsystems, Inc. All Rights Reserved.
 */
/*
 * __NAME__.java
 *
 * Created on __DATE__, __TIME__
 */

package JBISupport.codegen.components.binding;

import com.sun.jbi.sample.component.runtime.RuntimeHelper;
import com.sun.jbi.sample.component.runtime.ServiceDescriptor;
import java.io.StringReader;
import javax.jbi.component.ComponentContext;
import javax.jbi.messaging.DeliveryChannel;
import javax.jbi.messaging.ExchangeStatus;
import javax.jbi.messaging.Fault;
import javax.jbi.messaging.InOut;
import javax.jbi.messaging.NormalizedMessage;
import javax.jbi.servicedesc.ServiceEndpoint;
import javax.xml.namespace.QName;
import javax.xml.transform.Source;

/**
 * This class implements the JMXEndpointMBean interface. BC registers this mbean
 * implementation to the mbean server to enable the external endpoint for external
 * service consumers to access the internal service providers using JMX.
 *
 *
 * @author  __USER__
 */
public class JMXEndpointMBeanImpl implements JMXEndpointMBean {
    
    public static final long SEND_SYNC_TIMEOUT = 60000; // wait for 1 minute
    
    private ServiceDescriptor mServiceDecriptor;
    
    /** Creates a new instance of JMXEndpointMBeanImpl */
    public JMXEndpointMBeanImpl(ServiceDescriptor serviceDesc) {
        this.mServiceDecriptor = serviceDesc;
    }
    /**
     * The implementation of the JMXEndpointMBean method finds the active
     * service provider, creates a InOut message exchange object and configures it to
     * send the input message it received to the service provider in a in a synchronous
     * InOut message exchange and receive a output message. It then returns the output
     * message that it gets from the service provider back to the external client.
     */
    public StringBuffer sendMessage(String operation, StringBuffer inputDoc) throws Exception {
        
        // get the component context and the delivery channel for preparing to send message
        ComponentContext compContext = RuntimeHelper.getComponentContext();
        DeliveryChannel channel = RuntimeHelper.getDeliveryChannel();
        
        ServiceEndpoint serviceEndpoint = null;
        // create a operation qname
        QName opName = new QName(this.mServiceDecriptor.getServiceType().getNamespaceURI(), operation);
        
        // find a ServiceEndpoint activated by the Service Providers for this service
        serviceEndpoint = RuntimeHelper.findServiceEndpoint(this.mServiceDecriptor);
        
        if ( serviceEndpoint == null ) {
            // if not found a activated ServiceEndpoint for this service, throw exception.
            throw new Exception("JMXBinding can not find an Active ServiceEndpoint for \n" +
                "Service: " + this.mServiceDecriptor.getServiceName() + " \n" +
                "Endpoint: " + this.mServiceDecriptor.getEndpointName() + " \n" +
                "Interface: " + this.mServiceDecriptor.getServiceType() );
        }
        
        // create INOUT Message Exchange
        InOut inOutME = RuntimeHelper.createInOutMessageExchange(opName, serviceEndpoint);
        
        // set the content of the IN normalized message ( Normalize the message )
        Source inMsgSource = RuntimeHelper.createDOMSource(new StringReader(inputDoc.toString()));
        NormalizedMessage inMsg = inOutME.getInMessage();
        inMsg.setContent(inMsgSource);
        
        // send the message exchange and wait for repsonse
        boolean isSent = channel.sendSync(inOutME, SEND_SYNC_TIMEOUT);
        if ( !isSent ) {
            throw new Exception("JMXBinding unable to send the message to Service Provider. Timeout occured in sending the message ");
        }
        
        // check if you got a out message or fault or error
        // process the Message Exchange to get the output message and
        // complete InOut message exchange with provider
        NormalizedMessage outMsg = processMessageExchange(inOutME);
        
        // read the out message content (Denormalize the message)
        StringBuffer outputDoc = RuntimeHelper.readFromSource(outMsg.getContent());
        
        // return the out message content to the external service consumer.
        return outputDoc;
    }
    /**
     * takes the InOut message exchange received from sendSync call and processes it further
     * to complete InOut message exchange with provider and returns the out message or throws
     * exception in case of error or faults.
     */
    private NormalizedMessage processMessageExchange(InOut inoutExchange)  throws Exception {
        
        // InOut MessageExchange processing on consumer side
        // 1. ACTIVE status receives a fault or out message,
        //    send the done status to complete message exchange
        //    return the fault/out message to external consumer
        // 2. can not receive DONE status
        // 3. when recevied ERROR status, return the error to consumer.
        
        // process the message exchange based on its state.
        ExchangeStatus status = inoutExchange.getStatus();
        
        RuntimeHelper.logDebug("JMXBinding: processing Message Exchange with status " + status);
        
        if (ExchangeStatus.ACTIVE.equals(status) ) {
            
            Fault fault = inoutExchange.getFault();
            NormalizedMessage outMsg = inoutExchange.getOutMessage();
            
            // send done to complete message exchange.
            DeliveryChannel channel = RuntimeHelper.getDeliveryChannel();
            inoutExchange.setStatus(ExchangeStatus.DONE);
            channel.send(inoutExchange);
            RuntimeHelper.logDebug("JMXBinding: Completed the INOUT MessageExchange from Consumer side");
            
            // process fault or out message
            
            if ( fault != null ) {
                // throw an exception if there is a fault message.
                Source faultContent = fault.getContent();
                StringBuffer faultContentBuff = null;
                if ( faultContent != null ) {
                    faultContentBuff = RuntimeHelper.readFromSource(faultContent);
                }
                throw new Exception("A Fault occured during INOUT message exchange \n" + faultContentBuff);
            }
            
            // return the outMessage for processing
            if ( outMsg != null ) {
                return outMsg;
            } else {
                throw new Exception("Internal error processing INOUT message exchange. Null Out message received ");
            }
            
        } else if (ExchangeStatus.DONE.equals(status) ) {
            
            // can not get DONE on Consumer side in INOUT message exchange.
            throw new Exception("Illegal status DONE received on INOUT message exchange on Consumer Side");
            
        } else if (ExchangeStatus.ERROR.equals(status) ) {
            
            // error can occur any time. so just return the error back to client.
            Exception serverSideEx = inoutExchange.getError();
            StringBuffer exMsgBuff = RuntimeHelper.getExceptionStackTrace(serverSideEx);
            throw new Exception("An internal Error occured during INOUT Message Exchange. \n" + exMsgBuff);
            
        } else {
            throw new Exception("An internal Error occured during INOUT Message Exchange. Unknown message exchange status : " + status);
        }
    }
    
}
