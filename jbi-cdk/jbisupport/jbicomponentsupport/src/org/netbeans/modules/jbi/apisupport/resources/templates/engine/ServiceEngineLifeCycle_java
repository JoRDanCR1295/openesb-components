/*
 * The contents of this file are subject to the terms
 * of the Common Development and Distribution License
 * (the "License").  You may not use this file except
 * in compliance with the License.
 *
 * You can obtain a copy of the license at
 * https://open-esb.dev.java.net/public/CDDLv1.0.html.
 * See the License for the specific language governing
 * permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL
 * HEADER in each file and include the License file at
 * https://open-esb.dev.java.net/public/CDDLv1.0.html.
 * If applicable add the following below this CDDL HEADER,
 * with the fields enclosed by brackets "[]" replaced with
 * your own identifying information: Portions Copyright
 * [year] [name of copyright owner]
 */

/*
 * Copyright 2004-2006 Sun Microsystems, Inc. All Rights Reserved.
 */

/*
 * __NAME__.java
 *
 * Created on __DATE__, __TIME__
 */

package JBISupport.codegen.components.engine;

import com.sun.jbi.sample.component.runtime.AbstractComponentLifeCycle;
import com.sun.jbi.sample.component.runtime.ComponentRuntime;
import com.sun.jbi.sample.component.runtime.MessageExchangeReceiver;
import com.sun.jbi.sample.component.runtime.RuntimeContext;
import com.sun.jbi.sample.component.runtime.RuntimeHelper;
import com.sun.jbi.sample.component.runtime.ServiceDescriptor;
import javax.jbi.JBIException;
import javax.jbi.servicedesc.ServiceEndpoint;
import javax.management.ObjectName;
import javax.management.StandardMBean;
import javax.xml.namespace.QName;

/**
 * Sample ComponentLifeCycle implementation for Service Engine(SE). Use or
 * modify the generated sample code to implement the SE functionality required
 * for your Service Engine needs.
 *
 * Sample code generated for the Service Engine demonstrates how this SE can
 * be used to provide a service inside the jbi environment by a service engine.
 *
 * In the sample scenario, this SE acts as a service provider that provides a
 * "echo" service which can be consumed by internal or external service consumers.
 * SE as a "echo" service provider activates the ServiceEndpoint with "echoService"
 * as a service name and "<ComponentName>_JBIPort" as the endpoint name where
 * "<ComponentName>" is the actual service engine component name and accepts a
 * InOut Message Exchange for this ServiceEndpoint to receive a Normalized input
 * message, process it and return the Normalized output message to the consumer.
 *
 * The service provided by this SE can be accessed by the external consumer like
 * SOAP client which can send a SOAP message to the httpsoap BC that should be
 * configured as a proxy service consumer by deploying a service assembly to the
 * httpsoap BC to receive the SOAP message and do a InOut message exchange with
 * this SE for invoking the service.
 *
 * The sample JMX Binding Component generated by the Binding Component Project
 * wizard also can be used to invoke the service provided by this SE
 *
 * @author  __USER__
 */
public class ServiceEngineLifeCycle extends AbstractComponentLifeCycle {
    
    /** provided service info **/
    private final static String SERVICE_NS = "http://www.sun.com/sample-service/echo";
    private final static String INTERFACE_NAME = "echo";
    private final static String OPERATION_NAME = "echo";
    private final static String OPERATION_INPUT_NAME = "echo";
    private final static String OPERATION_OUTPUT_NAME = "echo";
    private final static String SERVICE_NAME = "echoService";
    private final static String SE_ENDPOINT_NAME = "__SE_ENDPOINT_NAME__";
    /**
     * Provided Service Description
     */
    private ServiceDescriptor mProviderServiceDescriptor;
    /**
     * ServiceEndpoint
     */
    private ServiceEndpoint mServiceEndpoint;
    
    
    public ServiceEngineLifeCycle(ComponentRuntime compRuntime) {
        super(compRuntime);
    }
    
    private ServiceDescriptor createEchoServiceDescriptor() {
        
        ServiceDescriptor serviceDesc = new ServiceDescriptor();
        
        serviceDesc.setRole(javax.jbi.messaging.MessageExchange.Role.PROVIDER);
        
        serviceDesc.setEndpointName(SE_ENDPOINT_NAME);
        serviceDesc.setServiceName(new QName(SERVICE_NS, SERVICE_NAME));
        QName serviceType = new QName(SERVICE_NS, INTERFACE_NAME);
        serviceDesc.setServiceTypes(new QName[] {serviceType});
        
        ServiceDescriptor.OperationDescriptor opDesc = new ServiceDescriptor.OperationDescriptor();
        opDesc.setServiceType(serviceType);
        opDesc.setName(OPERATION_NAME);
        opDesc.setMEP(ServiceDescriptor.OperationDescriptor.IN_OUT_MEP);
        opDesc.setInput(OPERATION_INPUT_NAME);
        opDesc.setOutput(OPERATION_OUTPUT_NAME);
        
        serviceDesc.setOperations(new ServiceDescriptor.OperationDescriptor[] {opDesc});
        
        return serviceDesc;
    }
    
    public void initMessageExchangeHandlerFactory() throws JBIException {
        RuntimeContext.getInstance().setMessageExchangeHandlerFactory(
            new ServiceEngineMessageExchangeHandlerFactory());
    }
    
    protected MessageExchangeReceiver createMessageExchangeReceiver() throws Exception {
        return new MessageExchangeReceiver();
    }
    
    protected void activateServiceProviders() throws JBIException {
        // activate provider endpoint/s
        // If this component support dynamic deployment, then deployment of service unit on to this component
        // should be consulted to get the list of endpoints to activate
        
        if ( this.mProviderServiceDescriptor == null ) {
            this.mProviderServiceDescriptor = createEchoServiceDescriptor();
        }
        
        QName serviceQName = this.mProviderServiceDescriptor.getServiceName();
        String endpointName = this.mProviderServiceDescriptor.getEndpointName();
        this.mServiceEndpoint = RuntimeHelper.getComponentContext().activateEndpoint(serviceQName, endpointName);
    }
    
    protected void deactivateServiceProviders() throws JBIException {
        // deactivate endpoint/s
        RuntimeHelper.getComponentContext().deactivateEndpoint(this.mServiceEndpoint);
    }
    
    protected void activateServiceConsumers() throws JBIException {
        // NOOP
    }
    
    protected void deactivateServiceConsumers() throws JBIException {
        // NOOP
    }
    
    /**
     * no extension mbean
     */
    protected ObjectName createExtensionMBeanName() {
        return null;
    }
    
    /**
     * no extension mbean
     */
    protected StandardMBean createExtensionMBean() {
        return null;
    }
    
}
