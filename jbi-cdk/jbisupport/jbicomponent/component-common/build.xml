<?xml version="1.0" encoding="UTF-8"?>
<project name="component-common" default="package" basedir=".">
    <description> This project compile and packages component common classes</description>
    
    <target name="-pre-init">
        <!-- Empty placeholder for easier customization. -->
    </target>
    
    <target name="-init-user" depends="-pre-init" >
        <echo message="loading user properties from ${user.properties.file}" />
        <property file="${user.properties.file}"/>
    </target>
    
    <target name="-init-project" depends="-pre-init, -init-user" >
        <echo level="debug" message="loading build.properties" />
        <property file="build.properties"/>
        <condition property="can.deploy.testSA">
            <istrue value="${testSA.enabled}" />
        </condition>
    </target>
    
    <target name="-do-init" depends="-pre-init, -init-user, -init-project" >
        <echo level="debug" message="Nothing to -do-init" />
    </target>
    
    <target name="-init-check" depends="-pre-init, -init-user, -init-project,-do-init">
        <available file="${glassfish.home}" property="glassfish.home.exists" />
        <fail unless="glassfish.home.exists"
              message="glassfish.home=${glassfish.home} is not valid. Please set a valid glassfish home." />
        <fail unless="src.dir">Must set src.dir</fail>
        <fail unless="build.dir">Must set build.dir</fail>
        <fail unless="dist.dir">Must set dist.dir</fail>
        <fail unless="dist.zip">Must set dist.zip</fail>
    </target>
    
    <!-- initilizes the build settings -->
    <target name="init" 
            depends="-pre-init, -init-user, -init-project,-do-init, -init-check" >
    </target>  
    <!-- initializes the jbi ant tasks -->
    <target name="-init-jbi-ant-tasks">
        <available file="${glassfish.home}" property="glassfish.home.exists" />
        <fail unless="glassfish.home.exists"
              message="glassfish.home=${glassfish.home} is not valid. Please set a valid glassfish home." />    
        <!-- Load jbi task definitions -->
        <taskdef resource="com/sun/jbi/ui/ant/antlib.xml" classpath="${jbi.ant.tasks.classpath}"/>               
    </target>
    
    <target name="compile" depends="init"  description="compiles jbi component source" >
        <mkdir dir="${build.classes.dir}"/>
        <!-- Compile the java code from ${src.dir} into ${build.classes.dir} -->
        <javac srcdir="${src.dir}" destdir="${build.classes.dir}" classpath="${javac.classpath}" debug="true" source="${javac.source}" target="${javac.target}">
            <!-- add additional options to javac here -->
            <compilerarg value="-Xlint:unchecked" />
        </javac>
        <copy todir="${build.classes.dir}">  <!-- copy resources from ${src} -->
            <fileset dir="${src.dir}" excludes="**/*.java"/>
        </copy>
    </target>
    
    <target name="package" depends="init, compile" 
            description="compile and packages jbi component sources into installer zip archive file" >
        <mkdir dir="${build.predist.dir}"/>
        <mkdir dir="${build.predist.lib.dir}"/>
        <!-- Create the distribution directory and -->    
        <mkdir dir="${dist.dir}"/>
        <jar jarfile="${dist.zip}" basedir="${build.classes.dir}"/>
    </target>  
    
    <target name="clean" depends="init" description="clean up" >
        <!-- Delete the ${build} and ${dist} directory trees -->
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>  
    
    <!-- testing the JBI Component -->
    
    <target name="package-test" depends="init, compile-test" 
            description="compile and packages jbi component test sources into a jar file" >
        <mkdir dir="${build.predist.dir}"/>
        <mkdir dir="${build.predist.lib.dir}"/>
        <!-- Create the distribution directory and -->    
        <mkdir dir="${dist.dir}"/>
        <jar jarfile="${test.dist.zip}" basedir="${build.test.classes.dir}"/>
    </target>  
    
    <target name="compile-test" depends="init"  description="compile the test source " >
        <mkdir dir="${build.test.classes.dir}"/>
        <!-- Compile the test java code from ${test.src.dir} into ${build.test.classes.dir} -->
        <javac srcdir="${test.src.dir}" destdir="${build.test.classes.dir}" classpath="${javac.test.classpath}" debug="true"  source="${javac.source}" target="${javac.target}">
            <!-- add additional options to javac here -->
            <compilerarg value="-Xlint:unchecked" />            
        </javac>
        <copy todir="${build.test.classes.dir}">  <!-- copy resources from ${src} -->
            <fileset dir="${test.src.dir}" excludes="**/*.java"/>
        </copy>
    </target>
    
    <target name="-pre-test-run" depends="init, -init-jbi-ant-tasks" if="can.deploy.testSA">
        <mkdir dir="${build.test.results.dir}"/>
    </target>
    
    <target name="-do-test-run" depends="init, compile-test">
        <!--  run component common unit tests here 
        -->
    </target>
    
    <target name="-post-test-run" depends="init, -init-jbi-ant-tasks" if="can.deploy.testSA">
    </target>
    
    <target name="test" depends="init, compile-test, -pre-test-run, -do-test-run, -post-test-run" description="tests the jbi component" />
        
    <target name="package-all" depends="init, clean, package, package-test" description="builds and packages component common source and test source" />
   
    <target name="javadoc" depends="init" >
        <mkdir dir="${dist.javadoc.dir}"/>
        <javadoc destdir="${dist.javadoc.dir}" source="${src.dir}" notree="${javadoc.notree}" use="${javadoc.use}" nonavbar="${javadoc.nonavbar}" noindex="${javadoc.noindex}" splitindex="${javadoc.splitindex}" author="${javadoc.author}" version="${javadoc.version}" windowtitle="${javadoc.windowtitle}" private="${javadoc.private}" additionalparam="${javadoc.additionalparam}" failonerror="true" useexternalfile="true">
            <classpath>
                <path path="${javac.classpath}"/>
            </classpath>
            <sourcepath>
                <pathelement location="${src.dir}"/>
            </sourcepath>
            <packageset dir="${src.dir}" includes="*/**"/>
            <fileset dir="${src.dir}" includes="*.java"/>
        </javadoc>        
    </target>
    
</project>
