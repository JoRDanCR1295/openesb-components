#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
${symbol_pound} properties will be used to find the xslt file that will be used for invoking a 
${symbol_pound} service operation.
${symbol_pound}  The "xsltmap.properties" file should contain two types of properties
${symbol_pound}  1. for namespace prefix to namespaceURI map that starts with "xmlns." prefix like
${symbol_pound}    "xmlns.tns-prefix=http://www.sun.com/jbi/examples/sample-service/echo"
${symbol_pound}  2. a service description to xslt file properties with syntax like
${symbol_pound}    "{tns-prefix}service-name=xslt_file_name"  and
${symbol_pound}    "{tns-prefix}service-name.{tns-prefix}operation-name=xslt_file_name" and
${symbol_pound}    "{tns-prefix}service-name.{tns-prefix}interface-name.operation-name=xslt_file_name" .
${symbol_pound}  the service description property is a "." delimited tokens that represents
${symbol_pound}  a serive or interface qname and a operation name. To locate xslt file either with 
${symbol_pound}  service qname or service qname and operaton or serivice qname and interface qname 
${symbol_pound}  and operation, all the three properties specified above should be there for each xslt file.
${symbol_pound}

xmlns.greet1=http://www.sun.com/jbi/examples/sample-service/greetings/
xmlns.greet2=http://www.sun.com/jbi/examples/sample-service/greetings/
xmlns.greettypes=http://www.sun.com/jbi/examples/sample-service/greetings/types
${symbol_pound} just service level default settings
{greet2}greetService=hello.xsl
${symbol_pound} service and operation
{greet2}greetService.{greet1}sayHello=hello.xsl
${symbol_pound} service, interface, operation
{greet2}greetService.{greet1}greetings.sayHello=hello.xsl
${symbol_pound} service and operation
{greet2}greetService.{greet1}sayGoodbye=goodbye.xsl
${symbol_pound} service, interface, operation
{greet2}greetService.{greet1}greetings.sayGoodbye=goodbye.xsl
