<?xml version="1.0" encoding="UTF-8"?>
<!-- 
 # BEGIN_HEADER - DO NOT EDIT
 # 
 # The contents of this file are subject to the terms
 # of the Common Development and Distribution License
 # (the "License").  You may not use this file except
 # in compliance with the License.
 #
 # You can obtain a copy of the license at
 # https://open-jbi-components.dev.java.net/public/CDDLv1.0.html.
 # See the License for the specific language governing
 # permissions and limitations under the License.
 #
 # When distributing Covered Code, include this CDDL
 # HEADER in each file and include the License file at
 # https://open-jbi-components.dev.java.net/public/CDDLv1.0.html.
 # If applicable add the following below this CDDL HEADER,
 # with the fields enclosed by brackets "[]" replaced with
 # your own identifying information: Portions Copyright
 # [year] [name of copyright owner]
-->
<!-- 
 # @(#)cocoencoder-xsdextension.xsd 
 #
 # Copyright 2004-2007 Sun Microsystems, Inc. All Rights Reserved.
 # 
 # END_HEADER - DO NOT EDIT
-->
<!-- edited with XMLSpy v2006 sp1 U (http://www.altova.com) by Jun Xu (SeeBeyond Technology Corp.) -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:com.sun:encoder-coco-1.0" xmlns:ns1="urn:com.sun:encoder" targetNamespace="urn:com.sun:encoder-coco-1.0" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:import namespace="urn:com.sun:encoder" schemaLocation="../../xsdextension-fw/src/encoderfrmwk-xsdextension.xsd"/>
	<xs:complexType name="cocoEncoding">
		<xs:annotation>
			<xs:documentation>The complex type that governs the content used in appinfo that defines COBOL Copybook encoding settings</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ns1:encodingBase">
				<xs:sequence>
					<xs:element name="level">
						<xs:annotation>
							<xs:documentation>Relevant to the COBOL Copybook's level number in Area A or B.</xs:documentation>
						</xs:annotation>
						<xs:simpleType>
							<xs:restriction base="xs:short">
								<xs:minInclusive value="1"/>
								<xs:maxInclusive value="99"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:element>
					<xs:choice minOccurs="0">
						<xs:element name="nameFiller" type="tns:emptyString">
							<xs:annotation>
								<xs:documentation>Present if the original name of the entry is FILLER.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="nameBlank" type="tns:emptyString">
							<xs:annotation>
								<xs:documentation>Present if the original name of the entry is absent.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="originalName" type="xs:string">
							<xs:annotation>
								<xs:documentation>Present if the original name if the entry is neither FILLER no absent.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:choice>
					<xs:element name="redefine" type="xs:NCName" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Relevant to COBOL Copybook's REDEFINES clause.  Stores the name (non-qualified) of the object of the REDEFINES clause here.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="picture" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Relevant to COBOL Copybook's PICTURE clause.  The raw PICTURE string is stored here.</xs:documentation>
						</xs:annotation>
						<xs:simpleType>
							<xs:restriction base="xs:string">
								<xs:minLength value="1"/>
								<xs:maxLength value="50"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:element>
					<xs:element name="blankWhenZero" type="tns:emptyString" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Relevant to COBOL Copybook's BLANK WHEN ZERO clause.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="justified" type="tns:emptyString" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Relevant to COBOL Copybook's JUSTIFIED clause.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="sign" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Relevant to COBOL Copybook's SIGN clause.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:sequence>
								<xs:choice>
									<xs:element name="leading" type="tns:emptyString">
										<xs:annotation>
											<xs:documentation>Relevant to COBOL Copybook's LEADING phrase in SIGN clause.</xs:documentation>
										</xs:annotation>
									</xs:element>
									<xs:element name="trailing" type="tns:emptyString">
										<xs:annotation>
											<xs:documentation>Relevant to COBOL Copybook's TRAILING phrase in SIGN clause.</xs:documentation>
										</xs:annotation>
									</xs:element>
								</xs:choice>
								<xs:element name="separate" type="tns:emptyString" minOccurs="0">
									<xs:annotation>
										<xs:documentation>Relevant to COBOL Copybook's SEPARATE phrase in SIGN clause.</xs:documentation>
									</xs:annotation>
								</xs:element>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
					<xs:element name="usage" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Relevant to COBOL Copybook's USAGE clause.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:sequence>
								<xs:choice>
									<xs:element name="binary" type="tns:emptyString"/>
									<xs:element name="comp" type="tns:emptyString"/>
									<xs:element name="comp-1" type="tns:emptyString"/>
									<xs:element name="comp-2" type="tns:emptyString"/>
									<xs:element name="comp-3" type="tns:emptyString"/>
									<xs:element name="comp-4" type="tns:emptyString"/>
									<xs:element name="comp-5" type="tns:emptyString"/>
									<xs:element name="computational" type="tns:emptyString"/>
									<xs:element name="computational-1" type="tns:emptyString"/>
									<xs:element name="computational-2" type="tns:emptyString"/>
									<xs:element name="computational-3" type="tns:emptyString"/>
									<xs:element name="computational-4" type="tns:emptyString"/>
									<xs:element name="computational-5" type="tns:emptyString"/>
									<xs:element name="display" type="tns:emptyString"/>
									<xs:element name="display-1" type="tns:emptyString"/>
									<xs:element name="index" type="tns:emptyString"/>
									<xs:element name="packed-decimal" type="tns:emptyString"/>
									<xs:element name="pointer" type="tns:emptyString"/>
									<xs:element name="procedure-pointer" type="tns:emptyString"/>
								</xs:choice>
								<xs:element name="native" type="tns:emptyString" minOccurs="0"/>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
					<xs:element name="occursDependOn" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Relevant to COBOL Copybook's OCCURS DEPENDING ON clause.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:sequence>
								<xs:element name="topElement" type="xs:QName">
									<xs:annotation>
										<xs:documentation>Top element of the object being depended on, which is the starting point of the path towards the object.</xs:documentation>
									</xs:annotation>
								</xs:element>
								<xs:element name="path" type="xs:string">
									<xs:annotation>
										<xs:documentation>Path towards the object being depended on excluding the top element.  Since the object name of the DEPENDING ON phrase can be a full qualified name, such as field1 OF field2 OF field3 etc.  So to locate the object uniquely, a path is needed.  The path is delimited by '/' character.  Only local name (NCName) is used in the path.</xs:documentation>
									</xs:annotation>
								</xs:element>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
					<xs:element name="displayCharEncoding" type="xs:string" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Character encoding (code page) used for DISPLAY usage items.  This shall only be set for top element.  All non-DBCS items will use the value set for top element.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="display1CharEncoding" type="xs:string" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Character encoding (code page) used for DISPLAY-1 usage items.  This shall only be set for top element.  All DBCS items will use the value set for top element.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="cocoEncodingMark">
		<xs:annotation>
			<xs:documentation>The COBOL Copybook encoding style mark that stores global options of a COBOL Copybook encoder</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ns1:encodingMark">
				<xs:sequence>
					<xs:element name="cocoXsdBuilderVendor" type="xs:string">
						<xs:annotation>
							<xs:documentation>The vendor of the COBOL Copybook - XSD builder that generates this XSD</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="cocoXsdBuilderVersion" type="xs:string">
						<xs:annotation>
							<xs:documentation>The version of the COBOL Copybook - XSD builder that generates this XSD</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="copybookLocation" type="xs:string">
						<xs:annotation>
							<xs:documentation>The original COBOL Copybook location from which this XSD is generated.  This information is used as a hint in case this XSD needs to be regenerated.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="copybookCharEncoding" type="xs:string">
						<xs:annotation>
							<xs:documentation>The character encoding of the original COBOL Copybook document.  This information is used as a hint in case this XSD needs to be regenerated.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="xsdLocation" type="xs:string">
						<xs:annotation>
							<xs:documentation>The location where this this XSD is originally created.  This property is for informational use only.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="ignoreContentBeyondCol72" type="xs:boolean">
						<xs:annotation>
							<xs:documentation>Flag indicates if the content beyond column 72 shall be ignored.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="checkNamesForReservedWords" type="xs:boolean">
						<xs:annotation>
							<xs:documentation>Flag indicates if the entry names shall be checked against reserved words.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="emptyString">
		<xs:annotation>
			<xs:documentation>A special simple type used for creating empty tags.  This kind of tag is specifically used for representing a boolean value.  The presence of the tag indicates boolean true and the absence of the tag indicates boolean false.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:length value="0"/>
		</xs:restriction>
	</xs:simpleType>
</xs:schema>
