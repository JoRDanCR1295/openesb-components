# T: Java keyword as internal template name.
#
# by Michael Libourel
# $Revision: 1.1 $

version 1
struct Root {
    root is group of delim;
    delim "+";
    delim "-";
    struct 'abstract'   { string x; } ?y;
    struct 'assert'     { string x; } ?y;
    struct 'boolean'    { string x; } ?y;
    struct 'break'      { string x; } ?y;
    struct 'byte'       { string x; } ?y;
    struct 'case'       { string x; } ?y;
    struct 'catch'      { string x; } ?y;
    struct 'char'       { string x; } ?y;
    struct 'class'      { string x; } ?y;
    struct 'const'      { string x; } ?y;
    struct 'continue'   { string x; } ?y;
    struct 'default'    { string x; } ?y;
    struct 'do'         { string x; } ?y;
    struct 'double'     { string x; } ?y;
    struct 'else'       { string x; } ?y;
    struct 'enum'       { string x; } ?y;
    struct 'extends'    { string x; } ?y;
    struct 'final'      { string x; } ?y;
    struct 'finally'    { string x; } ?y;
    struct 'float'      { string x; } ?y;
    struct 'for'        { string x; } ?y;
    struct 'goto'       { string x; } ?y;
    struct 'if'         { string x; } ?y;
    struct 'implements' { string x; } ?y;
    struct 'import'     { string x; } ?y;
    struct 'instanceof' { string x; } ?y;
    struct 'int'        { string x; } ?y;
    struct 'interface'  { string x; } ?y;
    struct 'long'       { string x; } ?y;
    struct 'native'     { string x; } ?y;
    struct 'new'        { string x; } ?y;
    struct 'package'    { string x; } ?y;
    struct 'private'    { string x; } ?y;
    struct 'protected'  { string x; } ?y;
    struct 'public'     { string x; } ?y;
    struct 'return'     { string x; } ?y;
    struct 'short'      { string x; } ?y;
    struct 'static'     { string x; } ?y;
    struct 'strictfp'   { string x; } ?y;
    struct 'super'      { string x; } ?y;
    struct 'switch'     { string x; } ?y;
    struct 'synchronized' { string x; } ?y;
    struct 'this'       { string x; } ?y;
    struct 'throw'      { string x; } ?y;
    struct 'throws'     { string x; } ?y;
    struct 'transient'  { string x; } ?y;
    struct 'try'        { string x; } ?y;
    struct 'void'       { string x; } ?y;
    struct 'volatile'   { string x; } ?y;
    struct 'while'      { string x; } ?y;
};
