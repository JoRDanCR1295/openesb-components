
//
// Generated by mibgen version 5.1 (05/20/05) when compiling RFC1213-MIB.
//

package com.sun.soabi.snmpagent;

// java imports
//
import java.io.Serializable;

// jmx imports
//
import com.sun.management.snmp.SnmpStatusException;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMib;

/**
 * The class is used for implementing the "IfEntry" group.
 * The group is defined with the following oid: 1.3.6.1.2.1.2.2.1.
 */
public class IfEntry implements IfEntryMBean, Serializable {

    /**
     * Variable for storing the value of "IfOutDiscards".
     * The variable is identified by: "1.3.6.1.2.1.2.2.1.19".
     */
    protected Long IfOutDiscards = new Long(1);

    /**
     * Variable for storing the value of "IfOutNUcastPkts".
     * The variable is identified by: "1.3.6.1.2.1.2.2.1.18".
     */
    protected Long IfOutNUcastPkts = new Long(1);

    /**
     * Variable for storing the value of "IfOutUcastPkts".
     * The variable is identified by: "1.3.6.1.2.1.2.2.1.17".
     */
    protected Long IfOutUcastPkts = new Long(1);

    /**
     * Variable for storing the value of "IfOutOctets".
     * The variable is identified by: "1.3.6.1.2.1.2.2.1.16".
     */
    protected Long IfOutOctets = new Long(1);

    /**
     * Variable for storing the value of "IfInUnknownProtos".
     * The variable is identified by: "1.3.6.1.2.1.2.2.1.15".
     */
    protected Long IfInUnknownProtos = new Long(1);

    /**
     * Variable for storing the value of "IfInErrors".
     * The variable is identified by: "1.3.6.1.2.1.2.2.1.14".
     */
    protected Long IfInErrors = new Long(1);

    /**
     * Variable for storing the value of "IfInDiscards".
     * The variable is identified by: "1.3.6.1.2.1.2.2.1.13".
     */
    protected Long IfInDiscards = new Long(1);

    /**
     * Variable for storing the value of "IfInNUcastPkts".
     * The variable is identified by: "1.3.6.1.2.1.2.2.1.12".
     */
    protected Long IfInNUcastPkts = new Long(1);

    /**
     * Variable for storing the value of "IfInUcastPkts".
     * The variable is identified by: "1.3.6.1.2.1.2.2.1.11".
     */
    protected Long IfInUcastPkts = new Long(1);

    /**
     * Variable for storing the value of "IfInOctets".
     * The variable is identified by: "1.3.6.1.2.1.2.2.1.10".
     */
    protected Long IfInOctets = new Long(1);

    /**
     * Variable for storing the value of "IfLastChange".
     * The variable is identified by: "1.3.6.1.2.1.2.2.1.9".
     */
    protected Long IfLastChange = new Long(1);

    /**
     * Variable for storing the value of "IfOperStatus".
     * The variable is identified by: "1.3.6.1.2.1.2.2.1.8".
     */
    protected EnumIfOperStatus IfOperStatus = new EnumIfOperStatus();

    /**
     * Variable for storing the value of "IfAdminStatus".
     * The variable is identified by: "1.3.6.1.2.1.2.2.1.7".
     */
    protected EnumIfAdminStatus IfAdminStatus = new EnumIfAdminStatus();

    /**
     * Variable for storing the value of "IfPhysAddress".
     * The variable is identified by: "1.3.6.1.2.1.2.2.1.6".
     */
    protected Byte[] IfPhysAddress = { new Byte("74"), new Byte("68"), new Byte("77"), new Byte("75")};

    /**
     * Variable for storing the value of "IfSpeed".
     * The variable is identified by: "1.3.6.1.2.1.2.2.1.5".
     */
    protected Long IfSpeed = new Long(1);

    /**
     * Variable for storing the value of "IfMtu".
     * The variable is identified by: "1.3.6.1.2.1.2.2.1.4".
     */
    protected Integer IfMtu = new Integer(1);

    /**
     * Variable for storing the value of "IfType".
     * The variable is identified by: "1.3.6.1.2.1.2.2.1.3".
     */
    protected EnumIfType IfType = new EnumIfType();

    /**
     * Variable for storing the value of "IfDescr".
     * The variable is identified by: "1.3.6.1.2.1.2.2.1.2".
     */
    protected String IfDescr = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "IfIndex".
     * The variable is identified by: "1.3.6.1.2.1.2.2.1.1".
     */
    protected Integer IfIndex = new Integer(1);

    /**
     * Variable for storing the value of "IfSpecific".
     * The variable is identified by: "1.3.6.1.2.1.2.2.1.22".
     */
    protected String IfSpecific = new String("1.3.6.1.4.1.42");

    /**
     * Variable for storing the value of "IfOutQLen".
     * The variable is identified by: "1.3.6.1.2.1.2.2.1.21".
     */
    protected Long IfOutQLen = new Long(1);

    /**
     * Variable for storing the value of "IfOutErrors".
     * The variable is identified by: "1.3.6.1.2.1.2.2.1.20".
     */
    protected Long IfOutErrors = new Long(1);


    /**
     * Constructor for the "IfEntry" group.
     */
    public IfEntry(SnmpMib myMib) {
    }

    /**
     * Getter for the "IfOutDiscards" variable.
     */
    public Long getIfOutDiscards() throws SnmpStatusException {
        return IfOutDiscards;
    }

    /**
     * Getter for the "IfOutNUcastPkts" variable.
     */
    public Long getIfOutNUcastPkts() throws SnmpStatusException {
        return IfOutNUcastPkts;
    }

    /**
     * Getter for the "IfOutUcastPkts" variable.
     */
    public Long getIfOutUcastPkts() throws SnmpStatusException {
        return IfOutUcastPkts;
    }

    /**
     * Getter for the "IfOutOctets" variable.
     */
    public Long getIfOutOctets() throws SnmpStatusException {
        return IfOutOctets;
    }

    /**
     * Getter for the "IfInUnknownProtos" variable.
     */
    public Long getIfInUnknownProtos() throws SnmpStatusException {
        return IfInUnknownProtos;
    }

    /**
     * Getter for the "IfInErrors" variable.
     */
    public Long getIfInErrors() throws SnmpStatusException {
        return IfInErrors;
    }

    /**
     * Getter for the "IfInDiscards" variable.
     */
    public Long getIfInDiscards() throws SnmpStatusException {
        return IfInDiscards;
    }

    /**
     * Getter for the "IfInNUcastPkts" variable.
     */
    public Long getIfInNUcastPkts() throws SnmpStatusException {
        return IfInNUcastPkts;
    }

    /**
     * Getter for the "IfInUcastPkts" variable.
     */
    public Long getIfInUcastPkts() throws SnmpStatusException {
        return IfInUcastPkts;
    }

    /**
     * Getter for the "IfInOctets" variable.
     */
    public Long getIfInOctets() throws SnmpStatusException {
        return IfInOctets;
    }

    /**
     * Getter for the "IfLastChange" variable.
     */
    public Long getIfLastChange() throws SnmpStatusException {
        return IfLastChange;
    }

    /**
     * Getter for the "IfOperStatus" variable.
     */
    public EnumIfOperStatus getIfOperStatus() throws SnmpStatusException {
        return IfOperStatus;
    }

    /**
     * Getter for the "IfAdminStatus" variable.
     */
    public EnumIfAdminStatus getIfAdminStatus() throws SnmpStatusException {
        return IfAdminStatus;
    }

    /**
     * Setter for the "IfAdminStatus" variable.
     */
    public void setIfAdminStatus(EnumIfAdminStatus x) throws SnmpStatusException {
        IfAdminStatus = x;
    }

    /**
     * Checker for the "IfAdminStatus" variable.
     */
    public void checkIfAdminStatus(EnumIfAdminStatus x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "IfPhysAddress" variable.
     */
    public Byte[] getIfPhysAddress() throws SnmpStatusException {
        return IfPhysAddress;
    }

    /**
     * Getter for the "IfSpeed" variable.
     */
    public Long getIfSpeed() throws SnmpStatusException {
        return IfSpeed;
    }

    /**
     * Getter for the "IfMtu" variable.
     */
    public Integer getIfMtu() throws SnmpStatusException {
        return IfMtu;
    }

    /**
     * Getter for the "IfType" variable.
     */
    public EnumIfType getIfType() throws SnmpStatusException {
        return IfType;
    }

    /**
     * Getter for the "IfDescr" variable.
     */
    public String getIfDescr() throws SnmpStatusException {
        return IfDescr;
    }

    /**
     * Getter for the "IfIndex" variable.
     */
    public Integer getIfIndex() throws SnmpStatusException {
        return IfIndex;
    }

    /**
     * Getter for the "IfSpecific" variable.
     */
    public String getIfSpecific() throws SnmpStatusException {
        return IfSpecific;
    }

    /**
     * Getter for the "IfOutQLen" variable.
     */
    public Long getIfOutQLen() throws SnmpStatusException {
        return IfOutQLen;
    }

    /**
     * Getter for the "IfOutErrors" variable.
     */
    public Long getIfOutErrors() throws SnmpStatusException {
        return IfOutErrors;
    }

}
