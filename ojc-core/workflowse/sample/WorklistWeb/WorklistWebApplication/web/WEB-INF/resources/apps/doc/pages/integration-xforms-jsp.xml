<!--
    Copyright (C) 2006 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline"
    xmlns:xforms="http://www.w3.org/2002/xforms">
    <header>
        <title>Using XForms with JSP</title>
    </header>
    <body>
        <section>
            <title>Introduction</title>
            <p>
                Most of the example applications shipped with Orbeon Forms use the page flow controller and are
                implemented using other components provided by Orbeon Forms. It is also possible to use the XForms
                engine without using the page flow controller. The Orbeon Forms web archive (WAR file) comes with
                example applications implemented in JSP files that reply on the XForms engine and we describe here how
                you can use just the XForms engine. We illustrate our case using JSPs, but this largely applies to
                servlets or third party web frameworks implemented as a servlet.
            </p>
        </section>
        <section>
            <title>Deployment</title>
            <p>
                In the Orbeon Forms web archive (WAR file), all the JSPs are located in a
                directory called <code>xforms-jsp</code>. Under this directory, you will find one
                directory per example, for instance: <code>xforms-jsp/guess-the-number</code> or
                <code>xforms-jsp/flickr-search</code>. Instead of generating plain HTML, JSP files
                will generate XHTML + XForms, which is then transformed by Orbeon Forms in
                HTML that the browser can understand. This is done with the help of a filter
                declared in the web.xml. In the Orbeon Forms web.xml, it is declared as
                follows:
            </p>
            <xml-source>
                <filter>
                    <filter-name>ops-main-filter</filter-name>
                    <filter-class>org.orbeon.oxf.servlet.OPSServletFilter</filter-class>
                    <init-param>
                        <param-name>oxf.main-processor.name</param-name>
                        <param-value>{http://www.orbeon.com/oxf/processors}pipeline</param-value>
                    </init-param>
                    <init-param>
                        <param-name>oxf.main-processor.input.config</param-name>
                        <param-value>oxf:/config/filter.xpl</param-value>
                    </init-param>
                    <init-param>
                        <param-name>oxf.error-processor.name</param-name>
                        <param-value>{http://www.orbeon.com/oxf/processors}pipeline</param-value>
                    </init-param>
                    <init-param>
                        <param-name>oxf.error-processor.input.config</param-name>
                        <param-value>oxf:/config/error.xpl</param-value>
                    </init-param>
                </filter>
                <filter-mapping>
                    <filter-name>ops-main-filter</filter-name>
                    <url-pattern>/xforms-jsp/*</url-pattern>
                </filter-mapping>
            </xml-source>
            <p>
                The most important part is the <code>url-pattern</code> defined under
                <code>&lt;filter-mapping></code>. It reads: <code>/xforms-jsp/*</code>. This means
                that all the data generated by URLs starting with <code>/xforms-jsp/</code> will be
                post-processed by Orbeon Forms. As defined in the web.xml, this
                post-processing consists in running the pipeline
                <code>oxf:/config/filter.xpl</code>. This pipleine applies the epilogue on the data
                generated by your JSP. The epilogue will transform XHTML + XForms into HTML and in
                some cases apply a theme.
            </p>
        </section>
        <section>
            <title>Generating XHTML and XForms in JSP</title>
            <p>
                The JSP generates XHTML + XForms, like a view linked from the page flow. To be
                recognized as XHTML, you need to set the appropriate content type in your JSP by
                calling <code>response.setContentType("application/xhtml+xml")</code>. A JSP will
                typically look like:
            </p>
            <xml-source>
                &lt;% response.setContentType("application/xhtml+xml"); %>
                <xhtml:html xmlns:xforms="http://www.w3.org/2002/xforms"
                    xmlns:xhtml="http://www.w3.org/1999/xhtml"
                    xmlns:ev="http://www.w3.org/2001/xml-events">

                    <xhtml:head>
                        <xhtml:title>Guess The Number</xhtml:title>
                        <xforms:model>
                            <xforms:instance>
                                ...
                            </xforms:instance>
                        </xforms:model>
                    </xhtml:head>
                    <xhtml:body>
                        <xhtml:h1>My Page</xhtml:h1>
                        <xforms:input ref="..."/>
                        ...
                    </xhtml:body>
                </xhtml:html>
            </xml-source>
        </section>
        <section>
            <title>Implementing XForms Services with JSP</title>
            <p>
                The backend of your forms is implemented in what we loosely call "services", that is
                URLs that can be used with an <code>&lt;xforms:submission></code>. Most of the time,
                XML is being posted to the service and XML is returned by the service. Since
                services take XML as input and generate XML, XPL is an ideal tool to implement
                services. However, your JSP has to set the appropriate content type for the
                response: <code>response.setContentType("application/xml")</code>. Using the dom4j
                API, you can create an object that represents the input document with:
                <code>Document queryDocument = xmlReader.read(request.getInputStream())</code>. You
                then use this object to gather data about the query sent to your service.
            </p>
            <p>
                In XForms you reference the service implemented with JSP in the action attribute of
                <code>&lt;xforms:submission></code>, as usual. For instance:
            </p>
            <xml-source>
                <xforms:submission id="do-query" method="post" replace="instance"
                        ref="instance('query')"
                        instance="photos" action="/xforms-jsp/flickr-search/service-search.jsp"/>
            </xml-source>
        </section>
    </body>
</document>
