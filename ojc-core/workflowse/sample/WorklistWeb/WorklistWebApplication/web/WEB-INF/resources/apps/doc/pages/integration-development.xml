<!--
    Copyright (C) 2006 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline" xmlns:xforms="http://www.w3.org/2002/xforms">
	<header>
		<title>Development</title>
	</header>
	<body>
        <a name="scope"/>
		<section>
			<title>Scope</title>
			<p>
                This section is not about developing applications with Orbeon Forms, but about developing
                Orbeon Forms itself. It is for those who want to modify the code of Orbeon Forms. This
                documentation provided here is very much work in progress. If you would like to contribute to the
                Orbeon Forms development and don't find all the information you are looking for here, please feel
                free to <a href="http://www.objectweb.org/wws/subrequest/ops-users">join the ops-users mailing list</a>
                and ask your question on the list.
            </p>
		</section>
        <a name="nightly-builds"/>
        <section>
            <title>Nightly Builds</title>
            <p>
                At any time you can <a
                href="http://forge.objectweb.org/nightlybuilds/ops/ops/">download a nightly
                build</a>, which is a build of the latest Orbeon Forms source code.
            </p>
            <p>
                Unlike <a href="http://forge.objectweb.org/project/showfiles.php?group_id=168">released versions of
                Orbeon Forms</a>, nightly builds are not tested before they are made available. The only guarantee
                is that nightly builds pass the Orbeon Forms unit tests. A build that does not pass all the unit
                tests is not uploaded to the nightly build directory. The Orbeon Forms developers are doing their best
                not to cause any regression in nightly builds, so in most cases you can use nightly builds for
                development. If you notice any regression is a nightly build, please report it on <a
                href="http://www.objectweb.org/wws/info/ops-users">ops-users</a>.
            </p>
            <p>
                The name "nightly builds" seems to imply that they are created only once a day. In fact, nightly builds
                are created at all time during the day, whenever a modification occurs on the code repository. So there
                might in fact be several nightly builds in a day of development is active during that day, or no new
                build if nothing was checked in the repository that day.
            </p>
        </section>
        <a name="get-source"/>
        <section>
            <title>Getting The Source</title>
            <p>
                First note that if your main reason for getting the source is to have a build of
                Orbeon Forms with the latest code, we recommend that you instead download a
                nightly build (see above).
            </p>
            <p>
                The source code of Orbeon Forms is available on the CVS repository hosted by
                ObjectWeb. To checkout the source code on your local machine, follow the
                instructions provided on <a href="http://forge.objectweb.org/scm/?group_id=168">the
                project CVS page</a> under the <i>Anonymous CVS Access</i>.
            </p>
        </section>
        <a name="build-ant"/>
        <section>
            <title>Building With Ant</title>
            <p>
                We build Orbeon Forms with Ant. The Ant configuration file (build.xml) is
                located at the root of the source directory. You can start Ant from the command
                line. If you are using an IDE like Eclipse or IntelliJ, you can also use the
                builtin Ant support provided by your IDE. The Orbeon Forms build.xml defines
                a number of targets, but only a few are used frequently:
            </p>
            <ul>
                <li>
                    <p><b>orbeon-war</b>: Build Orbeon Forms and creates an exploded war file in the
                    directory <tt>build/ops-war</tt>. To test your modifications to the
                    Orbeon Forms code, you will typically run a Tomcat with a context pointing
                    to that directory. That context, defined in Tomcat's server.xml will typically
                    look like:</p>

                    <p><tt>&lt;Context crossContext="true" debug="0" docBase="path to your
                    source/build/ops-war" path="/ops" reloadable="false"/></tt></p>
                </li>
                <li>
                    <p><b>orbeon-dist-war</b>: This will build a "distribution" war file, which is
                    equivalent to the war file created by our automated build system and uploaded to
                    the "unstable builds" <a
                    href="http://forge.objectweb.org/nightlybuilds/ops/ops/">directory</a>. The
                    produced file will be located in <tt>build/distrib/ops.war</tt></p>
                </li>
            </ul>
        </section>
        <a name="compile-java-ide"/>
        <section>
            <title>Compiling Java Files From Your IDE</title>
            <p>
                During development, you can choose to compile Java files with your IDE instead of
                compiling them with Ant. You might want to do this because the compiler that comes
                in your IDE is faster than javac, or reports better errors. Often the main reason
                is to be able to leverage <a
                href="http://java.sun.com/j2se/1.4.2/docs/guide/jpda/enhancements.html">HotSwap</a>
                in the JVM. HotSwap works by starting the VM in debug mode and connecting to the VM
                with your IDE. As your application is running, you can then modify the Java code,
                and recompile it with your IDE. After the IDE has successfully compiled any
                modified Java file, it will send the new code to the JVM, which will replace the old
                code with the new code.
            </p>
            <p>
                HotSwap still has limitations: it is not a silver bullet and there will be cases
                where you will need to redeploy the web application or restart the application
                server. But you will spare yourself a redeployment or restart in most of the cases
                where your modification to the Java code does not significantly change the structure
                of the Java class. If you are using IntelliJ, you can find more <a
                href="http://www.jetbrains.com/idea/docs/help/debugging/">information about
                HotSwap</a> on their site.
            </p>
            <p>
                To compile files from your IDE:
            </p>
            <ul>
                <li>
                     Ant setup:

                    <ul>
                        <li>
                            Set the <code>skip.compilation</code> Ant property (you just need to
                            have this property set some value; the value of the property does not
                            matter).
                        </li>
                        <li>
                            If you have compiled code before without this property, run first the
                            <code>clean</code> Ant task.
                        </li>
                        <li>
                            With the <code>skip.compilation</code> property set, run the
                            <code>orbeon-war</code> Ant task.
                        </li>
                    </ul>
                </li>
                <li>
                    IDE setup:

                    <ul>
                        <li>
                            Set your IDE to generate class files in
                            <code>build/ops-war/WEB-INF/classes</code>.
                        </li>
                        <li>
                            Point your IDE to the jar files in the <code>lib</code> directory, as
                            the Orbeon Forms code has dependencies on those libraries.
                        </li>
                        <li>
                            Setup your IDE to compile the files in <code>src/java</code> with the
                            exclusion of files in the following packages:
                            <code>orb.orbeon.faces</code>, <code>org.orbeon.faces11</code>, and
                            <code>org.orbeon.oxf.processor.bpel</code>.
                        </li>
                    </ul>
                </li>
                <li>
                    Once this setup is done:

                    <ul>
                        <li>Compile all the sources a first time before you start the application server.</li>
                        <li>Start the application server in debug mode.</li>
                        <li>Connect to the application server with your IDE.</li>
                        <li>
                            Now comes the interesting part: modify Java code whenever you want,
                            compile it, and your IDE will send the new code to the JVM which will
                            on the fly use this new code instead of the old one.
                        </li>
                    </ul>
                </li>
            </ul>
        </section>
    </body>
</document>
