<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline"
    xmlns:xforms="http://www.w3.org/2002/xforms">
    <header>
        <title>JSR-168 Portlets</title>
    </header>
    <body>
        <section>
            <title>Introduction</title>
            <section>
                <title>Servlet and Portlet Deployment</title>
                <p>
                    Orbeon Forms is typically used to create Web applications. In this case, Orbeon Forms relies on
                    standard Java Servlet technology, and the Web application's <code>web.xml</code> file is configured
                    to use the OrbeonForms Sqervlet or Orbeon Forms Servlet Filter. Orbeon Forms conforms to the Java
                    Servlet API and handles a Web client's entire real estate on the browser.
                </p>
                <p>
                    Orbeon Forms also provides the Orbeon Forms Portlet, which supports the implementation of standard
                    Java portlets that can be deployed within any portal or portlet container compatible with the Java
                    Portlet specification. This specification is also known as JSR-168.
                </p>
            </section>
            <section>
                <title>What is a Portal?</title>
                <p>
                    A portal is a Web application that provides several features such as:
                </p>
                <ul>
                    <li>
                        <p>
                            <b>Content Aggregation.</b> A single Web page within the application aggregates the output
                            or user interface of several data sources or applications.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Personalization.</b> Users or administrators of the portal can customize the user
                            interface. This often means not only customizing the look and feel, but also selecting a
                            certain set of available functionalities within the application.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Single Sign-On.</b> The user logs in only once to access several applications in the
                            portal.
                        </p>
                    </li>
                </ul>
            </section>
            <section>
                <title>What Is a Portlet?</title>
                <p>
                    According to the Java Portlet Specification, a portlet is a "Java technology based Web component,
                    managed by a portlet container that processes requests and generates dynamic content. Portlets are
                    used by portals as pluggable user interface components that provide a presentation layer to
                    Information Systems". An implementation agnostic definition can be found in the <i>Web Services for
                    Remote Portals (WSRP) White Paper of 22 September 2002</i> "Portlets are user-facing, interactive
                    Web application components rendering markup fragments to be aggregated and displayed by the portal."
                </p>
                <p>
                    In other words, a portlet is usually a Web application that can be embedded within a portal, and
                    shares Web page real estate with other portlets. Traditionally portlets available in public portals
                    have provided simple features such as stock quotes, news feeds, weather reports, etc. In particular
                    thanks to the Java Portlet specification, there is no limit to the extent of the features provided
                    by a portlet, and it is expected that complex interactive portlets will become more and more
                    widespread.
                </p>
            </section>
        </section>
        <section>
            <title>Orbeon Forms and Portlets</title>
            <p>
                Orbeon Forms hides the complexity of the Portlet API to allow most Orbeon Forms applications to work
                unmodified within portlet containers and to follow best practices allowed by the Web Application
                Controller. In particular, the Portlet API requires:
            </p>
            <ul>
                <li>
                    <p>
                        <b>Separation of faceless actions from rendering.</b> Orbeon Forms allows actions to generate
                        output while still adhering to the Java Portlet specification. Developers are obviously free to
                        only write faceless actions. In the Page Flow Controller, such actions end with a
                        <code>&lt;result page="some-page-id"></code> directive.
                    </p>
                </li>
                <li>
                    <p>
                        <b>Getting rid of the familiar concept of URL path.</b> Orbeon Forms abstracts this behavior
                        and provides Orbeon Forms Portlet developers with the notion of a path, implicitly in the Web
                        Application Controller, or explicitly with the Request Generator, while still adhering to the
                        Java Portlet specification.
                    </p>
                </li>
                <li>
                    <p>
                        <b>Getting rid of the familiar concept of URL redirection.</b> Instead, portlet actions can set
                        parameters to use in subsequent portlet rendering. Orbeon Forms abstracts this behavior and
                        provides, indirectly in the Page Flow Controller, or explicitly with the Redirect Processor,
                        the notion of redirecting to another page within the portlet.
                    </p>
                </li>
                <li>
                    <p>
                        <b>Calling APIs to generate URLs.</b> Orbeon Forms handles this by providing automatic <a
                        href="reference-url-rewriting">URL rewriting</a>.
                    </p>
                </li>
                 <li>
                    <p>
                        <b>Generating Markup Fragments.</b> The default Orbeon Forms epilogue automatically extracts a
                        fragment from a Orbeon Forms <code>&lt;d:document></code>. This allows pages to remain
                        unmodified for both servlet and portlet deployment. The default epilogue also makes sure that no
                        HTML or XML DOCTYPE is generated at the beginning of a fragment. The default epilogue can
                        easily be modified.
                    </p>
                </li>
            </ul>
        </section>
        <a name="portlet-deployment-liferay"/>
        <section>
            <title>Liferay Deployment</title>
            <p>
                The Orbeon Forms WAR can be directly deployed into the <a href="http://www.liferay.com/">Liferay</a>
                portal. Follow the following steps with Liferay 4.2.1:
            </p>
            <ol>
                <li>
                    <p>
                        Either enable Auto Deploy in the Liferay Admin portlet and drop <code>ops.war</code> into the
                        Deploy Directory, or upload <code>ops.war</code> directly from the Liferay Admin portlet:
                    </p>
                    <figure src="../apps/doc/images/portlets/liferay01.png"/>
                </li>
                <li>
                    <p>
                        Create a new Liferay page called "Orbeon" and open that page. Move your mouse to the upper
                        right corner and use the big "+" icon to add content:
                    </p>
                    <figure src="../apps/doc/images/portlets/liferay02.png"/>
                </li>
                <li>
                    <p>
                        You should see the Orbeon Form Portlet appear in the menu. Select "Add" to add the portlet to
                        the page:
                    </p>
                    <figure src="../apps/doc/images/portlets/liferay03.png"/>
                </li>
                <li>
                    <p>
                        The portlet displays a welcome page with links to Orbeon Forms examples (here shown maximized):
                    </p>
                    <figure src="../apps/doc/images/portlets/liferay04.png"/>
                </li>
            </ol>
            <p>
                This is the "Flickr Resize" example running in the portlet:
            </p>
            <figure src="../apps/doc/images/portlets/liferay05.png"/>
        </section>
        <a name="portlet-configuration"/>
        <section>
            <title>Configuration</title>
            <p>
                Configuration of portlets is done in a standard file called <code>portlet.xml</code> that sits in the
                same directory <code>(WEB-INF)</code> as your <code>web.xml</code>. The <code>portlet-class</code>
                element must always be <code>org.orbeon.oxf.portlet.OPSPortlet</code> for Orbeon Forms Portlets (you can
                also configure non-Orbeon Forms Portlets within the same <code>portlet.xml</code>). The main processor
                URI and optional inputs are specified with the <code>oxf.main-processor.uri</code> and
                <code>oxf.main-processor.input.*</code> initialization parameters. For example:
            </p>
            <xml-source>
                <portlet-app>
                    <portlet>
                        <portlet-name>OrbeonFormsPortlet</portlet-name>
                        <portlet-class>org.orbeon.oxf.portlet.OPSPortlet</portlet-class>
                        <supports>
                            <mime-type>text/html</mime-type>
                            <portlet-mode>edit</portlet-mode>
                        </supports>
                        <init-param>
                            <name>oxf.main-processor.name</name>
                            <value>{http://www.orbeon.com/oxf/processors}pipeline</value>
                        </init-param>
                        <init-param>
                            <name>oxf.main-processor.input.config</name>
                            <value>oxf:/config/prologue-portlet.xpl</value>
                        </init-param>
                        <init-param>
                            <name>oxf.error-processor.name</name>
                            <value>{http://www.orbeon.com/oxf/processors}pipeline</value>
                        </init-param>
                        <init-param>
                            <name>oxf.error-processor.input.config</name>
                            <value>oxf:/config/error.xpl</value>
                        </init-param>
                        <supports>
                            <mime-type>text/html</mime-type>
                            <mime-type>application/xml</mime-type>
                        </supports>
                        <portlet-info>
                            <title>Orbeon Forms Portlet</title>
                        </portlet-info>
                    </portlet>
                </portlet-app>
            </xml-source>
            <p>
                It is possible to configure several Orbeon Forms Portlets within the same
                <code>portlet.xml</code>, with the same or a different configuration. The
                <code>portlet-name</code> element however must be different for each portlet, as per
                the Java Portlet specification. For more examples, please consult the example
                <code>portlet.xml</code> file in the Orbeon Forms examples.
            </p>
        </section>
        <section>
            <title>Portlet Output</title>
            <p>
                The type of the portlet output is determined by the serializer. With the default Orbeon Forms epilogue
                in <code>config/epilogue-portlet.xpl</code>, the HTML serializer is used.
            </p>
        </section>
        <a name="portlet-preferences"/>
        <section>
            <title>Preferences</title>
            <p>
                Portlet preferences can be retrieved with the <code>oxf:portlet-preferences-generator</code> processor.
            </p>
            <p>
                To retrieve the preferences of your current portlet, use the following code:
            </p>
            <xml-source>
                <p:processor name="oxf:portlet-preferences">
                    <p:output name="data" id="portlet-preferences"/>
                </p:processor>
            </xml-source>
            <p>
                The generator outputs a document containing name / values in the following format:
            </p>
            <xml-source>
                <portlet-preferences>
                    <preference>
                        <name>name1</name>
                        <value>value1</value>
                    </preference>
                    <preference>
                        <name>name2</name>
                        <value>value1</value>
                        <value>value2</value>
                        <value>value3</value>
                    </preference>
                </portlet-preferences>
            </xml-source>
            <p>
                For example:
            </p>
            <xml-source>
                <portlet-preferences>
                    <preference>
                        <name>max-items</name>
                        <value>10</value>
                    </preference>
                    <preference>
                        <name>url</name>
                        <value>http://xml.newsisfree.com/feeds/42/1842.xml</value>
                    </preference>
                </portlet-preferences>
            </xml-source>
            <p>
                Portlet preferences can be saved with the <code>oxf:portlet-preferences-serializer</code> processor.
                [TODO]
            </p>
        </section>
        <a name="portlet-security"/>
        <section>
            <title>Security</title>
            <p>
                Portlet security can be configured in <code>portlet.xml</code> as per the Portlet specification. The <a
                href="reference-authentication#request-security-processor">Request Security processor</a> provides
                security information like in the case of Servlets.
            </p>
        </section>
        <a name="portlet-deployment"/>
        <section>
            <title>Deployment</title>
            <p>
                A Orbeon Forms portlet application is deployed like a regular Web application. You have to make sure
                that, in addition to the <code>web.xml</code>, you have a valid <code>portlet.xml</code> configuration
                file as well.
            </p>
            <p>
                You can deploy the application in any portlet container supporting the version of the specification
                mentioned above.
            </p>
            <p>
                It is possible to deploy Orbeon Forms Servlets, Servlet Filters, Servlet Context Listeners, and
                Portlets within the same application:
            </p>
            <img print-format="pdf" src="../apps/doc/images/integration-portlets-deployment.png" width="522" height="234"/>
            <p>
                For more information, see <a href="integration-packaging">Packaging and Deployment</a>. Note that the
                use of the Page Flow Controller is optional but its use is typical.
            </p>
        </section>
        <a name="portlet-limitations"/>
        <section>
        <title>Limitations of Orbeon Forms Portlets</title>
            <p>
                The Orbeon Forms Portlet developer should be aware of the following limitations:
            </p>
            <ul>
                <li>
                    <b>Redirection.</b> In the Page Flow Controller, pages that are the target of a portlet render URL
                    cannot end with a redirection. This in particular applies to the default portlet page ("/").
                    Developers have to make sure that a page exists for "/" that produces content and does not end in a
                    redirect. Other pages can end with redirects by making sure that they are targeted by action URLs
                    (<a href="reference-url-rewriting">by default</a>, only the target of HTML or XHTML form submissions
                    generate action URLs).
                </li>
                <li>
                    <b>Portlet Mode and Window State hints.</b> It is currently not possible to set a portlet mode or
                    window state hint in a URL.
                </li>
                <li>
                    <b>Content Type Hints.</b> It is not possible for an Orbeon Forms Portlet to know which content
                    types are supported by the portal.
                </li>
                <li>
                    <b>Preferences.</b> It is currently not possible to modify portlet preferences or store them from
                    within a portlet.
                </li>
                <li>
                    <b>XML Fragments.</b> The Orbeon Forms Portlet currently must generate XML fragments containing a
                    root node. This is rarely an issue, as a fragment can for example be embedded within an XHTML
                    <code>&lt;div></code> element.
                </li>
                <li>
                    <b>Struts integration.</b> Currently, Struts does not natively support operations within a Java
                    portlet.
                </li>
                <li>
                    <b>JavaServer Faces integration.</b> JSF currently does not natively support operations within a
                    Java portlet.
                </li>
            </ul>
            <p>
                In addition, and this is by design of the API, Java portlets cannot directly serve resources such as
                images, CSS stylesheets, standalone JavaScript files, etc. Those resources have to be served by a
                Servlet. Portlets therefore cannot directly serve resources using:
            </p>
            <ul>
                <li>The Chart processor</li>
                <li>The Image server</li>
                <li>The Resource server</li>
                <li>The PDF serializer</li>
                <li>The Excel serializer</li>
                <li>Or any processor serving resources</li>
            </ul>
            <p>
                Orbeon Forms Portlets can however refer to resources served by the Orbeon Forms Servlet.
            </p>
        </section>
    </body>
</document>
