/*
 * BEGIN_HEADER - DO NOT EDIT
 * 
 * The contents of this file are subject to the terms
 * of the Common Development and Distribution License
 * (the "License").  You may not use this file except
 * in compliance with the License.
 *
 * You can obtain a copy of the license at
 * https://open-jbi-components.dev.java.net/public/CDDLv1.0.html.
 * See the License for the specific language governing
 * permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL
 * HEADER in each file and include the License file at
 * https://open-jbi-components.dev.java.net/public/CDDLv1.0.html.
 * If applicable add the following below this CDDL HEADER,
 * with the fields enclosed by brackets "[]" replaced with
 * your own identifying information: Portions Copyright
 * [year] [name of copyright owner]
 */

/*
 * @(#)OutboundReceiverTest.java 
 *
 * Copyright 2004-2007 Sun Microsystems, Inc. All Rights Reserved.
 * 
 * END_HEADER - DO NOT EDIT
 */

package com.sun.jbi.hl7bc;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;

import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;

import javax.jbi.component.ComponentContext;

import com.sun.jbi.common.qos.messaging.MessagingChannel;

import junit.framework.*;

import org.jmock.Mock;
import org.jmock.cglib.MockObjectTestCase;

import com.sun.jbi.hl7bc.configuration.RuntimeConfiguration;

/**
 * @author T.V.A.Raghunadh
 */
public class OutboundReceiverTest extends MockObjectTestCase {
    OutboundReceiver instance = null;

    Mock componentContext = null;

    Mock runtimeConfig = null;

    Mock messagingChannel = null;
    
    Mock lifeCycle = mock(HL7BindingComponent.class);

    int mOutboundCorePoolSize = 16;

    int mOutboundKeepAliveTime = 60 * 10;

    TimeUnit mOutboundTimeUnit = TimeUnit.SECONDS;

    // By using an unbounded queue the max pool size becomes irrelevant
    int mOutboundMaxPoolSize = Integer.MAX_VALUE;

    ThreadPoolExecutor mOutboundPooledExecutor;

    public OutboundReceiverTest(String testName) {
        super(testName);
    }

    protected void setUp() throws Exception {
        componentContext = mock(ComponentContext.class);
        runtimeConfig = mock(RuntimeConfiguration.class, new Class[] { String.class },
                new Object[] { "test/com/sun/jbi/hl7bc/testDir"});
        messagingChannel = mock(MessagingChannel.class);
        runtimeConfig.expects(once()).method("getThreads").will(returnValue(new Integer(10)));
        runtimeConfig.expects(once()).method("addNotificationListener").withAnyArguments();
        instance = new OutboundReceiver((ComponentContext) componentContext.proxy(),
                (MessagingChannel) messagingChannel.proxy(), Collections.unmodifiableCollection(new HashMap().values()),
                (RuntimeConfiguration) runtimeConfig.proxy());
    }

    protected void tearDown() throws Exception {
    }

    public static Test suite() {
        TestSuite suite = new TestSuite(OutboundReceiverTest.class);

        return suite;
    }

    /**
     * Test of setThreads method, of class com.sun.jbi.hl7bc.OutboundReceiver.
     */
    public void testSetThreads() {
        System.out.println("Testing setThreads");

        instance.setThreads(8);
        ThreadPoolExecutor outboundPooledExecutor = instance.getOutboundPooledExecutor();
        assertEquals(8, outboundPooledExecutor.getCorePoolSize());
    }

    /**
     * Test of stopReceiving method, of class com.sun.jbi.hl7bc.OutboundReceiver.
     */
    public void testStopReceiving() {
        System.out.println("Testing stopReceiving");
        instance.stopReceiving();

        AtomicBoolean mMonitor = instance.getMonitor();
        boolean expected = Boolean.TRUE.booleanValue();
        assertEquals(expected, mMonitor.get());
    }
}
