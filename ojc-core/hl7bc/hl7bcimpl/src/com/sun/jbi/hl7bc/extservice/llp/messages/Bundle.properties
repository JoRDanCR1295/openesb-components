################## resource bundles for MLLPEncoder ###################
MLLPEncoder_INVALID_STARTBLOCK_CHAR=MLLPEncoder.setStartBlockChar():Invalid parameter value < {0} > (in decimal ascii). The allowed range is 1 to 127.
MLLPEncoder_INVALID_ENDBLOCK_CHAR=MLLPEncoder.setEndBlockChar():Invalid parameter value < {0} > (in decimal ascii). The allowed range is 1 to 127.
MLLPEncoder_INVALID_ENDDATA_CHAR=MLLPEncoder.setEndDataChar():Invalid parameter value < {0} > (in decimal ascii). The allowed range is 1 to 127.
MLLPEncoder_SETSTARTBLOCK_CHAR=MLLPEncoder.setStartBlockChar():Value is set as <{0}>> (in decimal ascii).
MLLPEncoder_SETENDBLOCK_CHAR=MLLPEncoder.setEndBlockChar():Value is set as <{0}>> (in decimal ascii).
MLLPEncoder_SETENDDATA_CHAR=MLLPEncoder.setEndDataChar():Value is set as <{0}>> (in decimal ascii).

################## resource bundles for MLLPDecoder ###################
MLLPDecoder_INVALID_STARTBLOCK_CHAR=MLLPDecoder.setStartBlockChar(): Invalid parameter value < {0} > (in decimal ascii). The allowed range is 1 to 127.
MLLPDecoder_INVALID_ENDBLOCK_CHAR=MLLPDecoder.setEndBlockChar(): Invalid parameter value < {0} > (in decimal ascii). The allowed range is 1 to 127.
MLLPDecoder_INVALID_ENDDATA_CHAR=MLLPDecoder.setEndDataChar(): Invalid parameter value < {0} > (in decimal ascii). The allowed range is 1 to 127.
MLLPDecoder_SETSTARTBLOCK_CHAR=MLLPDecoder.setStartBlockChar(): Value is set as <{0}>> (in decimal ascii).
MLLPDecoder_SETENDBLOCK_CHAR=MLLPDecoder.setEndBlockChar(): Value is set as <{0}>> (in decimal ascii).
MLLPDecoder_SETENDDATA_CHAR=MLLPDecoder.setEndDataChar(): Value is set as <{0}>> (in decimal ascii).
MLLPDecoder_INVALID_MLLP_DATA=MLLPDecoder.decode(): Invalid MLLP data [ {0} ]. Its length shouldn't be less than 3.
MLLPDecoder_INVALID_MLLP_DATA_WITH_STARTBLOCK_CHAR=MLLPDecoder.decode(): Invalid MLLP data,.The configuration value of Start Block Character is [ {0}}] ,It does not match with the actual data.
MLLPDecoder_INVALID_MLLP_DATA_WITH_ENDBLOCK_CHAR=MLLPDecoder.decode(): Invalid MLLP data,.The configuration value of End Block Character is [ {0}}] ,It does not match with the actual data.
MLLPDecoder_INVALID_MLLP_DATA_WITH_ENDDATA_CHAR=MLLPDecoder.decode(): Invalid MLLP data,.The configuration value of End Data Character is [ {0}}] ,It does not match with the actual data.

################## resource bundles for HLLPEncoder ###################
HLLPEncoder_INVALID_STARTBLOCK_CHAR=HLLPEncoder.setStartBlockChar(): Invalid parameter value < {0} > (in decimal ascii). The allowed range is 1 to 127.
HLLPEncoder_INVALID_ENDBLOCK_CHAR=HLLPEncoder.setEndBlockChar(): Invalid parameter value < {0} > (in decimal ascii). The allowed range is 1 to 127.
HLLPEncoder_INVALID_ENDDATA_CHAR=HLLPEncoder.setEndDataChar(): Invalid parameter value < {0} > (in decimal ascii). The allowed range is 1 to 127.
HLLPEncoder_SETSTARTBLOCK_CHAR=HLLPEncoder.setStartBlockChar(): Value is set as <{0}>> (in decimal ascii).
HLLPEncoder_SETENDBLOCK_CHAR=HLLPEncoder.setEndBlockChar(): Value is set as <{0}>> (in decimal ascii).
HLLPEncoder_SETENDDATA_CHAR=HLLPEncoder.setEndDataChar(): Value is set as <{0}>> (in decimal ascii).
HLLPEncoder_INVALID_BLOCKTYPE=HLLPEncoder.encoder(): Invalid Block Type [{0}],]. The Block Type (the second character) should be D or N.
HLLPEncoder_INVALID_VERSIONID=HLLPEncoder.encoder(): Invalid Protocol ID (Version ID) [{0}].
HLLPEncoder_INVALID_VERSIONID_CHAR = HLLPEncoder.encoder(): Invalid Protocol ID (Version ID) [ {0} ] It should represent a valid HL7 version ID like 23 or 2.3, etc..
HLLPEncoder_INVALID_CHECKSUM=HLLPEncoder.checksum(): Invalid request. The data is [{0}]  the offset is < {1} > ,>, the length is < {2}>.

################## resource bundles for HLLPDecoder ###################
HLLPDecoder_INVALID_STARTBLOCK_CHAR=HLLPDecoder.setStartBlockChar(): Invalid parameter value < {0} > (in decimal ascii). The allowed range is 1 to 127.
HLLPDecoder_INVALID_ENDBLOCK_CHAR=HLLPDecoder.setEndBlockChar(): Invalid parameter value < {0} > (in decimal ascii). The allowed range is 1 to 127.
HLLPDecoder_INVALID_ENDDATA_CHAR=HLLPDecoder.setEndDataChar(): Invalid parameter value < {0} > (in decimal ascii). The allowed range is 1 to 127.
HLLPDecoder_SETSTARTBLOCK_CHAR=HLLPDecoder.setStartBlockChar(): Value is set as <{0}>> (in decimal ascii).
HLLPDecoder_SETENDBLOCK_CHAR=HLLPDecoder.setEndBlockChar(): Value is set as <{0}>> (in decimal ascii).
HLLPDecoder_SETENDDATA_CHAR=HLLPDecoder.setEndDataChar(): Value is set as <{0}>> (in decimal ascii).
HLLPDecoder_INVALID_BLOCKTYPE=HLLPDecoder.Decoder(): Invalid Block Type [{0}],]. The Block Type (the second character) should be D or N.
HLLPDecoder_INVALID_VERSIONID=HLLPDecoder.Decoder(): Invalid Protocol ID (Version ID) [{0}].
HLLPDecoder_INVALID_VERSIONID_CHAR = HLLPDecoder.Decoder(): Invalid Protocol ID (Version ID) [ {0} ] It should represent a valid HL7 version ID like 23 or 2.3, etc..
HLLPDecoder_INVALID_CHECKSUM=HLLPDecoder.checksum(): Invalid request. The data is [{0}]  the offset is < {1} > ,>, the length is < {2}>.
HLLPDecoder_INVALID_HLLP_DATA=HLLPDecoder.decode(): Invalid HLLP data [ {0} ]. Its length shouldn't be less than 15.
HLLPDecoder_INVALID_HLLP_DATA_WITH_STARTBLOCK_CHAR=HLLPDecoder.decode(): Invalid HLLP data,.The configuration value of Start Block Character is [ {0}}] ,It does not match with the actual data.
HLLPDecoder_INVALID_HLLP_DATA_WITH_ENDBLOCK_CHAR=HLLPDecoder.decode(): Invalid HLLP data,.The configuration value of End Block Character is [ {0}}] ,It does not match with the actual data.
HLLPDecoder_INVALID_HLLP_DATA_WITH_ENDDATA_CHAR=HLLPDecoder.decode(): Invalid HLLP data,.The configuration value of End Data Character is [ {0}}] ,It does not match with the actual data.
HLLPDecoder_INVALID_HLLP_DATA_WITH_INVALID_BLOCKTYPE=HLLPDecoder.decode(): Invalid HLLP data {0}, the Block Type (second character) should be {1} or {2}
HLLPDecoder_INVALID_HLLP_DATA_WITH_INVALID_VERSIONID= The Protocol ID (the third and fourth character) doesn't have valid value, please check documentation for details.
HLLPDecoder_INVALID_HLLP_DATA_WITH_INVALID_CARRIAGE_RETURN=HLLPDecoder.decode(): Invalid HLLP data {0} The fifth character should be a Carriage Return (CR).
HLLPDecoder_INVALID_HLLP_DATA_WITH_DATA_TOO_LONG=HLLPDecoder.decode(): Invalid HLLP data {0}, The data is too long. Its length is < {1} > >. HLLP message Block Size field is a 5-digits number which maximal value is 99999.
HLLPDecoder_INVALID_HLLP_DATA_WITH_BLOCKSIZE=HLLPDecoder.decode(): Invalid HLLP data {0},. The Block Size {1}, it should only contain numeric characters.
HLLPDecoder_INVALID_HLLP_DATA_WITH_BLOCKSIZE_VALUE=HLLPDecoder.decode(): Invalid HLLP data {0},The Block Size value is {1}, but the actual Character count of all characters so far in the data block is {2}
HLLPDecoder_INVALID_HLLP_DATA_CHECKSUM_VALIDATION=HLLPDecoder.decode(): Invalid HLLP data {0},The Checksum value is {1}, should only contain numeric characters.
HLLPDecoder_INVALID_HLLP_DATA_CHECKSUM_VALUE_VALIDATION=HLLPDecoder.decode(): Invalid HLLP data {0}, The Checksum value is {1}, but the expected value is {2}
################################# LLPProviderFactory############################################
LLPProviderFactory_UNSUPPORTED_LLP_TYPE=The Lower Layer Protocol type {0} is not a valid type
LLPProviderFactory_Provider_CLASS=Creating Lower Layer Protocol Provider object of class {0}

