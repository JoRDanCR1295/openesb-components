
###############################   InboundMessageProcessor messages
InboundMessageProcessor.INIT_FAILED=Failure in initializing message processor: {0}
InboundMessageProcessor.SERVICE_LOOP_ENTER=Entered InboundMessageProcessor service loop; receiving from destination {0}, to service {1} provider endpoint {2}, for operation {3}
InboundMessageProcessor.XA_TX_START_FAILED=Failed to start an XA transaction.
InboundMessageProcessor.FAILED_TO_ENLIST_XA_RESOURCE=Failed to enlist XAResource due to : {0}
InboundMessageProcessor.DCOM_ERROR=Unexpected error while receiving DCOM message: {0}
InboundMessageProcessor.SERVICE_LOOP_EXIT=Exit InboundMessageProcessor service loop; to service {0} provider endpoint {1}, operation {2}
InboundMessageProcessor.DELIST_XA_RESOURCE_FAILED=Failed to delist the DCOM XAResource from an XA transaction: {0}
InboundMessageProcessor.XA_TX_COMMIT_FAILED=Failed to commit an XA transaction: {0}
InboundMessageProcessor.XA_TX_NOT_FOUND_IN_MSG_XCHANGE=Configured for XA but unable to get transaction from message exchange ID {0}
InboundMessageProcessor.XA_TX_ROLLBACK_FAILED=Failed to rollback an XA transaction: {0}
InboundMessageProcessor.STOP=Stopping the InboundMessageProcessor Thread for inbound; to service {0} provider endpoint {1}, operation {2}
InboundMessageProcessor.DCOMMSG_RECV=DCOM message received
InboundMessageProcessor.DCOMMSG_MSG_MSG=Received DCOM Text Message: {0}
InboundMessageProcessor.BEGIN_NORMALIZE_MESSAGE=Start normalizing the DCOM message to NMR message
InboundMessageProcessor.END_NORMALIZE_MESSAGE=Successfully normalized the DCOM message to NMR message
InboundMessagePro~cessor_REPLY_CONTEXT_SAVED=Saved DCOM reply context for message exchange ID {0}; binding operation name is {1}, reply DCOM destination name is {2}
InboundMessageProcessor.TRANSACTION_WAIT_FOR_RESPONSE=Wait for message exchange response for message exchange ID {0} on a transacted DCOM message before receiving any further DCOM messages
InboundMessageProcessor.DCOM_MSGING_ERROR=Failed to retrieve message from DCOM destination {0}: {1}
InboundMessageProcessor.NMR_SEND_ERROR=Failed to send message to NMR for service {0} provider endpoint {1}, operation {2}: {3}
InboundMessageProcessor.UNSUPPORTED_MEP=Unexpected MessageExchange type; unsupported MEP {0}
InboundMessageProcessor.IN_ONLY_REPLY=Processing in-only NMR reply for message exchange ID {0}
InboundMessageProcessor.MXCH_PROCESS_REPONSE=Processing {0} reply for message exchange ID {1}; reply status is {2}
InboundMessageProcessor.MXCH_RESPONSE_ID_FOUND=Found inbound message exchange ID {0}
InboundMessageProcessor.RESUME_FAILED=Resume transaction failed due : {0}
InboundMessageProcessor.ROLLBACK_FAILED=Rollback transaction failed due: {0}
InboundMessageProcessor.COMMIT_FAILED=Commit transaction failed due : {0}
InboundMessageProcessor.POST_PROCESS_FAILED=Post process of In-Only failed due : {0}
InboundMessageProcessor.MXCH_NOT_FOUND=Can not find inbound message exchange; ignoring response for message exchange ID {0}
InboundMessageProcessor.MXCH_BAD_STATUS=Unexpected message exchange status {0} received for message exchange ID {1}
InboundMessageProcessor.MXCH_REMOVED=Removed message ID {0} from inbound exchange map
InboundMessageProcessor.ENDPOINT_NOTFOUND=Failed to locate ServiceEndpoint reference {0} for service {1}
InboundMessageProcessor.SEND_TO_NMR_FAILED=Failed to send {0} message: {1}
InboundMessageProcessor.SEND_TO_NMR=Sending message exchange with ID {0}; normalized message content is [{1}]
InboundMessageProcessor.MXCH_CREATE_UNSUPPORTED_MEP=Failed to create MessageExchange; unsupported MEP {0}
InboundMessageProcessor.MXCH_CREATE_FAILED=Failed to create MessageExchange for MEP {0}: {1}
InboundMessageProcessor.TX_SUSPEND_SUCCEEDED=Suspending transaction is completed for tx : {0}
InboundMessageProcessor.TX_RESUME_SUCCEEDED=Resume transaction is completed for tx : {0}

############################### InboundReceiver messages
InboundReceiver.ADD_IN_PROCESSOR=DCOM BC InboundReceiver add inboundmessageprocessor called for endpoint: {0}
InboundReceiver.REMOVE_IN_PROCESSOR=DCOM BC InboundReceiver remove inboundmessageprocessor called for endpoint: {0}
InboundReceiver.INBOUND_SET_THREADS=DCOM BC InboundReceiver set threads called with this count: {0}
InboundReceiver.STOP=Stopping all InboundMessageProcessor threads...

############################### OutboundReceiver messages
OutboundReceiver.STARTED_RECEIVER=DCOM BC OutboundReceiver started ...
OutboundReceiver.ACCEPTED=Accepted MessageExchange: {0}
OutboundReceiver.EXCEPTION_IN_RECEIVING=Exception during starting DCOM OutboundMessageProcessor due to: {0}
OutboundReceiver.SET_THREADS=DCOM BC OutboundReceiver set threads called to set : {0} threads
OutboundReceiver.STOPPING_RECEIVING=DCOM BC OutboundReceiver stopreceiving called.

############################### DCOMBindingBootstrap messages
DCOMBindingBootstrap.EXTENSION_MBEAN=Extension MBean name: {0}
DCOMBindingBootstrap.INIT_CALLED=init method has been called
DCOMBindingBootstrap.EXTENSION_MBEAN_REG_FAILED=Failed to register installer extension MBean: {0}
DCOMBindingBootstrap.EXTENSION_MBEAN_REG_SUCCEEDED=Registered MBean {0}
DCOMBindingBootstrap.ON_INSTALL_CALLED=onInstall running
DCOMBindingBootstrap.ON_INSTALL_DONE=Completed installation
DCOMBindingBootstrap.ON_UNINSTALL_CALLED=onUninstall running
DCOMBindingBootstrap.EXTENSION_MBEAN_UNREG_SUCCEEDED=Unregistered MBean {0}
DCOMBindingBootstrap.EXTENSION_MBEAN_UNREG_FAILED=Failed to unregister MBean {0}: {1}

############################### DCOMBindingComponent messages
DCOMBindingComponent.DELIVERY_CHANNEL_FAILED=Cannot get Delivery Channel from context: {0}
DCOMBindingComponent.OUTBOUND_RECVR_START_FAILED=Failed to start the outbound receiver: {0}
DCOMBindingComponent.SHUTDOWN_CALLED=Binding component shutdown running
DCOMBindingComponent.OUTBOUND_RECVR_STOP_FAILED=Failed to stop the outbound receiver: {0}
DCOMBindingComponent.INBOUND_STOP_FAILED=Failed to stop inbound: {0}
DCOMBindingComponent.SHUTDOWN_DONE=Binding component shutdown completed
DCOMBindingComponent.START_DONE=Binding component started
DCOMBindingComponent.STOP_CALLED=Binding component stop called
DCOMBindingComponent.STOP_DONE=Binding component stopped
DCOMBindingComponent.STATUS_MBEAN_REG_SUCCEEDED=Registered Status Provider MBean for {0}
DCOMBindingComponent.STATUS_MBEAN_REG_FAILED=Failed to register status provider MBean: {0}
DCOMBindingComponent.CONFIG_MBEAN_REG_SUCCEEDED=Registered runtime configuration MBean for {0}
DCOMBindingComponent.CONFIG_MBEAN_REG_FAILED=Failed to register status provider MBean: {0}
DCOMBindingComponent.STATUS_MBEAN_UNREG_FAILED=Failed to un-register status provider MBean for {0}: {1}
DCOMBindingComponent.CONFIG_MBEAN_UNREG_FAILED=Failed to un-register runtime configuration MBean for {0}: {1}
DCOMBindingComponent.OUTBOUND_STARTED=Started dcom outbound
DCOMBindingComponent.OUTBOUND_STOPPED=Stopped dcom outbound
DCOMBindingComponent.INBOUND_STOPPED=Stopped dcom inbound
DCOMBindingComponent.CHANNELS_REMOVED=Removed dcom channels
DCOMBindingComponent.CHANNELS_REMOVAL_FAILED=Failed to remove dcom channels
DCOMBindingComponent.OUTBOUND_RECVR_START_FAILED=Failed to start the outbound receiver: {0}
DCOMBindingComponent.SHUTDOWN_CALLED=Binding component shutdown called
DCOMBindingComponent.SHUTDOWN_DONE=Binding component shutdown completed
DCOMBindingComponent.INBOUND_STARTED=Started Started
DCOMBindingComponent.INBOUND_RECVR_START_FAILED=Failed to start the inbound receiver: {0}

############################### DCOMBindingDeployer messages
DCOMBindingDeployer.DEPLOY=Deploying service unit {0} from {1}
DCOMBindingDeployer.INIT=Initializing service unit {0} from {1}
DCOMBindingDeployer.INIT_SUCCEEDED=Service unit {0} was initialized successfully
DCOMBindingDeployer.INIT_FAILED=Failed to initialize: {0}
DCOMBindingDeployer.START_CALLED=Starting {0}
DCOMBindingDeployer.START_SUCCEEDED=Started {0} successfully
DCOMBindingDeployer.STOP_CALLED=Stopping service unit {0}
DCOMBindingDeployer.STOP_SUCCEEDED=Stopped service unit {0}
DCOMBindingDeployer.UNDEPLOY_SUCCEEDED=Undeploying service unit {0} from {1}

############################### DCOMDenormalizer messages
DCOMDenormalizer.INVALID_OPNAME=Encountered an invalid binding operation name '{0}' for DCOM BC.
DCOMDenormalizer.INVALID_MEP=Encountered invalid message exchange pattern for DCOM BC operation '{0}'.
DCOMDenormalizer.INVALID_MESSAGE=Encountered invalid message type definition for DCOM BC operation '{0}'.


############################### DCOMNormalizer messages
DCOMNormalizer.INVALID_MESSAGE=Encountered invalid message type definition for DCOM BC operation '{0}'.
DCOMNormalizer.UNSUPPORTED_SOURCE=Encountered an invalid Source object - only DCOMSource is supported in DCOM BC for message transformation.
DCOMNormalizer.INVALID_ENCODINGSTYLE=dcom\:message attribute 'encodingStyle' is not well defined while attempting to process encoded data.
DCOMNormalizer.FAILED_CONVERTTODOM=Error occured while transforming the normalized message\:

############################### OutboundMessageProcessor messages
OutboundMessageProcessor.SERVICE_LOOP_ENTER=Entered OutboundMessageProcessor service loop
OutboundMessageProcessor.NMR_ACCEPT_MXCH=Accepted a message in the DCOM binding from NMR; message exchange ID {0}
OutboundMessageProcessor.NMR_COMPLETED_MXCH=Finished processing message exchange ID {0}
OutboundMessageProcessor.UNEXPECTED_ERROR=Unexpected error occurred: {0}
OutboundMessageProcessor.SERVICE_LOOP_EXIT=Exit OutboundMessageProcessor service loop
OutboundMessageProcessor.MXCH_RESPONSE_RECVD=Response for message exchange ID {0} is received after {1} ms
OutboundMessageProcessor.ENDPOINT_UNDEFINED=The Service Descriptor, {0}, does not have a corresponding Endpoint . Ignoring received message for message exchange ID {1}
OutboundMessageProcessor.ENDPOINT_NON_RUNNING_STATE=The endpoint {0} is not in RUNNING state, but in state {1}. Ignoring received message for message exchange ID {2}
OutboundMessageProcessor.MXCH_PATTERN=Pattern for message exchange ID {0} is {1}
OutboundMessageProcessor.MXCH_PATTERN_UNSUPPORTED=Unsupported message exchange pattern {0} for message exchange ID {1}
OutboundMessageProcessor.MXCH_PATTERN_INVALID=Received invalid pattern information for message exchange ID {0}
OutboundMessageProcessor.DCOM_UNSUPPORTED_MSG_TYPE=Unsupported DCOM message Type {0} defined in the DCOM WSDL operation's input
OutboundMessageProcessor.DCOM_INVALID_MSG_TYPE=Invalid (unknown) DCOM message Type {0} defined in the DCOM WSDL operation's input
OutboundMessageProcessor.DCOM_SENDING_TO_DESTINATION=Sending DCOM message to DCOM destination {0}
OutboundMessageProcessor.MXCH_ERROR=Error in message exchange for message exchange ID {0}: {1}
OutboundMessageProcessor.MXCH_SET_STATUS_ERROR=Unable to set status on {0} message for message exchange ID {1}: {3}
OutboundMessageProcessor.NMR_SEND_STATUS_ERROR=Failed to send back message exchange status for message exchange ID {0} to NMR
OutboundMessageProcessor.MXCH_SET_STATUS=Set message exchange status to {0} for message exchange ID {1}
OutboundMessageProcessor.STOP=Stopping the OutboundMessageProcessor thread
OutboundMessageProcessor.BEGIN_DENORMALIZE_MESSAGE=Start denormalizing the NMR message to DCOM message
OutboundMessageProcessor.END_DENORMALIZE_MESSAGE=Successfully denormalized the NMR message to DCOM message
OutboundMessageProcessor.PROCESSING_DCOM_MSG_TYPE=Processing DCOM message of type {0}
OutboundMessageProcessor.REPLY_DCOMMSG_TEXTMSG=Received a DCOM TextMessage reply for message exchange ID {0}; DCOM Message ID {1}
OutboundMessageProcessor.REPLY_DCOMMSG_TEXTMSG_MSG=Received DCOM Text Message reply: {0}
OutboundMessageProcessor.BEGIN_NORMALIZE_MESSAGE=Start normalizing the DCOM reply message to NMR message
OutboundMessageProcessor.END_NORMALIZE_MESSAGE=Successfully normalized the DCOM reply message to NMR message
OutboundMessageProcessor.DCOMMSG_UNSUPPORTED=Received a DCOM reply message of type {0} which is not supported
OutboundMessageProcessor.REPLY_DCOMMSG_MAPMSG=Received a reply DCOM MapMessage; Message ID {0}
OutboundMessageProcessor.FAULT_CREATE_FAILED=Failed to create a Fault message as a reply for message exchange ID {0}: {1}
OutboundMessageProcessor.REPLY_SEND_FAILED=Failed to send the reply to NMR for message exchange ID {0}: {1}
OutboundMessageProcessor.TIME_OUT_ON_REPLY=Time out after waiting {0} milliseconds for DCOM reply message; message exchange ID {1}
OutboundMessageProcessor.SEND_TO_NMR=Sending message exchange with ID {0}; normalized message content is [{1}]
OutboundMessageProcessor.SET_EXCHANGE_STATUS_DONE=Set exchange status to Done for message exchange ID {0}
OutboundMessageProcessor.SET_EXCHANGE_STATUS_ERROR=Set exchange status to Error for message exchange ID {0}
OutboundMessageProcessor.DCOM_TRANSACTION_FAILED=Failed to {0} on DCOM session: {1}
OutboundMessageProcessor.SUSPEND_FAILED=Transaction suspend operation failed for {0}, exchange id : {1} and exception : {2}
OutboundMessageProcessor.DCOM_SENDING_ARG_TO_METHOD=Sending the arguments to invoke a method:{0}
OutboundMessageProcessor_SENDING_BACK_EXCHANGE_WITH_OUTPUT=sending back the response output for message exchange id: {0}


############################### ServiceUnitImpl messages
ServiceUnitImpl.INIT_CALLED=ServiceUnit with {0} called
ServiceUnitImpl.START_CALLED=Starting ServiceUnit {0}; activating all endpoints
ServiceUnitImpl.ENDPOINT_ACTIVATION_ERROR=Can not activate service {0} provider endpoint {1}: {2}
ServiceUnitImpl.DEACTIVATE_ENDPOINTS_DUE_TO_ERROR=Deactivating endpoints that were activated
ServiceUnitImpl.START_SUCCEEDED=Start finished; activated endpoints for ServiceUnit {0}
ServiceUnitImpl.STOP_CALLED=Stopping ServiceUnit {0}; deactivating all endpoints
ServiceUnitImpl.DCOM_CHANNELS_REMOVE_ERROR=ServiceUnit {0}, failed to remove DCOM channels for service {1} provider endpoint {2}: {3}
ServiceUnitImpl.STOP_SUCCEEDED=Stop finished; deactivated endpoints for ServiceUnit {0}
ServiceUnitImpl.SHUTDOWN_CALLED=Shutting down ServiceUnit {0}
ServiceUnitImpl.SHUTDOWN_SUCCEEDED=Shutdown finished for ServiceUnit {0}
ServiceUnitImpl.ENDPOINT_NOT_FOUND_IN_SU=The ServiceUnit {0} does not have the given service {1} with endpoint {2}
ServiceUnitImpl.INBOUND_MSG_PROCESSORS_START_FAILED=Failed to add InboundMessageProcessors; to service {0} provider endpoint {1}: {2}
ServiceUnitImpl.ENDPOINT_ACTIVATED=Activated {0} endpoint; service {1} provider endpoint {2}
ServiceUnitImpl.ENDPOINT_DEACTIVATED=Deactivated {0} endpoint; service {1} provider endpoint {2}
ServiceUnitImpl.ADDCHANNEL_FAILED=Cannot add new channel for suid {0}, Service {1}, Endpoint {2} and Operation {3}
ServiceUnitImpl.OUTBOUND_CHANNEL_OPEN_FAILED=Cannot add open channel for suid {0}, Service {1}, Endpoint {2} and Operation {3}
